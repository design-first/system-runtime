{"version":3,"file":"system-runtime.js","sources":["../src/mson.js","../src/log.js","../src/helper.js","../src/metamodel.js","../src/behavior.js","../src/state.js","../src/history.js","../src/workflow.js","../src/component.js","../src/db.js","../src/runtime.js","../src/system.js"],"sourcesContent":["/*\n * System Runtime\n *\n * https://designfirst.io/systemruntime/\n *\n * Copyright 2022 Erwan Carriou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module mson\n * @description This module contains all the mson definition.\n */\n\nconst ID = '_id'\nconst NAME = '_name'\nconst DESCRIPTION = '_description'\nconst INHERIT = '_inherit'\nconst CLASS = '_class'\nconst CORE = '_core'\n\nconst INTERNAL_NAMES = [\n  '_id',\n  '_name',\n  '_inherit',\n  '_description',\n  '_class',\n  '_core',\n]\n\nconst PROPERTY_TYPE = 'property'\nconst COLLECTION_TYPE = 'collection'\nconst LINK_TYPE = 'link'\nconst METHOD_TYPE = 'method'\nconst EVENT_TYPE = 'event'\n\nconst INTERNAL_TYPES = ['property', 'collection', 'link', 'method', 'event']\n\nconst DEFAULT_TYPES = [\n  'boolean',\n  'string',\n  'number',\n  'object',\n  'function',\n  'array',\n  'date',\n  'any',\n]\n\nconst SCHEMA_DEFINITION = {\n  _id: {\n    type: 'string',\n    mandatory: true,\n  },\n  _name: {\n    type: 'string',\n    mandatory: true,\n  },\n  _inherit: {\n    type: ['string'],\n    mandatory: false,\n    default: ['_Component'],\n  },\n  _class: {\n    type: 'boolean',\n    mandatory: false,\n  },\n  _core: {\n    type: 'boolean',\n    mandatory: false,\n  },\n  _description: {\n    type: 'string',\n    mandatory: false,\n  },\n}\n\nconst MODEL_DEFINITION = {\n  _id: {\n    type: 'string',\n    mandatory: true,\n  },\n  _name: {\n    type: 'string',\n    mandatory: true,\n  },\n  _inherit: {\n    type: ['string'],\n    mandatory: false,\n  },\n  _class: {\n    type: 'boolean',\n    mandatory: false,\n  },\n  _core: {\n    type: 'boolean',\n    mandatory: false,\n  },\n  _description: {\n    type: 'string',\n    mandatory: false,\n  },\n}\n\nconst TYPE_DEFINITION = {\n  _id: {\n    type: 'string',\n    mandatory: true,\n  },\n  name: {\n    type: 'string',\n    mandatory: true,\n  },\n  type: {\n    type: 'string',\n    mandatory: true,\n  },\n  schema: {\n    type: 'object',\n    mandatory: false,\n  },\n  value: {\n    type: ['any'],\n    mandatory: false,\n  },\n  core: {\n    type: 'boolean',\n    mandatory: false,\n  },\n  description: {\n    type: 'string',\n    mandatory: false,\n  },\n}\n\nexport default {\n  ID,\n  NAME,\n  DESCRIPTION,\n  INHERIT,\n  CLASS,\n  CORE,\n  INTERNAL_NAMES,\n  PROPERTY_TYPE,\n  COLLECTION_TYPE,\n  LINK_TYPE,\n  METHOD_TYPE,\n  EVENT_TYPE,\n  INTERNAL_TYPES,\n  DEFAULT_TYPES,\n  SCHEMA_DEFINITION,\n  MODEL_DEFINITION,\n  TYPE_DEFINITION,\n}\n","/*\n * System Runtime\n *\n * https://designfirst.io/systemruntime/\n *\n * Copyright 2022 Erwan Carriou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module log\n * @requires metamodel\n * @requires db\n * @requires component\n * @requires mson\n * @description This module contains all the functions that write a log\n */\n\nimport $metamodel from './metamodel.js'\nimport $db from './db.js'\nimport $component from './component.js'\nimport $mson from './mson.js'\n\n/* Private properties */\n\nlet currentLevel = 'warn' // eslint-disable-line no-unused-vars\nlet loggerRef = null\nlet fakeLoggerRef = {\n  currentLevel: 'warn',\n  level: function debug(levelName) {\n    if (levelName) {\n      this.currentLevel = levelName\n    }\n    return this.currentLevel\n  },\n  debug: function debug(message) {\n    if (this.currentLevel === 'debug') {\n      console.log('runtime: ' + message)\n    }\n  },\n  info: function info(message) {\n    if (this.currentLevel === 'info' || this.currentLevel === 'debug') {\n      console.info('runtime: ' + message)\n    }\n  },\n  warn: function warning(message) {\n    if (\n      this.currentLevel === 'info' ||\n      this.currentLevel === 'warn' ||\n      this.currentLevel === 'debug'\n    ) {\n      console.warn('runtime: ' + message)\n    }\n  },\n  error: function error(message) {\n    if (\n      this.currentLevel === 'info' ||\n      this.currentLevel === 'warn' ||\n      this.currentLevel === 'debug' ||\n      this.currentLevel === 'error'\n    ) {\n      console.error('runtime: ' + message)\n    }\n  },\n}\n\n/**\n * @method getLogger\n * @return {_Logger} _Logger instance\n * @private\n * @description Get the _Logger instance\n */\nfunction getLogger() {\n  let loggerId = ''\n  let loggers = []\n  let result = null\n\n  if (!$metamodel.getModel('_Logger')) {\n    result = fakeLoggerRef\n  } else {\n    loggers = $db.collections._Logger.find()\n    if (loggers.length) {\n      loggerId = loggers[0][$mson.ID]\n\n      if ($component.get(loggerId)) {\n        loggerRef = $component.get(loggerId)\n        result = loggerRef\n      } else {\n        result = fakeLoggerRef\n      }\n    } else {\n      result = fakeLoggerRef\n    }\n  }\n\n  return result\n}\n\n/* Public methods */\n\n/**\n * @method level\n * @param {String} levelName name of the level\n * @description Set the level of the log\n */\nfunction level(levelName) {\n  currentLevel = levelName\n}\n\n/**\n * @method unknownProperty\n * @param {String} propertyName the name of the property\n * @param {Object} schema the schema definition\n * @description A property of a schema is unknown\n */\nfunction unknownProperty(propertyName, schema) {\n  let message = ''\n\n  if (schema[$mson.NAME]) {\n    message =\n      \"unknown property '\" +\n      propertyName +\n      \"' for the definition of '\" +\n      schema[$mson.NAME] +\n      \"'\"\n  } else {\n    message = \"unknown property '\" + propertyName + \"' for a model\"\n  }\n\n  getLogger().warn(message)\n}\n\n/**\n * @method invalidPropertyType\n * @param {String} propertyName name of the peropety\n * @param {String} type the type defined by the schema\n * @param {String} property the property\n * @description Invalid type for a property\n */\nfunction invalidPropertyType(propertyName, type, property) {\n  let realType =\n    property && property.constructor\n      ? property.constructor.name\n      : typeof property\n  getLogger().warn(\n    \"invalid value for property '\" +\n      propertyName +\n      \"': expected type '\" +\n      type +\n      \"' instead of type '\" +\n      realType +\n      \"'\"\n  )\n}\n\n/**\n * @method invalidEnumValue\n * @param {Object} value the value\n * @param {String} type the type defined by the schema\n * @description Invalid value for type enum\n */\nfunction invalidEnumValue(value, type) {\n  getLogger().warn(\n    \"'\" + value + \"' is an invalid value for the type enum '\" + type + \"'\"\n  )\n}\n\n/**\n * @method invalidClassName\n * @param {String} componentId id of the component\n * @param {String} type the type defined by the schema\n * @param {String} constructorName name of the component class\n * @description Invalid class name for a component\n */\nfunction invalidClassName(componentId, type, constructorName) {\n  getLogger().warn(\n    \"invalid component '\" +\n      componentId +\n      \"' for a collection: expected a component of class '\" +\n      type +\n      \"' instead of '\" +\n      constructorName +\n      \"'\"\n  )\n}\n\n/**\n * @method missingProperty\n * @param {String} propertyName name of the property\n * @description Missing a property\n */\nfunction missingProperty(propertyName) {\n  getLogger().warn(\"property '\" + propertyName + \"' is missing\")\n}\n\n/**\n * @method missingImplementation\n * @param {String} name name of the missing schema\n * @description A class definition is missing\n */\nfunction missingImplementation(name) {\n  getLogger().warn(\"schema '\" + name + \"' is missing\")\n}\n\n/**\n * @method invalidTypeImp\n * @param {String} property a property\n * @param {String} className a class name\n * @description Invalid type for a property of a class definition\n */\nfunction invalidTypeImp(property, className) {\n  getLogger().error(\n    \"the property '\" + property + \"' of \" + className + ' model is invalid'\n  )\n}\n\n/**\n * @method missingPropertyImp\n * @param {String} property a property\n * @param {String} className a class name\n * @description Missing a property for a class definition\n */\nfunction missingPropertyImp(property, className) {\n  getLogger().warn(\n    \"missing property '\" + property + \"' in the model '\" + className + \"'\"\n  )\n}\n\n/**\n * @method unknownPropertyImp\n * @param {String} property a property\n * @param {Object} schema a schema\n * @description Unkown property for a class definition\n */\nfunction unknownPropertyImp(property, schema) {\n  getLogger().error(\n    \"the model '\" + schema + \"' has an unknown property '\" + property + \"'\"\n  )\n}\n\n/**\n * @method invalidTypeDefinition\n * @param {String} name a type definition\n * @description  Try to add an invalid type\n */\nfunction invalidTypeDefinition(name) {\n  getLogger().warn(\"the type '\" + name + \"' is not valid\")\n}\n\n/**\n * @method invalidPropertyName\n * @param {String} id id of the component\n * @param {String} className class name of the component\n * @param {String} propertyName name of the property\n * @param {String} propertyValue value of the property\n * @param {String} type type defined by the schema\n * @description Invalid property name\n */\nfunction invalidPropertyName(id, className, propertyName, propertyValue, type) {\n  let classInfo = ''\n  let realType = ''\n\n  if (className !== 'Function') {\n    classInfo = ' (' + className + ' class)'\n  }\n\n  if (typeof type === 'string') {\n    realType =\n      propertyValue && propertyValue.constructor\n        ? propertyValue.constructor.name\n        : typeof propertyValue\n\n    getLogger().warn(\n      \"invalid value for property '\" +\n        propertyName +\n        \"' on component '\" +\n        id +\n        \"'\" +\n        classInfo +\n        \": expected type '\" +\n        type +\n        \"' instead of type '\" +\n        realType +\n        \"'\"\n    )\n  } else {\n    realType = type && type.constructor ? type.constructor.name : typeof type\n\n    getLogger().warn(\n      \"invalid value for property '\" +\n        propertyName +\n        \"' on component '\" +\n        classInfo +\n        \": expected type 'string' instead of type '\" +\n        realType +\n        \"'\"\n    )\n  }\n}\n\n/**\n * @method readOnlyProperty\n * @param {String} id id of the component\n * @param {String} className class name of the component\n * @param {String} propertyName name of the property\n * @description Trying to set a read-only property\n */\nfunction readOnlyProperty(id, className, propertyName) {\n  let classInfo = ''\n\n  if (className !== 'Function') {\n    classInfo = ' (' + className + ' class)'\n  }\n  getLogger().warn(\n    \"can not set read-only property '\" +\n      propertyName +\n      \"' on component '\" +\n      id +\n      \"'\" +\n      classInfo\n  )\n}\n\n/**\n * @method invalidDocumentOnDbInsert\n * @param {String} doc a document\n * @param {String} collectionName the name of the collection\n * @description Invalid document on a System Runtime database insert operation\n */\nfunction invalidDocumentOnDbInsert(doc, collectionName) {\n  getLogger().warn(\n    \"invalid document '\" +\n      JSON.stringify(doc).replace(/,/g, ', ') +\n      \"' (\" +\n      collectionName +\n      ' collection)'\n  )\n}\n\n/**\n * @method invalidPropertyTypeOnDbUpdate\n * @param {String} collectionName the name of the collection\n * @param {String} id id of the component\n * @param {String} propertyName name of the property\n * @param {String} propertyValue value of the property\n * @param {String} type expected type defined by the schema\n * @description  Invalid property on a System Runtime database update operation\n */\nfunction invalidPropertyTypeOnDbUpdate(\n  collectionName,\n  id,\n  propertyName,\n  propertyValue,\n  type\n) {\n  getLogger().warn(\n    \"invalid type for the property '\" +\n      propertyName +\n      \"' of the document '\" +\n      id +\n      \"' (\" +\n      collectionName +\n      \" collection) with the value '\" +\n      JSON.stringify(propertyValue) +\n      \"': expected type '\" +\n      type +\n      \"'\"\n  )\n}\n\n/**\n * @method unknownPropertyOnDbUpdate\n * @param {String} collectionName the name of the collection\n * @param {String} propertyName name of the property\n * @param {String} id id of the component\n * @description Unkonw property on a System Runtime database update operation\n */\nfunction unknownPropertyOnDbUpdate(propertyName, collectionName, id) {\n  getLogger().warn(\n    \"unknown property '\" +\n      propertyName +\n      \"' for document '\" +\n      id +\n      \"' (\" +\n      collectionName +\n      ' collection)'\n  )\n}\n\n/**\n * @method unknownMethod\n * @param {String} classId id of the class\n * @param {String} methodName name of the method\n * @description Call an unknown method of a class\n */\nfunction unknownMethod(classId, methodName) {\n  getLogger().warn(\n    \"try to call an unknown action '\" +\n      methodName +\n      \"' for the class '\" +\n      classId +\n      \"'\"\n  )\n}\n\n/**\n * @method invalidCollectionName\n * @param {String} name name of the collection\n * @description Try to create an invalid DatabaseCollection\n */\nfunction invalidCollectionName(name) {\n  getLogger().warn(\n    \"invalid name for the collection '\" +\n      name +\n      \"': there is no schema '\" +\n      name +\n      \"'\"\n  )\n}\n\n/**\n * @method invalidResultType\n * @param {String} id id of the component\n * @param {String} className class name of the component\n * @param {String} methodName name ot the method\n * @param {String} expectedType expected type\n * @param {String} type current type\n * @description Invalid type result of a method\n */\nfunction invalidResultType(id, className, methodName, expectedType, type) {\n  let classInfo = ''\n\n  if (className !== 'Function') {\n    classInfo = ' (' + className + ' class)'\n  }\n\n  getLogger().warn(\n    \"invalid type for the result of action '\" +\n      methodName +\n      \"' on component '\" +\n      id +\n      \"'\" +\n      classInfo +\n      \": expected type '\" +\n      expectedType +\n      \"' instead of type '\" +\n      type +\n      \"'\"\n  )\n}\n\n/**\n * @method unknownComponent\n * @param {String} id id of the class\n * @param {String} componentId id of the component\n * @description Unknown class\n */\nfunction unknownComponent(className, componentId) {\n  getLogger().warn(\n    \"unkown class name '\" + className + \"' for component '\" + componentId + \"'\"\n  )\n}\n\n/**\n * @method invalidParamNumber\n * @param {String} id id of the component\n * @param {String} className class name of the component\n * @param {String} methodName name of the component\n * @description invalid parameter number for a method\n */\nfunction invalidParamNumber(id, className, methodName) {\n  let classInfo = ''\n\n  if (className !== 'Function') {\n    classInfo = ' (' + className + ' class)'\n  }\n\n  getLogger().warn(\n    \"invalid number of parameters when calling the action '\" +\n      methodName +\n      \"' on component '\" +\n      id +\n      \"'\" +\n      classInfo\n  )\n}\n\n/**\n * @method invalidParamType\n * @param {String} id id of the component\n * @param {String} className class name of the component\n * @param {String} methodName name of the component\n * @param {String} paramName name of the parameter\n * @description  Invalid type parameters for a method\n */\nfunction invalidParamType(id, className, methodName, paramName) {\n  let classInfo = ''\n\n  if (className !== 'Function') {\n    classInfo = ' (' + className + ' class)'\n  }\n  if (paramName !== undefined) {\n    getLogger().warn(\n      \"invalid type for the parameter '\" +\n        paramName +\n        \"' when calling the action '\" +\n        methodName +\n        \"' on component '\" +\n        id +\n        \"'\" +\n        classInfo\n    )\n  } else {\n    getLogger().warn(\n      \"invalid type for a parameter when calling the action '\" +\n        methodName +\n        \"' on component '\" +\n        id +\n        \"'\" +\n        classInfo\n    )\n  }\n}\n\n/**\n * @method behaviorNotUnique\n * @param {String} id id of the class\n * @param {String} stateName name of the state\n * @description Add a more than one behavior to a state\n */\nfunction behaviorNotUnique(id, stateName) {\n  getLogger().warn(\n    \"try to add more than one action for the state '\" +\n      stateName +\n      \"' on class '\" +\n      id +\n      \"'\"\n  )\n}\n\n/**\n * @method invalidStateOn\n * @param {String} id id of the class\n * @param {String} stateName name of the state\n * @description Can not add a behavior with an invalid state\n */\nfunction invalidStateOn(id, stateName) {\n  getLogger().warn(\n    \"try to add an action to an unkwown state '\" +\n      stateName +\n      \"' on class '\" +\n      id +\n      \"'\"\n  )\n}\n\n/**\n * @method invalidStateOff\n * @param {String} id id of the class\n * @param {String} stateName name of the state\n * @description The call to a remove state of the behavior module is invalid\n */\nfunction invalidStateOff(id, stateName) {\n  getLogger().warn(\n    \"try to remove an action from an unkwown state '\" +\n      stateName +\n      \"' on class '\" +\n      id +\n      \"'\"\n  )\n}\n\n/**\n * @method masterSystemNotFound\n * @description The master system is not found\n */\nfunction masterSystemNotFound() {\n  getLogger().warn('can not export the database because no system was defined')\n}\n\n/**\n * @method invalidType\n * @param {String} name name of the type\n * @param {String} value value of the type\n * @param {String} typeName expected type defined by the schema\n * @description Invalid type\n */\nfunction invalidType(name, value, typeName) {\n  let realType =\n    name && value.constructor ? value.constructor.name : typeof value\n\n  getLogger().warn(\n    \"invalid value for property '\" +\n      name +\n      \"': expected type '\" +\n      typeName +\n      \"' instead of type '\" +\n      realType +\n      \"'\"\n  )\n}\n\n/**\n * @method invalidConfiguration\n * @param {Object} obj an object\n * @param {String} type expected type for the configuration\n * @description Invalid class name\n */\nfunction invalidConfiguration(obj, type) {\n  getLogger().warn(\n    \"invalid type for '\" + JSON.stringify(obj) + \"': expected '\" + type + \"'\"\n  )\n}\n\n/**\n * @method unknownType\n * @param {String} value value\n * @description Unknown type\n */\nfunction unknownType(value) {\n  getLogger().warn(\"unknown type for value '\" + JSON.stringify(value) + \"'\")\n}\n\n/**\n * @method unknownPath\n * @param {String} path path\n * @param {String} path subpath\n * @description Unknown subpath in a path\n */\nfunction unknownPath(path, subpath) {\n  getLogger().warn(\n    \"the path '\" + path + \"' has an unkown subpath '\" + subpath + \"'\"\n  )\n}\n\n/**\n * @method canNotYetValidate\n * @param {String} id id of the component\n * @param {String} className name of the class\n * @description A component has not been alreay validated\n */\nfunction canNotYetValidate(id, className) {\n  getLogger().debug(\n    \"can not yet validate if the document '\" +\n      id +\n      \"' is compliant with \" +\n      className +\n      ' model'\n  )\n}\n\n/**\n * @method invalidChannelEvent\n * @param {String} message message send\n * @param {String} eventName name of the event\n * @param {String} type expected type\n * @description A message send by the channel is invalid\n */\nfunction invalidChannelEvent(message, eventName, type) {\n  getLogger().warn(\n    \"invalid type for the message '\" +\n      JSON.stringify(message) +\n      \"': expected type '\" +\n      type +\n      \"' for event '\" +\n      eventName +\n      \"'\"\n  )\n}\n\n/**\n * @method invalidParamNumberMethodOn\n * @param {String} id id of the component\n * @param {String} className class name of the component\n * @param {String} methodName name of the component\n * @description invalid parameter number for a behavior add with 'on' method\n */\nfunction invalidParamNumberMethodOn(id, className, methodName) {\n  let classInfo = ''\n\n  if (className !== 'Function') {\n    classInfo = ' (' + className + ' class)'\n  }\n  getLogger().warn(\n    \"invalid number of parameters when adding an action for the state '\" +\n      methodName +\n      \"' on component '\" +\n      id +\n      \"'\" +\n      classInfo\n  )\n}\n\n/**\n * @method updateUuid\n * @param {String} currentId id of the component\n * @param {String} newId of the component\n * @param {Boolean} alreadyUsed newId already used\n * @description Change the id of a component\n */\nfunction updateUuid(currentId, newId, alreadyUsed) {\n  if (alreadyUsed) {\n    getLogger().warn(\n      \"try to update a component of id '\" +\n        currentId +\n        \"' with the new id '\" +\n        newId +\n        \"' that is already used\"\n    )\n  } else {\n    getLogger().warn(\n      \"try to update a component of id '\" +\n        currentId +\n        \"' with the new id '\" +\n        newId +\n        \"'\"\n    )\n  }\n}\n\n/**\n * @method invalidUseOfComponent\n * @param {String} id id of the component\n * @description Try to change the state of a component that has been destroyed\n */\nfunction invalidUseOfComponent(id) {\n  getLogger().warn(\n    \"try to change the state of the destroyed component '\" + id + \"'\"\n  )\n}\n\n/**\n * @method invalidSchema\n * @param {String} name name of the schema\n * @description Try to add an invalid schema\n */\nfunction invalidSchema(name) {\n  getLogger().warn(\n    \"the schema '\" +\n      name +\n      \"' is not valid, it has been removed from the metamodel\"\n  )\n}\n\n/**\n * @method invalidModel\n * @param {String} name name of the model\n * @description Try to add an invalid model\n */\nfunction invalidModel(name) {\n  getLogger().warn(\n    \"the model '\" +\n      name +\n      \"' is not valid, it has been removed from the metamodel\"\n  )\n}\n\n/**\n * @method invalidParameters\n * @param {String} classId class name of the component\n * @param {String} document document\n * @description Invalid parameters set when creating an instance of a class\n */\nfunction invalidParameters(classId, document) {\n  let id = document && document._id ? document._id : ''\n\n  getLogger().warn(\n    \"the parameters for creating '\" +\n      id +\n      \"' component (\" +\n      classId +\n      ' model) are not compliant with the model'\n  )\n}\n\n/**\n * @method destroyedComponentCall\n * @param {String} propertyName name of the property\n * @param {String} id id of the component\n * @description Try to get the property of a destroyed component\n */\nfunction destroyedComponentCall(propertyName, id) {\n  getLogger().warn(\n    \"trying to get the property '\" +\n      propertyName +\n      \"' on the destroyed component '\" +\n      id +\n      \"'\"\n  )\n}\n\n/**\n * @method invalidConctructorParameters\n * @param {String} object configuration\n * @param {String} name schema name\n * @description Invalid parameter type  when creating an instance of a class\n */\nfunction invalidConctructorParameters(object, name) {\n  getLogger().warn(\n    \"the constructor parameter '\" +\n      JSON.stringify(object).replace(/,/g, ', ') +\n      \"' for creating a component of class '\" +\n      name +\n      \"' is not an object\"\n  )\n}\n\n/**\n * @method unknownModel\n * @param {String} classId id of the class\n * @description Get the information of an unkown model\n */\nfunction unknownModel(classId) {\n  getLogger().warn(\"the model '\" + classId + \"' does not exist\")\n}\n\n/**\n * @method missingSchema\n * @param {String} name name of the schema\n * @description A schema is missing\n */\nfunction missingSchema(name) {\n  getLogger().warn(\"the schema '\" + name + \"' is missing\")\n}\n\n/**\n * @method missingSchema\n * @param {String} name name of the schema where the cyclic dependency was found\n * @description A cyclic dependency was found\n */\nfunction cyclicDependency(name) {\n  if (name) {\n    getLogger().error(\n      \"a cyclic inheritance dependency with the schema '\" +\n        name +\n        \"’ has been found, please check the '_inherit' property of this schema\"\n    )\n  } else {\n    getLogger().error(\n      \"a cyclic inheritance dependency has been found, please check the '_inherit' properties of the schemas\"\n    )\n  }\n}\n\n/**\n * @method invalidEnumType\n * @param {Object} value the value\n * @param {String} typeName name of the type\n * @param {String} type typeName of the type\n * @description Invalid type for a type enum\n */\nfunction invalidEnumType(value, typeName, type) {\n  let realType = ''\n\n  if (typeof type !== 'undefined' && type !== typeof value) {\n    realType =\n      value && value.constructor ? value.constructor.name : typeof value\n    getLogger().warn(\n      \"invalid type for the type '\" +\n        typeName +\n        \"': expected type '\" +\n        type +\n        \"' instead of type '\" +\n        realType +\n        \"'\"\n    )\n  } else {\n    getLogger().warn(\"invalid type for the type '\" + typeName + \"'\")\n  }\n}\n\n/**\n * @method loadSchema\n * @param {String} name name of the schema\n * @description Load schema\n */\nfunction loadSchema(name) {\n  getLogger().debug(\"load schema '\" + name + \"'\")\n}\n\n/**\n * @method loadModel\n * @param {String} name name of the model\n * @description Load model\n */\nfunction loadModel(name) {\n  getLogger().debug(\"load model '\" + name + \"'\")\n}\n\n/**\n * @method loadType\n * @param {String} name name of the type\n * @description Load type\n */\nfunction loadType(name) {\n  getLogger().debug(\"load type '\" + name + \"'\")\n}\n\n/**\n * @method generatingSchema\n * @param {String} name name of the schema\n * @description Generate schema\n */\nfunction generatingSchema(name) {\n  getLogger().debug('generating ' + name + ' schema ...')\n}\n\n/**\n * @method checkModel\n * @param {String} name name of the model\n * @description Check model\n */\nfunction checkModel(name) {\n  getLogger().debug('analyzing ' + name + ' model...')\n}\n\n/**\n * @method createClass\n * @param {String} name name of the class\n * @description Create class\n */\nfunction createClass(name) {\n  getLogger().debug(name + ' class has been created')\n}\n\n/**\n * @method initDb\n * @description Init the database\n */\nfunction initDb() {\n  getLogger().debug('initializing data store...')\n}\n\n/**\n * @method actionInvokeError\n * @param {String} state state\n * @param {String} id component id\n * @param {String} className component class name\n * @param {String} message\n * @description An error happened when invoking a behavior\n */\nfunction actionInvokeError(state, id, className, message) {\n  if (className !== 'Function') {\n    getLogger().error(\n      \"error when calling the action '\" +\n        state +\n        \"' on component '\" +\n        id +\n        \"' (\" +\n        className +\n        ' class): ' +\n        message\n    )\n  } else {\n    getLogger().error(\n      \"error when calling the action '\" +\n        state +\n        \"' on component '\" +\n        id +\n        \"': \" +\n        message\n    )\n  }\n}\n\n/**\n * @method invalidSchemaPropertyName\n * @param {String} name name of the schema\n * @param {String} propName name of the property\n * @description Invalid name for the property of a schema\n */\nfunction invalidSchemaPropertyName(name, propName) {\n  getLogger().warn(\n    \"invalid name '\" +\n      propName +\n      \"' for schema '\" +\n      name +\n      \"': a property name can not begin with '_'\"\n  )\n}\n\n/**\n * @method invalidSchemaProperty\n * @param {String} name name of the schema\n * @param {String} propName name of the property\n * @description Invalid name for the property of a schema\n */\nfunction invalidSchemaProperty(name, propName) {\n  getLogger().warn(\n    \"invalid property '\" +\n      propName +\n      \"' for schema '\" +\n      name +\n      \"': only 'property', 'link', 'collection', 'method' and 'event' are allowed\"\n  )\n}\n\n/**\n * @method invalidPropertyFormat\n * @param {String} obj definition of a property\n * @description Invalid format for the definition of a property\n */\nfunction invalidPropertyFormat(obj) {\n  getLogger().warn(\n    \"invalid format for a definition of a property: '\" +\n      obj +\n      \"' is not an object\"\n  )\n}\n\n/**\n * @method invalidState\n * @param {String} model name of the model\n * @param {String} state invalid state\n * @description Invalid state\n */\nfunction invalidState(model, state) {\n  getLogger().warn(\n    \"invalid state '\" + state + \"' for the model '\" + model + \"'\"\n  )\n}\n\n/**\n * @method unknownContext\n * @param {String} className name of the class\n * @param {String} methodName name of the method\n * @description Invoke a method class without a context\n */\nfunction unknownContext(className, methodName) {\n  getLogger().warn(\n    \"invoke the action '\" +\n      methodName +\n      \"' on the class '\" +\n      className +\n      \"' without a valid context\"\n  )\n}\n\n/**\n * @method historyDocumentInserted\n * @param {Object} id id of the component\n * @param {String} collectionName collectionName of the component\n * @param {String} document\n * @description Created document from history\n */\nfunction historyDocumentInserted(id, collectionName, doc) {\n  getLogger().debug(\n    \"Created component of id '\" +\n      id +\n      \"' ('\" +\n      collectionName +\n      \" collection) with document '\" +\n      doc +\n      \"'\"\n  )\n}\n\n/**\n * @method historyDocumentRemoved\n * @param {Object} id id of the component\n * @param {String} collectionName collectionName of the component\n * @description Removed document from history\n */\nfunction historyDocumentRemoved(id, collectionName) {\n  getLogger().debug(\n    \"Destroyed component of id '\" + id + \"' (\" + collectionName + ' collection)'\n  )\n}\n\n/**\n * @method historyDocumentUpdated\n * @param {Object} id id of the component\n * @param {String} collectionName collectionName of the component\n * @param {String} fieldName field name of the component\n * @param {String} value value of the field\n * @description Updated document from history\n */\nfunction historyDocumentUpdated(id, collectionName, fieldName, value) {\n  getLogger().debug(\n    \"Updated field '\" +\n      fieldName +\n      \"' of component of id '\" +\n      id +\n      \"' with value '\" +\n      value +\n      \"' (\" +\n      collectionName +\n      ' collection)'\n  )\n}\n\n/**\n * @method invalidCollectionItem\n * @param {String} componentId id of the component\n * @param {String} type the type defined by the schema\n * @param {String} constructorName name of the component class\n * @description Invalid class name for a component\n */\nfunction invalidCollectionItem(\n  id,\n  className,\n  propertyName,\n  propertyValue,\n  type\n) {\n  let classInfo = ''\n\n  if (className !== 'Function') {\n    classInfo = ' (' + className + ' class)'\n  }\n\n  getLogger().warn(\n    \"invalid value for property '\" +\n      propertyName +\n      \"' on component '\" +\n      id +\n      \"'\" +\n      classInfo +\n      \": expected type '\" +\n      type +\n      \"' for all items of the collection '\" +\n      JSON.stringify(propertyValue) +\n      \"'\"\n  )\n}\n\nexport default {\n  level,\n  unknownProperty,\n  invalidPropertyType,\n  invalidEnumValue,\n  invalidClassName,\n  missingProperty,\n  missingImplementation,\n  invalidTypeImp,\n  missingPropertyImp,\n  unknownPropertyImp,\n  invalidTypeDefinition,\n  invalidPropertyName,\n  readOnlyProperty,\n  invalidDocumentOnDbInsert,\n  invalidPropertyTypeOnDbUpdate,\n  unknownPropertyOnDbUpdate,\n  unknownMethod,\n  invalidCollectionName,\n  invalidResultType,\n  unknownComponent,\n  invalidParamNumber,\n  invalidParamType,\n  behaviorNotUnique,\n  invalidStateOn,\n  invalidStateOff,\n  masterSystemNotFound,\n  invalidType,\n  invalidConfiguration,\n  unknownType,\n  unknownPath,\n  canNotYetValidate,\n  invalidChannelEvent,\n  invalidParamNumberMethodOn,\n  updateUuid,\n  invalidUseOfComponent,\n  invalidSchema,\n  invalidModel,\n  invalidParameters,\n  destroyedComponentCall,\n  invalidConctructorParameters,\n  unknownModel,\n  missingSchema,\n  cyclicDependency,\n  invalidEnumType,\n  loadSchema,\n  loadModel,\n  loadType,\n  generatingSchema,\n  checkModel,\n  createClass,\n  initDb,\n  actionInvokeError,\n  invalidSchemaPropertyName,\n  invalidSchemaProperty,\n  invalidPropertyFormat,\n  invalidState,\n  unknownContext,\n  historyDocumentInserted,\n  historyDocumentRemoved,\n  historyDocumentUpdated,\n  invalidCollectionItem,\n}\n","/*\n * System Runtime\n *\n * https://designfirst.io/systemruntime/\n *\n * Copyright 2022 Erwan Carriou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module helper\n * @requires db\n * @requires component\n * @requires mson\n * @description This module contains all the functions used by all the modules\n */\n\nimport $db from './db.js'\nimport $component from './component.js'\nimport $mson from './mson.js'\n\n/* Private property */\n\nlet runtimeRef = null\n\n/* Public method */\n\n/**\n * @method isRuntime\n * @returns {Boolean} true if a System Runtime instance exist\n * @description Check if a System Runtime instance exists\n */\nfunction isRuntime() {\n  let result = false\n\n  if ($db.collections._Runtime && $db.collections._Runtime.find().length) {\n    result = true\n  }\n\n  return result\n}\n\n/**\n * @method getRuntime\n * @returns {_Runtime} System Runtime instance\n * @description Get the System Runtime instance\n */\nfunction getRuntime() {\n  let runtimeId = ''\n  let search = $db.collections._Runtime.find()\n\n  if (!runtimeRef && search[0]) {\n    runtimeId = search[0][$mson.ID]\n    runtimeRef = $component.get(runtimeId)\n  }\n\n  return runtimeRef\n}\n\n/**\n * @method isOnNode\n * @returns {Boolean} true if a System Runtime is running on node\n * @description Check if a System Runtime is running on node\n */\nfunction isOnNode() {\n  let result = false\n\n  if (typeof window === 'undefined' && typeof global !== 'undefined') {\n    result = true\n  }\n\n  return result\n}\n\n/**\n * @method generateId\n * @returns {String} a uuid\n * @description Generate a uuid\n */\nfunction generateId() {\n  // taken from https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n  function gen() {\n    return 'xxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      let r = (Math.random() * 16) | 0\n      let v = c === 'x' ? r : (r & 0x3) | 0x8\n      return v.toString(16)\n    })\n  }\n\n  // force the uuid to start with a letter\n  function getPrefix() {\n    let validPrefix = 'abcdef'\n    return validPrefix.charAt(Math.floor(Math.random() * validPrefix.length))\n  }\n\n  return getPrefix() + gen()\n}\n\nexport default {\n  isRuntime,\n  getRuntime,\n  isOnNode,\n  generateId,\n}\n","/*\n * System Runtime\n *\n * https://designfirst.io/systemruntime/\n *\n * Copyright 2022 Erwan Carriou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module metamodel\n * @requires db\n * @requires log\n * @requires component\n * @requires workflow\n * @requires helper\n * @requires mson\n * @description This module manages System Runtime metamodel.\n * System Runtime metamodel loads schemas and types, analyzes them and\n * creates the component classes and related DatabaseCollections.\n */\n\nimport $db from './db.js'\nimport $log from './log.js'\nimport $component from './component.js'\nimport $helper from './helper.js'\nimport $mson from './mson.js'\n\n/* Private properties */\n\nlet store = {\n  inheritance: {},\n  inheritanceTree: {},\n  schemas: {},\n  generatedSchemas: {},\n  models: {},\n  generatedModels: {},\n  states: {},\n  type: {},\n}\n\n/* Private methods */\n\n/**\n * @method isInternalName\n * @param {String} name\n * @private\n * @description is name an internal name\n */\nfunction isInternalName(name) {\n  let result = true\n\n  if ($mson.INTERNAL_NAMES.indexOf(name) === -1) {\n    result = false\n  }\n  return result\n}\n\n/**\n * @method generateModels\n * @private\n * @description Generate the models\n */\nfunction generateModels() {\n  let att = ''\n  let name = ''\n  let schemaName = ''\n  let schema = {}\n  let schemaDef = null\n  let modelName = ''\n  let modelParent = null\n  let modelExt = null\n  let modelDef = null\n  let model = {}\n  let mergedModel = {}\n  let parents = []\n  let length = 0\n  let i = 0\n  let j = 0\n  let nbAncestors = 0\n  let sortInheritTree = []\n\n  // default values\n  for (schemaName in store.generatedSchemas) {\n    schema = store.generatedSchemas[schemaName]\n\n    // set model internal properties\n    model = {\n      _name: schema[$mson.NAME],\n    }\n\n    // set _core\n    if (typeof schema[$mson.CORE] !== 'undefined') {\n      model[$mson.CORE] = schema[$mson.CORE]\n    }\n\n    // set inherit\n    if (Array.isArray(schema[$mson.INHERIT])) {\n      model[$mson.INHERIT] = schema[$mson.INHERIT]\n    }\n\n    // set class\n    if (typeof schema[$mson.CLASS] !== 'undefined') {\n      model[$mson.CLASS] = schema[$mson.CLASS]\n    }\n\n    // set description\n    if (typeof schema[$mson.DESCRIPTION] !== 'undefined') {\n      model[$mson.DESCRIPTION] = schema[$mson.DESCRIPTION]\n    }\n\n    // check valid name\n    for (att in schema) {\n      if (!isInternalName(att) && att.indexOf('_') === 0) {\n        $log.invalidSchemaPropertyName(schema[$mson.NAME], att)\n      }\n    }\n\n    //  set model default values\n    for (att in schema) {\n      switch (true) {\n        case schema[att] === 'property':\n          model[att] = {\n            type: 'any',\n            readOnly: false,\n            mandatory: false,\n            default: '',\n            description: att,\n            label: att,\n          }\n          break\n        case schema[att] === 'link':\n          model[att] = {\n            type: '_Component',\n            readOnly: false,\n            mandatory: false,\n            default: '',\n            description: att,\n            label: att,\n          }\n          break\n        case schema[att] === 'method':\n          model[att] = {\n            params: [\n              {\n                name: 'param1',\n                type: 'any',\n                mandatory: false,\n                default: null,\n              },\n              {\n                name: 'param2',\n                type: 'any',\n                mandatory: false,\n                default: null,\n              },\n              {\n                name: 'param3',\n                type: 'any',\n                mandatory: false,\n                default: null,\n              },\n            ],\n            result: 'any',\n            description: att,\n          }\n          break\n        case schema[att] === 'event':\n          model[att] = {\n            params: [\n              {\n                name: 'param1',\n                type: 'any',\n                mandatory: false,\n                default: null,\n              },\n              {\n                name: 'param2',\n                type: 'any',\n                mandatory: false,\n                default: null,\n              },\n              {\n                name: 'param3',\n                type: 'any',\n                mandatory: false,\n                default: null,\n              },\n            ],\n            description: att,\n          }\n          break\n        case schema[att] === 'collection':\n          model[att] = {\n            type: ['_Component'],\n            readOnly: false,\n            mandatory: false,\n            default: [],\n            description: att,\n            label: att,\n          }\n          break\n        default:\n          if (!isInternalName(att)) {\n            $log.invalidSchemaProperty(schema[$mson.NAME], att)\n          }\n          break\n      }\n    }\n\n    store.generatedModels[model[$mson.NAME]] = model\n  }\n\n  // models to override\n  for (modelName in store.generatedModels) {\n    model = store.generatedModels[modelName]\n    name = model[$mson.NAME]\n    modelExt = store.models[name]\n    if (modelExt) {\n      mergedModel = merge(modelExt, model)\n      store.generatedModels[name] = mergedModel\n    }\n  }\n\n  // inheritance\n  sortInheritTree = sortInheritanceTree()\n\n  nbAncestors = sortInheritTree.length\n  for (i = 0; i < nbAncestors; i++) {\n    modelName = sortInheritTree[i]\n    model = store.generatedModels[modelName]\n\n    if (model) {\n      parents = getParents(modelName)\n      parents.reverse()\n\n      length = parents.length\n      for (j = 0; j < length; j++) {\n        name = parents[j]\n        modelParent = store.generatedModels[name]\n        if (modelParent) {\n          mergedModel = merge(modelParent, model)\n          store.generatedModels[modelName] = mergedModel\n        }\n      }\n\n      // last inherit\n      // is the overriden model\n      modelExt = store.models[modelName]\n      if (modelExt) {\n        mergedModel = merge(modelExt, store.generatedModels[modelName])\n        store.generatedModels[modelName] = mergedModel\n      }\n    }\n  }\n\n  // save\n  for (schemaName in store.generatedSchemas) {\n    schemaDef = store.generatedSchemas[schemaName]\n    $db.collections._GeneratedSchema.insert(schemaDef)\n  }\n  for (modelName in store.generatedModels) {\n    modelDef = store.generatedModels[modelName]\n    $db.collections._GeneratedModel.insert(modelDef)\n  }\n}\n\n/**\n * @method loadInMemory\n * @private\n * @description Load schemas and types in memory\n */\nfunction loadInMemory() {\n  let schemas = []\n  let types = []\n  let schema = null\n  let model = {}\n  let models = []\n  let type = null\n  let name = ''\n  let inherit = ''\n  let i = 0\n  let length = 0\n\n  // init store\n  store.inheritance = {}\n  store.inheritanceTree = {}\n  store.schemas = {}\n  store.generatedSchemas = {}\n  store.models = {}\n  store.generatedModels = {}\n  store.states = {}\n  store.type = {}\n\n  // load schemas\n  schemas = $db.collections._Schema.find({})\n\n  length = schemas.length\n  for (i = 0; i < length; i++) {\n    schema = schemas[i]\n\n    name = schema[$mson.NAME]\n    inherit = schema[$mson.INHERIT]\n\n    store.schemas[name] = schema\n    if (inherit) {\n      store.inheritance[name] = inherit\n    }\n\n    if (!schema[$mson.CORE]) {\n      $log.loadSchema(name)\n    }\n  }\n\n  // load models\n  models = $db.collections._Model.find({})\n\n  length = models.length\n  for (i = 0; i < length; i++) {\n    model = models[i]\n    name = model[$mson.NAME]\n\n    store.models[name] = model\n\n    if (!model[$mson.CORE]) {\n      $log.loadModel(name)\n    }\n  }\n\n  // load types\n  types = $db.collections._Type.find({})\n\n  length = types.length\n  for (i = 0; i < length; i++) {\n    type = types[i]\n    store.type[type.name] = type\n\n    if (!type.core) {\n      $log.loadType(type.name)\n    }\n  }\n}\n\n/**\n * @method createInheritanceTree\n * @private\n * @description Create the inheritance tree\n */\nfunction createInheritanceTree() {\n  let name = ''\n  let c3linerization = []\n  let ancestors = []\n\n  /**\n   *\n   * @param {Array} elts array of elts\n   * @returns {Boolean} true if all the arrays are empty\n   * @private\n   * @description  Check if we have finisehd to linerize\n   */\n  function _isEmpty(elts) {\n    let i = 0\n    let length = 0\n    let result = true\n\n    length = elts.length\n    for (i = 0; i < length; i++) {\n      if (elts[i].length) {\n        result = false\n      }\n    }\n    return result\n  }\n\n  /**\n   * @param {String} elt element to remove\n   * @param {Array} elts array of elts\n   * @private\n   * @description Remove an elt from all the arrays\n   */\n  function _removeCandidate(elt, elts) {\n    let i = 0\n    let length = 0\n    let arr = []\n\n    length = elts.length\n    for (i = 0; i < length; i++) {\n      if (elts[i].indexOf(elt) === 0) {\n        arr = elts[i]\n        arr.reverse()\n        arr.pop()\n        arr.reverse()\n        elts[i] = arr\n      }\n    }\n  }\n\n  /**\n   * @method _isCandidate\n   * @param {String} elt element to remove\n   * @param {Array} elts array of elts\n   * @returns {Boolean} true if the element is a good candidate.\n   * @private\n   * @description Check the element is a good candidate\n   */\n  function _isCandidate(elt, elts) {\n    let result = true\n    let i = 0\n    let length = 0\n\n    length = elts.length\n    for (i = 0; i < length; i++) {\n      if (elts[i].indexOf(elt) > 0) {\n        result = false\n      }\n    }\n\n    return result\n  }\n\n  /**\n   * @method _findCandidate\n   * @param {Array} elts array of elts\n   * @returns {Array} array containing the candidate\n   * @private\n   * @description Find a candidate and return it.\n   */\n  function _findCandidate(elts) {\n    let i = 0\n    let length = 0\n    let result = []\n\n    length = elts.length\n    for (i = 0; i < length; i++) {\n      if (_isCandidate(elts[i][0], elts)) {\n        result.push(elts[i][0])\n        _removeCandidate(elts[i][0], elts)\n        break\n      }\n    }\n    return result\n  }\n\n  /**\n   * @method _merge\n   * @param {Array} elts array of elts\n   * @returns {Array} list of candidates returned by the merge\n   * @private\n   * @description Merge the arrays\n   */\n  function _merge(elts) {\n    let result = []\n    let candidates = []\n\n    candidates = _findCandidate(elts)\n    while (candidates[0] !== undefined) {\n      result = result.concat(candidates)\n      candidates = _findCandidate(elts)\n    }\n\n    if (!_isEmpty(elts)) {\n      $log.cyclicDependency()\n    }\n    return result\n  }\n\n  /**\n   * @method _linerize\n   * @param {String} name name of the element\n   * @returns {Array} list of candidates\n   * @private\n   * @description Start the linerieation from an element\n   */\n  function _linerize(name) {\n    let result = []\n    let parents = []\n    let i = 0\n    let length = 0\n\n    /**\n     * @method _checkCyclicDep\n     * @param {String} name\n     * @param {String} item\n     * @returns {Boolean} true if there is a cyclic dependency\n     * @private\n     * @description Check if there is a cyclic dependency\n     */\n    function _checkCyclicDep(name, item) {\n      let isCyclicDeb = false\n\n      if (\n        Array.isArray(store.inheritance[item]) &&\n        store.inheritance[item].indexOf(name) !== -1\n      ) {\n        $log.cyclicDependency(name)\n        isCyclicDeb = true\n      }\n      return isCyclicDeb\n    }\n\n    if (Array.isArray(store.inheritance[name])) {\n      parents = store.inheritance[name].slice()\n    } else {\n      $log.missingSchema(name)\n    }\n\n    length = parents.length\n    for (i = 0; i < length; i++) {\n      if (_checkCyclicDep(name, parents[i])) {\n        parents = []\n        break\n      }\n    }\n\n    if (parents.length) {\n      result = [name].concat(_merge(parents.map(_linerize).concat([parents])))\n    } else {\n      result = [name]\n    }\n    return result\n  }\n\n  for (name in store.inheritance) {\n    c3linerization = _linerize(name)\n    ancestors = c3linerization.reverse()\n    ancestors.pop()\n    if (ancestors.length) {\n      store.inheritanceTree[name] = ancestors\n    }\n  }\n}\n\n/**\n * @method extend\n * @param {String} name name of the schema to extend\n * @returns {JSON} object extended with the properties of its parent\n * @private\n * @description Extend a schema with the properties of its parent\n */\nfunction extend(name) {\n  let sonExtend = {}\n  let son = store.schemas[name]\n  let ancestors = store.inheritanceTree[name]\n  let length = 0\n  let i = 0\n  let ancestor = null\n  let prop = ''\n\n  if (ancestors) {\n    length = ancestors.length\n    ancestors.reverse()\n  }\n  for (i = 0; i < length; i++) {\n    ancestor = store.schemas[ancestors[i]]\n    for (prop in ancestor) {\n      if (prop.indexOf('_') !== 0) {\n        sonExtend[prop] = ancestor[prop]\n      }\n    }\n  }\n  for (prop in son) {\n    sonExtend[prop] = son[prop]\n  }\n  return sonExtend\n}\n\n/**\n * @method sortInheritanceTree\n * @returns {Array} sorted InheritanceTree structure\n * @private\n * @description Get sorted InheritanceTree structure\n */\nfunction sortInheritanceTree() {\n  let result = []\n  let temp = {}\n  let keys = []\n  let modelName = ''\n  let nbAncestors = 0\n\n  for (modelName in store.inheritanceTree) {\n    nbAncestors = store.inheritanceTree[modelName].length\n    if (typeof temp[nbAncestors] === 'undefined') {\n      temp[nbAncestors] = []\n    }\n    temp[nbAncestors].push(modelName)\n  }\n\n  keys = Object.keys(temp).sort()\n  keys.forEach(function (index) {\n    temp[index].forEach(function (model) {\n      result.push(model)\n    })\n  })\n\n  return result\n}\n\n/**\n * @method generateSchemas\n * @private\n * @description Generate the schemas\n */\nfunction generateSchemas() {\n  let name = ''\n\n  for (name in store.schemas) {\n    if (!store.schemas[name][$mson.CORE]) {\n      $log.generatingSchema(name)\n    }\n\n    store.generatedSchemas[name] = extend(name)\n  }\n}\n\n/**\n * @method checkModels\n * @private\n * @description Test if all the models are compliants with their schemas\n */\nfunction checkModels() {\n  let name = ''\n  let classDef = null\n  let schema = ''\n\n  for (name in store.generatedModels) {\n    classDef = store.generatedModels[name]\n    if (classDef) {\n      schema = store.generatedSchemas[name]\n      if (schema) {\n        if (!classDef[$mson.CORE]) {\n          $log.checkModel(name)\n        }\n        checkImp(classDef, schema)\n      } else {\n        $log.missingImplementation(name)\n      }\n    }\n  }\n}\n\n/**\n * @method getStates\n * @private\n * @description Get all the states of a schema\n */\nfunction getStates() {\n  let name = ''\n  let schema = null\n  let type = ''\n  let states = []\n  let attribute = ''\n\n  for (name in store.generatedSchemas) {\n    states = []\n    schema = store.generatedSchemas[name]\n    if (schema) {\n      for (attribute in schema) {\n        type = schema[attribute]\n        if (\n          attribute.indexOf('_') !== 0 &&\n          $mson.INTERNAL_TYPES.indexOf(type) !== -1\n        ) {\n          states.push(attribute)\n        }\n      }\n    }\n    store.states[name] = states\n  }\n}\n\n/**\n * @method checkImp\n * @param {JSON} classDef schema to test\n * @param {JSON} classImp schema to validate\n * @private\n * @description Test if a schema is compliant with its schema\n */\nfunction checkImp(classDef, classImp) {\n  let property = ''\n  let value = null\n\n  for (property in classImp) {\n    if (\n      property !== $mson.ID &&\n      property !== $mson.NAME &&\n      property !== $mson.DESCRIPTION &&\n      property !== $mson.INHERIT &&\n      property !== $mson.CLASS &&\n      property !== $mson.CORE\n    ) {\n      if (typeof classDef[property] !== 'undefined') {\n        value = classDef[property]\n        if (!checkSchema(value, classImp[property])) {\n          $log.invalidTypeImp(property, classDef[$mson.NAME])\n        }\n      } else {\n        $log.missingPropertyImp(property, classDef[$mson.NAME])\n      }\n    }\n  }\n  // check if all properties are there\n  for (property in classDef) {\n    if (\n      property !== $mson.ID &&\n      property !== $mson.NAME &&\n      property !== $mson.DESCRIPTION &&\n      property !== $mson.INHERIT &&\n      property !== $mson.CLASS &&\n      property !== $mson.CORE\n    ) {\n      if (typeof classImp[property] === 'undefined') {\n        $log.unknownPropertyImp(property, classDef[$mson.NAME])\n      }\n    }\n  }\n}\n\n/**\n * @method checkSchema\n * @param {Object} value value to test\n * @param {Object} type type to test\n * @returns {Boolean} true if the value has the correct type\n * @private\n * @description Test if a value has the correct type\n */\nfunction checkSchema(value, type) {\n  let result = true\n\n  if (hasType(type, 'string') && $mson.DEFAULT_TYPES.indexOf(type) !== -1) {\n    result = hasType(value, type)\n  } else {\n    result = checkCustomSchema(value, type)\n  }\n  return result\n}\n\n/**\n * @method checkCustomSchema\n * @param {type} value value to test\n * @param {String} typeName type to test\n * @returns {Boolean} true if the value has the correct type\n * @private\n * @description Test if a value has correct custom type\n */\nfunction checkCustomSchema(value, typeName) {\n  let result = true\n  let typeDef = store.type[typeName]\n  let length = 0\n  let i = 0\n\n  if (!hasType(typeDef, 'undefined')) {\n    if (!hasType(value, 'undefined')) {\n      if (typeDef.type === 'array') {\n        length = value.length\n        for (i = 0; i < length; i++) {\n          if (!hasType(typeDef.schema, 'undefined')) {\n            result = isValidSchema(value[i], typeDef.schema)\n          } else {\n            result = isValidType(value[i], typeDef.type)\n          }\n          if (result === false) {\n            break\n          }\n        }\n      } else {\n        if (!hasType(typeDef.schema, 'undefined')) {\n          result = isValidSchema(value, typeDef.schema)\n        } else {\n          result = isValidType(value, typeDef.type)\n        }\n      }\n    } else {\n      result = false\n    }\n  } else {\n    result = false\n  }\n\n  return result\n}\n\n/**\n * @method initDbStructure\n * @private\n * @description Init the Database stucture\n */\nfunction initDbStructure() {\n  $db.collection('_Logger')\n  $db.collection('_Schema')\n  $db.collection('_GeneratedSchema')\n  $db.collection('_Model')\n  $db.collection('_GeneratedModel')\n  $db.collection('_Behavior')\n  $db.collection('_Type')\n  $db.collection('_Message')\n  $db.collection('_Channel')\n  $db.collection('_History')\n}\n\n/**\n * @method createDbStructure\n * @private\n * @description Create the Database structure (i.e. DatabaseCollection)\n */\nfunction createDbStructure() {\n  let modelName = ''\n  let modelDef = {}\n\n  for (modelName in store.generatedModels) {\n    modelDef = store.generatedModels[modelName]\n    if (\n      typeof $db.collections[modelDef[$mson.NAME]] === 'undefined' &&\n      modelDef[$mson.CLASS] !== false\n    ) {\n      $db.collection(modelDef[$mson.NAME])\n    }\n  }\n}\n\n/**\n * @method createClass\n * @private\n * @description Create all the classes of the model\n */\nfunction createClass() {\n  let modelName = ''\n  let modelDef = {}\n\n  for (modelName in store.generatedModels) {\n    modelDef = store.generatedModels[modelName]\n    if (modelDef[$mson.CLASS] !== false) {\n      $component.create({\n        model: modelName,\n      })\n      if (!modelDef[$mson.CORE]) {\n        $log.createClass(modelName)\n      }\n    }\n  }\n}\n\n/**\n * @method getRealClassName\n * @param {String} value\n * @returns {String} real name\n * @private\n * @description Get the real name of the referenced class\n */\nfunction getRealClassName(value) {\n  return value.trim()\n}\n\n/**\n * @method getRealTypeName\n * @param {String} value\n * @returns {String} real name\n * @private\n * @description Get the real name of the referenced type\n */\nfunction getRealTypeName(value) {\n  return value.replace('{', '').replace('}', '').trim()\n}\n\n/**\n * @method isCustomType\n * @param {String} value\n * @returns {Boolean}\n * @private\n * @description Is the value a custom type\n */\nfunction isCustomType(value) {\n  let result =\n    hasType(value, 'string') &&\n    $mson.DEFAULT_TYPES.indexOf(value) === -1 &&\n    !isClassName(value)\n\n  return result\n}\n\n/**\n * @method isTypeReference\n * @param {String} value\n * @returns {Boolean}\n * @description Is the value reference a type value\n */\nfunction isTypeReference(value) {\n  return value.indexOf('{') !== -1\n}\n\n/**\n * @method isModelPath\n * @param {String} value\n * @returns {Boolean}\n * @private\n * @description Is the value a model path\n */\nfunction isModelPath(value) {\n  return value.indexOf('.') !== -1\n}\n\n/**\n * @method getRealType\n * @param {type} value\n * @returns {String} type of the value\n * @private\n * @description Get the real type of a value\n */\nfunction getRealType(value) {\n  let type = ''\n\n  if (Array.isArray(value)) {\n    type = 'array'\n  } else {\n    type = typeof value\n  }\n  if (value === 'any') {\n    type = 'any'\n  }\n\n  return type\n}\n\n/**\n * @method getClassName\n * @param {type} obj object\n * @returns {String} the class name of the object\n * @private\n * @description Get the class name of an object\n */\nfunction getClassName(obj) {\n  let result = ''\n\n  if (obj && obj.constructor) {\n    result = obj.constructor.name\n  } else {\n    result = typeof obj\n  }\n  return result\n}\n\n/**\n * @method isValidEnumValue\n * @param {String} value\n * @param {Array} enumValue\n * @returns {Boolean} the class name of the object\n * @private\n * @description Check if the value is a valid enum value\n */\nfunction isValidEnumValue(value, enumValue) {\n  return enumValue.indexOf(value) !== -1\n}\n\n/**\n * @param {type} value\n * @param {type} type\n * @returns {Boolean} true is value has type 'type'\n * @description Check if a value has the specified type\n */\nfunction hasType(value, type) {\n  let result = true\n  let date = null\n\n  switch (type) {\n    case 'array':\n      result = Array.isArray(value)\n      break\n    case 'date':\n      if (typeof value === 'string') {\n        date = new Date(value)\n        result = !isNaN(date.getDate())\n      } else {\n        result = value instanceof Date\n      }\n      break\n    case 'any':\n      result = true\n      break\n    default:\n      result = type === typeof value\n      break\n  }\n\n  return result\n}\n\n/**\n * @method checkType\n * @param {String} name\n * @param {String} id component id\n * @param {String} type type to check\n * @returns {Boolean} true if the attribute has for type type\n * @description Check if an attribute of the schema has a specific type\n */\nfunction checkType(name, id, type) {\n  let result = false\n  let componentSchema = store.generatedModels[id]\n  let attributeType = ''\n\n  if (componentSchema && componentSchema[$mson.NAME]) {\n    componentSchema = store.generatedSchemas[componentSchema[$mson.NAME]]\n  }\n\n  if (componentSchema) {\n    attributeType = componentSchema[name.split('.')[0]]\n    if (attributeType === type) {\n      result = true\n    }\n  }\n\n  return result\n}\n\n/**\n * @method merge\n * @param {Object} source source schema\n * @param {Object} target target schema\n * @returns {Object} merged schema\n * @description Merge two schemas\n */\nfunction merge(source, target) {\n  let propName = ''\n  let result = target\n\n  for (propName in source) {\n    if (source.hasOwnProperty(propName) && propName.indexOf('_') !== 0) {\n      result[propName] = source[propName]\n    }\n  }\n  return result\n}\n\n/**\n * @method initConfiguration\n * @param {String} name name of the object to configure\n * @param {String} type type of the object to configure\n * @param {Boolean} isMethod is a method\n * @returns {Object} a configuration\n * @description Init a configuration depending of the context\n */\nfunction initConfiguration(name, type, isMethod) {\n  let result = null\n  let typeDef = []\n  let schemaDef = []\n  let defaultValue = ''\n\n  switch (true) {\n    case name === '=>':\n      break\n    case typeof type === 'string' && type === 'boolean':\n      if (isMethod) {\n        result = {\n          name: name,\n          type: 'boolean',\n          mandatory: false,\n          default: false,\n        }\n      } else {\n        result = {\n          type: 'boolean',\n          readOnly: false,\n          mandatory: false,\n          default: false,\n        }\n      }\n      break\n    case typeof type === 'string' && type === 'string':\n      if (isMethod) {\n        result = {\n          name: name,\n          type: 'string',\n          mandatory: false,\n          default: '',\n        }\n      } else {\n        result = {\n          type: 'string',\n          readOnly: false,\n          mandatory: false,\n          default: '',\n        }\n      }\n      break\n    case typeof type === 'string' && type === 'number':\n      if (isMethod) {\n        result = {\n          name: name,\n          type: 'number',\n          mandatory: false,\n          default: 0,\n        }\n      } else {\n        result = {\n          type: 'number',\n          readOnly: false,\n          mandatory: false,\n          default: 0,\n        }\n      }\n      break\n    case typeof type === 'string' && type === 'object':\n      if (isMethod) {\n        result = {\n          name: name,\n          type: 'object',\n          mandatory: false,\n          default: {},\n        }\n      } else {\n        result = {\n          type: 'object',\n          readOnly: false,\n          mandatory: false,\n          default: {},\n        }\n      }\n      break\n    case typeof type === 'string' && type === 'array':\n      if (isMethod) {\n        result = {\n          name: name,\n          type: 'array',\n          mandatory: false,\n          default: [],\n        }\n      } else {\n        result = {\n          type: 'array',\n          readOnly: false,\n          mandatory: false,\n          default: [],\n        }\n      }\n      break\n    case typeof type === 'string' && type === 'date':\n      if (isMethod) {\n        result = {\n          name: name,\n          type: 'date',\n          mandatory: false,\n          default: '1970-01-01T00:00:00.000Z',\n        }\n      } else {\n        result = {\n          type: 'date',\n          readOnly: false,\n          mandatory: false,\n          default: '1970-01-01T00:00:00.000Z',\n        }\n      }\n      break\n    case typeof type === 'string' && type === 'any':\n      if (isMethod) {\n        result = {\n          name: name,\n          type: 'any',\n          mandatory: false,\n          default: null,\n        }\n      } else {\n        result = {\n          type: 'any',\n          readOnly: false,\n          mandatory: false,\n          default: '',\n        }\n      }\n      break\n    // link / custom type\n    case typeof type === 'string':\n      defaultValue = {}\n\n      // case of enumeration\n      typeDef = $db.collections._Type.find({\n        name: type,\n      })\n      if (typeDef.length) {\n        if (typeDef[0].value) {\n          defaultValue = typeDef[0].value[0]\n        }\n      }\n\n      // case of link\n      schemaDef = $db.collections._Schema.find({\n        _name: type,\n      })\n      if (schemaDef.length) {\n        defaultValue = ''\n      }\n\n      if (isMethod) {\n        result = {\n          name: name,\n          type: type,\n          mandatory: false,\n          default: defaultValue,\n        }\n      } else {\n        result = {\n          type: type,\n          readOnly: false,\n          mandatory: false,\n          default: defaultValue,\n        }\n      }\n      break\n    case Array.isArray(type) && type[0] === 'boolean':\n      if (isMethod) {\n        result = {\n          name: name,\n          type: ['boolean'],\n          mandatory: false,\n          default: [],\n        }\n      } else {\n        result = {\n          type: ['boolean'],\n          readOnly: false,\n          mandatory: false,\n          default: [],\n        }\n      }\n      break\n    case Array.isArray(type) && type[0] === 'string':\n      if (isMethod) {\n        result = {\n          name: name,\n          type: ['string'],\n          mandatory: false,\n          default: '',\n        }\n      } else {\n        result = {\n          type: ['string'],\n          readOnly: false,\n          mandatory: false,\n          default: '',\n        }\n      }\n      break\n    case Array.isArray(type) && type[0] === 'number':\n      if (isMethod) {\n        result = {\n          name: name,\n          type: ['number'],\n          mandatory: false,\n          default: [],\n        }\n      } else {\n        result = {\n          type: ['number'],\n          readOnly: false,\n          mandatory: false,\n          default: [],\n        }\n      }\n      break\n    case Array.isArray(type) && type[0] === 'object':\n      if (isMethod) {\n        result = {\n          name: name,\n          type: ['object'],\n          mandatory: false,\n          default: [],\n        }\n      } else {\n        result = {\n          type: ['object'],\n          readOnly: false,\n          mandatory: false,\n          default: [],\n        }\n      }\n      break\n    case Array.isArray(type) && type[0] === 'date':\n      if (isMethod) {\n        result = {\n          name: name,\n          type: ['date'],\n          mandatory: false,\n          default: [],\n        }\n      } else {\n        result = {\n          type: ['date'],\n          readOnly: false,\n          mandatory: false,\n          default: [],\n        }\n      }\n      break\n    case Array.isArray(type) && type[0] === 'any':\n      if (isMethod) {\n        result = {\n          name: name,\n          type: ['any'],\n          mandatory: false,\n          default: [],\n        }\n      } else {\n        result = {\n          type: ['any'],\n          readOnly: false,\n          mandatory: false,\n          default: [],\n        }\n      }\n      break\n    case Array.isArray(type):\n      if (isMethod) {\n        result = {\n          name: name,\n          type: type,\n          mandatory: false,\n          default: [],\n        }\n      } else {\n        result = {\n          type: type,\n          readOnly: false,\n          mandatory: false,\n          default: [],\n        }\n      }\n      break\n    default:\n      break\n  }\n\n  return result\n}\n\n/**\n * @method generateConfiguration\n * @param {JSON} model definition of the model\n * @returns {Object} generated model\n * @description Create a full model definition from a model\n */\nfunction generateConfiguration(model) {\n  let propName = ''\n  let paramPropName = ''\n  let methodConf = {}\n\n  model = JSON.parse(JSON.stringify(model))\n\n  for (propName in model) {\n    if (model.hasOwnProperty(propName) && propName.indexOf('_') !== 0) {\n      switch (true) {\n        // property type\n        case typeof model[propName] === 'string' ||\n          Array.isArray(model[propName]):\n          model[propName] = initConfiguration(propName, model[propName], false)\n          break\n\n        // property configuration\n        case typeof model[propName] === 'object' &&\n          typeof model[propName]['=>'] === 'undefined':\n          model[propName] = merge(\n            model[propName],\n            initConfiguration(propName, model[propName].type || 'any')\n          )\n          break\n\n        // method / event\n        case typeof model[propName] === 'object' &&\n          typeof model[propName]['=>'] !== 'undefined':\n          methodConf = {\n            params: [],\n            result: 'any',\n          }\n\n          for (paramPropName in model[propName]) {\n            // parameter type\n            if (typeof model[propName][paramPropName] === 'string') {\n              if (paramPropName === '=>') {\n                methodConf.result = model[propName][paramPropName]\n              } else {\n                methodConf.params.push(\n                  initConfiguration(\n                    paramPropName,\n                    model[propName][paramPropName],\n                    true\n                  )\n                )\n              }\n            }\n            // parameter configuration\n            if (typeof model[propName][paramPropName] === 'object') {\n              methodConf.params.push(\n                merge(model[propName][paramPropName]),\n                initConfiguration(\n                  paramPropName,\n                  model[propName][paramPropName].type || 'any'\n                )\n              )\n            }\n          }\n          model[propName] = methodConf\n          break\n        default:\n          break\n      }\n    }\n  }\n  return model\n}\n\n/* Public methods */\n\n/**\n * @method schema\n * @param {String} name name of the schema\n * @param {JSON} schema definition of the schema\n * @returns {String} id of the schema\n * @description Add a new schema to the metamodel\n */\nfunction schema(name, schema) {\n  let id = null\n  let result = []\n  let schemaName = ''\n  let mergedSchema = {}\n  let schemas = []\n\n  if (typeof schema === 'undefined' || Object.keys(schema).length === 0) {\n    if (typeof name === 'string') {\n      schema = {}\n      schema[$mson.NAME] = name\n      schemaName = name\n    } else {\n      schema = JSON.parse(JSON.stringify(name))\n      schemaName = schema[$mson.NAME]\n    }\n  } else {\n    schema = JSON.parse(JSON.stringify(schema))\n    schema[$mson.NAME] = name\n    schemaName = schema[$mson.NAME]\n  }\n\n  if (typeof schema[$mson.ID] === 'undefined') {\n    schema[$mson.ID] = $helper.generateId()\n  }\n  if (typeof schema[$mson.INHERIT] === 'undefined') {\n    schema[$mson.INHERIT] = ['_Component']\n  }\n\n  /**\n   * @method _removeDuplicate\n   * @param {Array} inherits list of parents\n   * @private\n   * @description remove duplicate parents in the list of parents\n   */\n  function _removeDuplicate(inherits) {\n    let filteredList = []\n    let list = {}\n\n    inherits.forEach(function (name) {\n      let cleanName = name.trim()\n      if (typeof list[cleanName] === 'undefined') {\n        list[cleanName] = cleanName\n        filteredList.push(cleanName)\n      }\n    })\n\n    return filteredList\n  }\n\n  schema[$mson.INHERIT] = _removeDuplicate(schema[$mson.INHERIT])\n\n  // check if schema is compliant with the meta meta model\n  if (isValidObject(schema, $mson.SCHEMA_DEFINITION, false)) {\n    schemas = $db.collections._Schema.find({\n      _name: schemaName,\n    })\n    if (schemas.length) {\n      mergedSchema = merge(schema, schemas[0])\n      $db.collections._Schema.update(\n        {\n          _name: schemaName,\n        },\n        mergedSchema\n      )\n      id = schemas[0][$mson.ID]\n    } else {\n      result = $db.collections._Schema.insert(schema)\n      id = result[0]\n    }\n  } else {\n    $log.invalidSchema(schema[$mson.NAME])\n  }\n\n  return id\n}\n\n/**\n * @method model\n * @param {String} name name of the model\n * @param {JSON} model definition of the model\n * @returns {String} id of the model\n * @description Add a new model to the metamodel\n */\nfunction model(name, model) {\n  let id = null\n  let result = []\n  let modelName = ''\n  let mergedModel = {}\n  let models = []\n\n  if (typeof model === 'undefined' || Object.keys(model).length === 0) {\n    model = JSON.parse(JSON.stringify(name))\n    modelName = model[$mson.NAME]\n  } else {\n    model = JSON.parse(JSON.stringify(model))\n    model[$mson.NAME] = name\n    model = generateConfiguration(model)\n    modelName = model[$mson.NAME]\n  }\n\n  if (typeof model[$mson.ID] === 'undefined') {\n    model[$mson.ID] = $helper.generateId()\n  }\n\n  // check if model is compliant with the meta meta model\n  if (isValidObject(model, $mson.MODEL_DEFINITION, false)) {\n    models = $db.collections._Model.find({\n      _name: modelName,\n    })\n    if (models.length) {\n      mergedModel = merge(model, models[0])\n      $db.collections._Model.update(\n        {\n          _name: modelName,\n        },\n        mergedModel\n      )\n      id = models[0][$mson.ID]\n    } else {\n      result = $db.collections._Model.insert(model)\n      id = result[0]\n    }\n  } else {\n    $log.invalidModel(model[$mson.NAME])\n  }\n\n  return id\n}\n\n/**\n * @method type\n * @param {String} name name of the type\n * @param {JSON} type type to add\n * @returns {String} id of the type\n * @description Add a new type\n */\nfunction type(name, type) {\n  let id = null\n  let result = []\n  let typeName = ''\n  let typeDef = {}\n\n  if (typeof type === 'undefined' || Object.keys(type).length === 0) {\n    typeDef = JSON.parse(JSON.stringify(name))\n    typeName = typeDef.name\n  } else {\n    if (Array.isArray(type)) {\n      type = JSON.parse(JSON.stringify(type))\n      typeDef.value = type\n      typeDef.name = name\n      typeDef.type = typeof type[0] || 'any'\n      typeName = typeDef.name\n    } else {\n      type = JSON.parse(JSON.stringify(type))\n      typeDef.schema = generateConfiguration(type)\n      typeDef.name = name\n      typeDef.type = 'object'\n      typeName = typeDef.name\n    }\n  }\n\n  if (typeof typeDef[$mson.ID] === 'undefined') {\n    typeDef[$mson.ID] = $helper.generateId()\n  }\n\n  // check if type is compliant with the meta meta model\n  if (isValidObject(typeDef, $mson.TYPE_DEFINITION)) {\n    result = $db.collections._Type.insert(typeDef)\n    id = result[0]\n  } else {\n    $log.invalidTypeDefinition(typeName)\n  }\n\n  return id\n}\n\n/**\n * @method init\n * @description Init the metamodel\n */\nfunction init() {\n  clear()\n  initDbStructure()\n}\n\n/**\n * @method clear\n * @description Remove the data of the metamodel from the memory\n */\nfunction clear() {\n  store = {\n    inheritance: {},\n    inheritanceTree: {},\n    schemas: {},\n    generatedSchemas: {},\n    models: {},\n    generatedModels: {},\n    states: {},\n    type: {},\n  }\n}\n\n/**\n * @method create\n * @description Create the metamodel\n */\nfunction create() {\n  loadInMemory()\n  createInheritanceTree()\n  generateSchemas()\n  generateModels()\n  checkModels()\n  getStates()\n  createDbStructure()\n  createClass()\n}\n\n/**\n * @method isEvent\n * @param {String} name\n * @param {String} id component id\n * @returns {Boolean} true if the attribute is an event\n * @description Check if an attribute of the schema is an event\n */\nfunction isEvent(name, id) {\n  return checkType(name, id, $mson.EVENT_TYPE)\n}\n\n/**\n * @method isProperty\n * @param {String} name name of the property\n * @param {String} id component id\n * @returns {Boolean} true if the attribute is a property\n * @description Check if an attribute of the schema is a property\n */\nfunction isProperty(name, id) {\n  return checkType(name, id, $mson.PROPERTY_TYPE)\n}\n\n/**\n * @method isLink\n * @param {String} name name of the property\n * @param {String} id component id\n * @returns {Boolean} true if the attribute is a link\n * @description Check if an attribute of the schema is a link\n */\nfunction isLink(name, id) {\n  return checkType(name, id, $mson.LINK_TYPE)\n}\n\n/**\n * @method isCollection\n * @param {String} name name of the collection\n * @param {String} id component id\n * @returns {Boolean} true if the attribute is a collection\n * @description Check if an attribute of the schema is a collection\n */\nfunction isCollection(name, id) {\n  return checkType(name, id, $mson.COLLECTION_TYPE)\n}\n\n/**\n * @method isMethod\n * @param {String} name name of the method\n * @param {String} id component id\n * @returns {Boolean} true if the attribute is a method\n * @description Check if an attribute of the schema is a method\n */\nfunction isMethod(name, id) {\n  return checkType(name, id, $mson.METHOD_TYPE)\n}\n\n/**\n * @method isStructure\n * @param {String} path path of the property\n * @param {String} modelName model name\n * @returns {Boolean} true if the property is a structure\n * @description Check if an attribute of the schema is a structure\n */\nfunction isStructure(path, modelName) {\n  let result = false\n  let structure = null\n  let type = ''\n\n  type = getModelPathType(modelName, path)\n\n  if (Array.isArray(structure)) {\n    structure = getType(type[0])\n  } else {\n    structure = getType(type)\n  }\n\n  if (structure && structure.schema) {\n    result = true\n  }\n\n  return result\n}\n\n/**\n * @method isValidState\n * @param {String} name name of the state\n * @param {String} id component id\n * @returns {Boolean} true if the name is a correct state for the component\n * @description Check if the name is a correct state for the component\n */\nfunction isValidState(name, id) {\n  let result = false\n  let componentSchema = store.generatedModels[id]\n  let state = {}\n\n  if (isModelPath(name)) {\n    result = isValidModelPath(id, name)\n  } else {\n    if (componentSchema && componentSchema[$mson.NAME]) {\n      componentSchema = store.generatedModels[componentSchema[$mson.NAME]]\n    }\n    state = store.states[componentSchema[$mson.NAME]]\n\n    if (Array.isArray(state)) {\n      result = state.indexOf(name) !== -1\n    }\n  }\n\n  return result\n}\n\n/**\n * @method isValidType\n * @param {Object} value value to validate\n * @param {String} type type to use for validation\n * @param {Boolean} isDocument is the value from a document\n * @returns {Boolean} true if the object is compliant with the type\n * @description Check if a value is compliant with a type\n */\nfunction isValidType(value, typeName, isDocument) {\n  let result = true\n\n  /**\n   * @method _isValidCustomType\n   * @param {String} value\n   * @param {String} typeName\n   * @private\n   * @description Check if a value has the correct type\n   */\n  function _isValidCustomType(value, typeName) {\n    let typeDef = store.type[typeName]\n    let result = true\n\n    if (Array.isArray(typeDef.value) && typeDef.value.indexOf(value) === -1) {\n      result = false\n    }\n\n    if (result === false) {\n      $log.invalidEnumValue(value, typeName)\n    }\n    return result\n  }\n\n  /**\n   * @method _isValidType\n   * @param {String} value\n   * @param {String} typeName\n   * @param {Boolean} isDocument is the value to validate from a document\n   * @returns {Boolean} the object is compliant with the type\n   * @private\n   * @description Check if an object is compliant with a type\n   */\n  function _isValidType(value, typeName, isDocument) {\n    let isValid = true\n    let realType = ''\n    let i = 0\n    let length = 0\n\n    realType = getRealType(typeName)\n    switch (realType) {\n      case 'string':\n        isValid = hasType(value, typeName)\n        break\n      case 'array':\n        if (Array.isArray(value)) {\n          length = value.length\n          for (i = 0; i < length; i++) {\n            switch (true) {\n              case isCustomType(typeName[0]):\n                isValid = checkCustomSchema(value[i], typeName[0])\n                break\n              case isClassName(typeName[0]):\n                if (!isDocument) {\n                  if (\n                    value[i] !== '' &&\n                    value[i] !== null &&\n                    typeof value[i] !== 'string'\n                  ) {\n                    isValid = inheritFrom(getClassName(value[i]), typeName[0])\n                  }\n                } else {\n                  isValid = false\n                }\n                break\n              default:\n                isValid = hasType(value[i], typeName[0])\n                break\n            }\n          }\n        } else {\n          isValid = false\n        }\n        break\n      default:\n        break\n    }\n    return isValid\n  }\n\n  switch (true) {\n    case isCustomType(typeName):\n      result = checkCustomSchema(value, typeName)\n\n      if (!result) {\n        if (store.type[typeName]) {\n          $log.invalidEnumType(value, typeName, store.type[typeName].type)\n        } else {\n          $log.invalidEnumType(value, typeName)\n        }\n      }\n\n      if (result) {\n        result = _isValidCustomType(value, typeName)\n      }\n      break\n    case isClassName(typeName):\n      if (!isDocument) {\n        if (value !== null && typeof value !== 'string') {\n          result = inheritFrom(getClassName(value), typeName)\n        } else {\n          if (value !== null) {\n            result = false\n          }\n        }\n      }\n      break\n    default:\n      result = _isValidType(value, typeName, isDocument)\n      break\n  }\n\n  return result\n}\n\n/**\n * @method isValidEnum\n * @param {String|Object} value value to validate\n * @param {Schema} schema schema to use for validation\n * @returns {Boolean} true if the object is compliant with the enum\n * @description Check if a value is compliant with a type enum.\n */\nfunction isValidEnum(value, schema) {\n  let result = true\n\n  /**\n   * @method _isInstanceOf\n   * @param {String} component\n   * @param {String} className\n   * @private Check if the component has for class name className\n   */\n  function _isInstanceOf(component, className) {\n    let result = false\n    let componentClassName = ''\n\n    componentClassName = component.constructor.name\n\n    if (componentClassName === 'Function') {\n      componentClassName = component.name\n    }\n    result = componentClassName === className\n\n    return result\n  }\n\n  if (isClassName(schema.type)) {\n    result =\n      _isInstanceOf($component.get(value), getRealClassName(schema.type)) &&\n      schema.value.indexOf(value) !== -1\n    if (!result) {\n      $log.invalidEnumValue(value, schema.type)\n    }\n  } else {\n    result = hasType(value, schema.type) && schema.value.indexOf(value) !== -1\n    if (!result) {\n      $log.invalidEnumValue(value, schema.name)\n    }\n  }\n\n  return result\n}\n\n/**\n * @method isValidSchema\n * @param {JSON} object\n * @param {JSON} schema\n * @returns {Boolean}\n * @description Check if the object is compliant with the schema.\n * Use it to test if a schema is compliant with a schema\n * it is supposed to validate.\n */\nfunction isValidSchema(object, schema) {\n  let fieldName = ''\n  let field = null\n  let result = true\n  let mandatory = true\n  let typeSchema = ''\n  let typeRef = ''\n  let realType = ''\n  let length = 0\n  let i = 0\n\n  /**\n   * @method _isValidClassName\n   * @returns {Boolean} the field is compliant with the type of the class\n   * @private\n   * @description Check if a field is compliant with the type of the class name\n   */\n  function _isValidClassName() {\n    let isValid = true\n    let enumValue = []\n\n    typeRef = getClassName(typeSchema)\n    typeRef = object[typeRef]\n    if (isCustomType(typeRef)) {\n      if (store.type[typeRef]) {\n        if (store.type[typeRef].schema) {\n          isValid = isValidSchema(field, store.type[typeRef].schema)\n        } else {\n          // check type\n          isValid = hasType(field, store.type[typeRef].type)\n\n          // check value\n          enumValue = store.type[typeRef].value\n          if (enumValue) {\n            isValid = isValidEnumValue(field, enumValue)\n          }\n        }\n      } else {\n        isValid = false\n      }\n    } else {\n      if (typeRef === 'array') {\n        isValid = Array.isArray(field)\n      } else {\n        if (isClassName(typeRef)) {\n          isValid = hasType(field, 'object') || hasType(field, 'string')\n          // TODO maybe have a more strict validation than just a type checking\n        } else {\n          isValid = hasType(field, typeRef)\n        }\n      }\n    }\n    if (!isValid) {\n      $log.invalidPropertyType(fieldName, typeRef, field)\n    }\n    return isValid\n  }\n\n  /**\n   * @method _isValidTypeReference\n   * @returns {Boolean} the field is compliant with the type of the references type\n   * @private\n   * @description Check if a field is compliant with the type of the references type\n   */\n  function _isValidTypeReference() {\n    let isValid = true\n    let enumValue = []\n\n    typeRef = getRealTypeName(typeSchema)\n    typeRef = object[typeRef]\n\n    switch (true) {\n      case typeof typeRef === 'string':\n        if (isCustomType(typeRef)) {\n          if (store.type[typeRef]) {\n            if (store.type[typeRef].schema) {\n              isValid = isValidSchema(field, store.type[typeRef].schema)\n            } else {\n              // check type\n              isValid = hasType(field, store.type[typeRef].type)\n\n              // check value\n              enumValue = store.type[typeRef].value\n              if (enumValue) {\n                isValid = isValidEnumValue(field, enumValue)\n              }\n            }\n          } else {\n            isValid = false\n          }\n        } else {\n          if (typeRef === 'array') {\n            isValid = Array.isArray(field)\n          } else {\n            if (isClassName(typeRef)) {\n              isValid = hasType(field, 'object') || hasType(field, 'string')\n              // TODO maybe have a more strict validation than just a type checking\n            } else {\n              isValid = hasType(field, typeRef)\n            }\n          }\n        }\n        break\n\n      case Array.isArray(typeRef):\n        if (!Array.isArray(field)) {\n          isValid = false\n        }\n        break\n\n      default:\n        isValid = false\n        break\n    }\n\n    if (!isValid) {\n      $log.invalidPropertyType(fieldName, typeRef, field)\n    }\n    return isValid\n  }\n\n  /**\n   * @method _isValidType\n   * @returns {Boolean} the field is compliant with the type\n   * @private\n   * @description Check if a field is compliant with a type\n   */\n  function _isValidType() {\n    let isValid = true\n\n    realType = getRealType(typeSchema)\n    switch (realType) {\n      case 'string':\n        if (isCustomType(realType)) {\n          isValid = isValidSchema(field, typeSchema)\n        } else {\n          if (!hasType(field, typeSchema)) {\n            $log.invalidPropertyType(fieldName, typeSchema, field)\n            isValid = false\n            break\n          }\n        }\n        break\n      case 'array':\n        if (Array.isArray(field)) {\n          length = field.length\n          for (i = 0; i < length; i++) {\n            if (isCustomType(typeSchema[0])) {\n              isValid = isValidSchema(\n                field[i],\n                store.type[typeSchema[0]].schema\n              )\n            } else {\n              if (!hasType(field[i], typeSchema[0])) {\n                $log.invalidPropertyType(fieldName, typeSchema[0], field[i])\n                isValid = false\n                break\n              }\n            }\n          }\n        } else {\n          isValid = false\n        }\n        break\n      default:\n        break\n    }\n    return isValid\n  }\n\n  // type\n  if (hasType(object, 'object')) {\n    for (fieldName in object) {\n      field = object[fieldName]\n\n      if (hasType(schema[fieldName], 'undefined')) {\n        $log.unknownProperty(fieldName, schema)\n        return false\n      } else {\n        typeSchema = schema[fieldName].type\n      }\n\n      switch (true) {\n        case isClassName(typeSchema):\n          result = result && _isValidClassName()\n          break\n        case isTypeReference(typeSchema):\n          result = result && _isValidTypeReference()\n          break\n        default:\n          result = result && _isValidType()\n          break\n      }\n      if (!result) {\n        break\n      }\n    }\n\n    // mandatory\n    for (fieldName in schema) {\n      field = schema[fieldName]\n      mandatory = field.mandatory\n      if (\n        mandatory === true &&\n        hasType(object[fieldName], 'undefined') &&\n        object[fieldName] !== undefined\n      ) {\n        $log.missingProperty(fieldName)\n        result = false\n        break\n      }\n    }\n  } else {\n    result = false\n    $log.invalidPropertyFormat(object)\n  }\n\n  return result\n}\n\n/**\n * @method isValidObject\n * @param {Object} object object to validate\n * @param {Object} schema schema that validates the object\n * @param {Boolean} strict true if validation is strict\n * @param {Boolean} cleanRef true if we remove the reference to the object\n * @returns {Boolean} true is the object is compliant with the schema\n * @description Check if the object is compliant with the schema.\n * Use it to test if the constructor of an object is compliant\n * with the definition of the class.\n */\nfunction isValidObject(object, schema, strict, cleanRef) {\n  let fieldName = ''\n  let field = null\n  let result = true\n  let mandatory = true\n  let typeSchema = ''\n  let typeRef = ''\n  let realType = ''\n  let length = 0\n  let i = 0\n\n  if (hasType(strict, 'undefined')) {\n    strict = true\n  }\n\n  if (hasType(cleanRef, 'undefined')) {\n    cleanRef = false\n  }\n\n  /**\n   * @method _isValidCustomType\n   * @param {String} field a field\n   * @param {String} typeSchema a schema\n   * @returns {Boolean} the field is compliant with the custom type\n   * @private\n   * @description Check if a field is compliant with a custom type\n   */\n  function _isValidCustomType(field, typeSchema) {\n    let isValid = true\n    let realType = ''\n\n    realType = store.type[typeSchema]\n    if (realType) {\n      switch (true) {\n        case !hasType(realType.schema, 'undefined'):\n          isValid = isValidObject(field, realType.schema, strict, cleanRef)\n          break\n        case !hasType(realType.value, 'undefined'):\n          isValid = isValidEnum(field, realType)\n          break\n        default:\n          isValid = isValidType(field, realType.type)\n          break\n      }\n    } else {\n      isValid = false\n    }\n    return isValid\n  }\n\n  /**\n   * @method _isValidClassName\n   * @param {String} field a field\n   * @param {String} typeSchema a schema\n   * @returns {Boolean} the field is compliant with the type of the class name\n   * @private\n   * @description Check if a field is compliant with the type of the class name\n   */\n  function _isValidClassName(field, typeSchema) {\n    let isValid = true\n    let comp = null\n    let isComponent = false\n\n    typeRef = getRealClassName(typeSchema)\n    if (field && field.id) {\n      comp = field\n      isComponent = true\n    } else {\n      comp = $component.get(field)\n    }\n\n    if (!hasType(comp, 'undefined')) {\n      if (!inheritFrom(comp.constructor.name, typeRef)) {\n        isValid = false\n        $log.invalidType(fieldName, field, typeRef)\n      } else {\n        if (isComponent && cleanRef) {\n          object[fieldName] = comp.id() // store the id instead the full object\n        }\n      }\n    } else {\n      // check for default value of an object ({} or null)\n      switch (true) {\n        case hasType(field, 'object') &&\n          field !== null &&\n          Object.keys(field).length > 0:\n        case hasType(field, 'string') && field !== '':\n          // uncomment line if we need this log\n          // $log.canNotYetValidate(field, typeRef);\n          break\n        default:\n          break\n      }\n    }\n    return isValid\n  }\n\n  /**\n   * @method _isValidType\n   * @param {String} field a field\n   * @param {String} typeSchema a schema\n   * @returns {Boolean} the field is compliant with the type\n   * @private\n   * @description Check if a field is compliant with a type\n   */\n  function _isValidType(field, typeSchema) {\n    let isValid = true\n    let date = null\n    let typeArray = ''\n\n    realType = getRealType(typeSchema)\n    switch (realType) {\n      case 'any':\n        break\n      case 'string':\n        if (isCustomType(realType)) {\n          isValid = isValidObject(field, typeSchema, strict, cleanRef)\n        } else {\n          if (typeSchema === 'array') {\n            if (getRealType(field) !== 'array') {\n              $log.invalidPropertyType(fieldName, typeSchema, field)\n              isValid = false\n              break\n            }\n          } else {\n            if (typeSchema === 'date') {\n              date = new Date(field)\n              isValid = !isNaN(date.getDate())\n              if (!isValid) {\n                $log.invalidPropertyType(fieldName, typeSchema, field)\n                break\n              }\n            } else {\n              if (\n                getRealType(field) !== typeSchema &&\n                getRealType(field) !== 'any'\n              ) {\n                $log.invalidPropertyType(fieldName, typeSchema, field)\n                isValid = false\n                break\n              }\n            }\n          }\n        }\n        break\n      case 'array':\n        if (Array.isArray(field)) {\n          length = field.length\n          typeArray = typeSchema[0]\n          for (i = 0; i < length; i++) {\n            if (isCustomType(typeArray)) {\n              isValid = _isValidCustomType(field[i], typeArray)\n            } else {\n              if (!isClassName(typeArray)) {\n                if (\n                  getRealType(field[i]) !== typeArray &&\n                  typeArray !== 'any'\n                ) {\n                  $log.invalidPropertyType(fieldName, typeArray, field[i])\n                  isValid = false\n                  break\n                }\n              } else {\n                if (getRealType(field[i]) === 'string') {\n                  // Case of an import of a system\n                  if ($component.get(field[i])) {\n                    if (\n                      !inheritFrom(\n                        getClassName($component.get(field[i])),\n                        getRealClassName(typeArray)\n                      )\n                    ) {\n                      $log.invalidClassName(\n                        JSON.stringify(field[i]),\n                        getRealClassName(typeArray),\n                        getClassName($component.get(field[i]))\n                      )\n                      isValid = false\n                      break\n                    }\n                  } else {\n                    if (field[i] !== '') {\n                      // uncomment line if we need this log\n                      // $log.canNotYetValidate(\n                      //  field[i],\n                      //  getRealClassName(typeArray)\n                      // );\n                    }\n                  }\n                } else {\n                  if (\n                    !inheritFrom(\n                      getClassName(field[i]),\n                      getRealClassName(typeArray)\n                    )\n                  ) {\n                    $log.invalidClassName(\n                      JSON.stringify(field[i]),\n                      getRealClassName(typeArray),\n                      getClassName(field[i])\n                    )\n                    isValid = false\n                    break\n                  } else {\n                    if (cleanRef) {\n                      field[i] = field[i].id() // store the id instead the full object\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          isValid = false\n          $log.invalidType(fieldName, field, 'array')\n        }\n        break\n      default:\n        isValid = false\n        $log.unknownType(field)\n        break\n    }\n    return isValid\n  }\n\n  // check if object\n  if (!hasType(object, 'object')) {\n    result = false\n    $log.invalidConfiguration(object, 'object')\n  }\n\n  // type\n  for (fieldName in object) {\n    field = object[fieldName]\n\n    if (\n      !hasType(schema[fieldName], 'undefined') ||\n      fieldName === $mson.CORE ||\n      fieldName === $mson.ID\n    ) {\n      switch (true) {\n        case fieldName === $mson.CORE:\n          typeSchema = 'boolean'\n          break\n        case fieldName === $mson.ID:\n          typeSchema = 'string'\n          break\n        default:\n          typeSchema = schema[fieldName].type\n          break\n      }\n    } else {\n      if (strict) {\n        $log.unknownProperty(fieldName, schema)\n        return false\n      } else {\n        continue\n      }\n    }\n\n    switch (true) {\n      case isCustomType(typeSchema):\n        result = result && _isValidCustomType(field, typeSchema)\n        break\n      case isClassName(typeSchema):\n        result = result && _isValidClassName(field, typeSchema)\n        break\n      default:\n        result = result && _isValidType(field, typeSchema)\n        break\n    }\n  }\n\n  // mandatory\n  for (fieldName in schema) {\n    field = schema[fieldName]\n    mandatory = field.mandatory\n    if (object && hasType(object[fieldName], 'undefined')) {\n      if (mandatory === true) {\n        $log.missingProperty(fieldName)\n        result = false\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Prepare the object in order to be compliant with the schema.\n * @method prepareObject\n * @param {Object} object object to prepate\n * @param {Object} schema schema that validates the object\n */\nfunction prepareObject(object, schema) {\n  let fieldName = ''\n  let field = null\n  let mandatory = true\n  let defaultValue = ''\n\n  schema = JSON.parse(JSON.stringify(schema))\n\n  // mandatory & default value\n  for (fieldName in schema) {\n    field = schema[fieldName]\n    mandatory = field.mandatory\n    defaultValue = field.default\n    if (hasType(object[fieldName], 'undefined')) {\n      if (mandatory === false && !hasType(defaultValue, 'undefined')) {\n        object[fieldName] = defaultValue\n      }\n    }\n  }\n}\n\n/**\n * @method getSchema\n * @param {String} name of the schema\n * @returns {Object} the schema\n * @description Get a schema\n */\nfunction getSchema(name) {\n  let result = null\n\n  if (store.generatedSchemas[name]) {\n    result = store.generatedSchemas[name]\n  }\n  return result\n}\n\n/**\n * @method getModel\n * @param {String} name of the model\n * @returns {Object} the model\n * @description Get a model\n */\nfunction getModel(name) {\n  let result = null\n\n  if (store.generatedModels[name]) {\n    result = store.generatedModels[name]\n  }\n  return result\n}\n\n/**\n * @method getType\n * @param {String} name of the type\n * @returns {Object} the type\n * @description Get a type\n */\nfunction getType(name) {\n  let result = null\n\n  if (store.type[name] && store.type[name]) {\n    result = JSON.parse(JSON.stringify(store.type[name]))\n  }\n  return result\n}\n\n/**\n * @method getModelPathType\n * @param {String} model name of the model\n * @param {String} path path of the structure\n * @returns {Object} the type\n * @description Get the type of a model path\n */\nfunction getModelPathType(model, path) {\n  let result = null\n  let subpaths = []\n  let subpath = ''\n  let i = 0\n  let length = 0\n  let structure = ''\n\n  subpaths = path.split('.')\n  length = subpaths.length\n\n  for (i = 0; i < length; i++) {\n    subpath = subpaths[i]\n    subpath = subpath.split('[')[0]\n    if (i === 0) {\n      result = getModel(model)[subpath].type\n    } else {\n      if (Array.isArray(result)) {\n        result = result[0]\n      }\n\n      if (isCustomType(result)) {\n        structure = getType(result)\n\n        switch (true) {\n          case typeof structure.schema !== 'undefined':\n            if (!structure.schema[subpath]) {\n              $log.unknownPath(path, subpath)\n            } else {\n              result = structure.schema[subpath].type\n            }\n            break\n          case typeof structure.type !== 'undefined':\n            result = structure.type\n            break\n          default:\n            $log.invalidState(model, path)\n            break\n        }\n      }\n    }\n  }\n  return result\n}\n\n/**\n * @method isValidModelPath\n * @param {String} model name of the model\n * @param {String} path path of the model\n * @returns {Boolean} true if the path is valid for the model\n * @description Check if a path is valid model path\n */\nfunction isValidModelPath(model, path) {\n  let result = true\n  let type = null\n  let subpaths = []\n  let subpath = ''\n  let i = 0\n  let length = 0\n  let structure = ''\n\n  subpaths = path.split('.')\n  length = subpaths.length\n\n  for (i = 0; i < length; i++) {\n    subpath = subpaths[i]\n    subpath = subpath.split('[')[0]\n    if (i === 0) {\n      type = getModel(model)[subpath].type\n      if (!type) {\n        result = false\n      }\n    } else {\n      if (Array.isArray(result)) {\n        type = type[0]\n      }\n\n      if (isCustomType(type)) {\n        structure = getType(type)\n        if (structure.schema && structure.schema[subpath]) {\n          type = structure.schema[subpath].type\n          if (!type) {\n            result = false\n          }\n        }\n      }\n    }\n  }\n  return result\n}\n\n/**\n * @method get\n * @param {String} id id of the schema\n * @returns {Array} id id of the parents\n * @description Get parents of a schema if any\n */\nfunction getParents(id) {\n  let result = []\n\n  if (!store.inheritanceTree[id]) {\n    result = []\n  } else {\n    result = store.inheritanceTree[id].slice()\n  }\n\n  return result\n}\n\n/**\n * @method inheritFrom\n * @param {String} name name of the class\n * @param {String} parentName name of the parent\n * @returns {Boolean} true if the component inherit from the specific class name\n * @description Check if a class inherits from another one\n */\nfunction inheritFrom(name, parentName) {\n  let result = false\n  let parents = []\n  let i = 0\n  let length = 0\n\n  /**\n   * @method _searchParent\n   * @param {String} className name of the class\n   * @param {String} ancestorName of the parent\n   * @returns {Boolean} true if the component inherit from the specific class name\n   * @private\n   * @description Check if a class inherits from another one\n   */\n  function _searchParent(className, ancestorName) {\n    let isAncestor = false\n    let parents = []\n    let i = 0\n    let length = 0\n\n    parents = getParents(className)\n    if (parents.length !== 0) {\n      if (parents.indexOf(ancestorName) !== -1) {\n        isAncestor = true\n      } else {\n        for (i = 0; i < length; i++) {\n          isAncestor = _searchParent(parents[i], ancestorName)\n          if (isAncestor) {\n            break\n          }\n        }\n      }\n    }\n    return isAncestor\n  }\n\n  if (name !== parentName) {\n    parents = getParents(name)\n    length = parents.length\n\n    if (parents.length !== 0) {\n      if (parents.indexOf(parentName) !== -1) {\n        result = true\n      } else {\n        for (i = 0; i < length; i++) {\n          result = _searchParent(parents[i], parentName)\n          if (result) {\n            break\n          }\n        }\n      }\n    }\n  } else {\n    result = true\n  }\n\n  return result\n}\n\n/**\n * @method isClassName\n * @param {String} value\n * @returns {Boolean} true if the name is a class name\n * @description Is the value a class name\n */\nfunction isClassName(value) {\n  let result = hasType(value, 'string')\n\n  if (result) {\n    if (Object.keys(store.generatedModels).length > 0) {\n      result = typeof store.generatedModels[value] !== 'undefined'\n    } else {\n      result = false\n    }\n  }\n\n  return result\n}\n\nexport default {\n  schema,\n  model,\n  type,\n  init,\n  clear,\n  create,\n  isEvent,\n  isProperty,\n  isLink,\n  isCollection,\n  isMethod,\n  isStructure,\n  isValidState,\n  isValidType,\n  isValidEnum,\n  isValidSchema,\n  isValidObject,\n  prepareObject,\n  getSchema,\n  getModel,\n  getType,\n  getModelPathType,\n  isValidModelPath,\n  getParents,\n  inheritFrom,\n  isClassName,\n}\n","/*\n * System Runtime\n *\n * https://designfirst.io/systemruntime/\n *\n * Copyright 2022 Erwan Carriou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module behavior\n * @requires db\n * @requires helper\n * @requires mson\n * @description This module manages the behaviors of all components.\n * A behavior is a mecanism that allow users to add actions that will be executed\n * when a specific state of a component will change.\n */\n\nimport $db from './db.js'\nimport $helper from './helper.js'\nimport $mson from './mson.js'\n\n/* Private properties */\n\nlet store = {}\n\n/* Private methods */\n\n/**\n * @method createFunction\n * @param {String} name default name of the function\n * @param {String} func a stringified function\n * @param {Boolean} useCoreAPI if true, System Runtime core modules will be injected as parameters of the function (default false)\n * @returns {Function} the created function\n * @private\n * @description Create a function from a string.\n * The created function:\n * - will be a named function,\n * - has the context of the component and\n * - can have some core modules injected as parameters\n */\nfunction createFunction(name, func, useCoreAPI) {\n  let beginBody = -1\n  let funcParams = ''\n  let params = []\n  let paramsClean = []\n  let funcBody = ''\n  let header = ''\n  let action = null\n  let isArrowFunction = true\n  let isAsync = false\n  let isOneLine = false\n  let functionName = name\n\n  if (functionName.indexOf('.') !== -1) {\n    functionName = name.split('.')[name.split('.').length - 1]\n  }\n\n  if (func.trim().indexOf('async') === 0) {\n    isAsync = true\n    func = func.replace('async', '')\n  }\n\n  if (func.trim().indexOf('function') === 0) {\n    isArrowFunction = false\n  }\n\n  if (isArrowFunction) {\n    beginBody = func.indexOf('=>')\n\n    header = func.substring(0, beginBody)\n    header = header.replace('=>', '')\n\n    if (header.indexOf('(') !== -1) {\n      funcParams = header.split('(')[1].replace(')', '').trim()\n    } else {\n      funcParams = header.trim()\n    }\n\n    params = funcParams.split(',')\n    params.forEach(function (param) {\n      paramsClean.push(param.trim())\n    })\n\n    funcBody = func.substring(beginBody + 2, func.length).trim()\n\n    if (funcBody.indexOf('{') === 0) {\n      funcBody = funcBody.substring(1, funcBody.lastIndexOf('}')).trim()\n    }\n\n    if (funcBody.indexOf('\\n') === -1) {\n      isOneLine = true\n    }\n\n    if (isArrowFunction && isOneLine && funcBody.indexOf('return ') === -1) {\n      funcBody = 'return ' + funcBody\n    }\n  } else {\n    beginBody = func.indexOf('{')\n    header = func.substring(0, beginBody)\n\n    funcParams = header.split('(')[1].replace(')', '').trim()\n\n    params = funcParams.split(',')\n    params.forEach(function (param) {\n      paramsClean.push(param.trim())\n    })\n\n    funcBody = func.substring(beginBody + 1)\n    funcBody = funcBody.substring(0, funcBody.lastIndexOf('}')).trim()\n  }\n\n  // fix for Babel\n  funcBody = funcBody.replace(/_this/g, 'this')\n\n  if (paramsClean[0] === '') {\n    paramsClean = []\n  }\n\n  if (useCoreAPI) {\n    paramsClean.push('$component')\n    paramsClean.push('$db')\n    paramsClean.push('$metamodel')\n    paramsClean.push('$workflow')\n    paramsClean.push('$behavior')\n    paramsClean.push('$state')\n    paramsClean.push('$log')\n    paramsClean.push('$helper')\n    paramsClean.push('$history')\n  }\n\n  if (isAsync) {\n    if (paramsClean[0] !== '') {\n      action = new Function(\n        '__action',\n        'return function ' +\n          functionName +\n          ' (' +\n          paramsClean.join(', ') +\n          \") { const AsyncFunction = async function () {}.constructor; return new AsyncFunction('\" +\n          paramsClean.join(\"', '\") +\n          \"', __action).apply(this, arguments) };\"\n      )(funcBody)\n    } else {\n      action = new Function(\n        '__action',\n        'return function ' +\n          functionName +\n          ' () { const AsyncFunction = async function () {}.constructor; return new AsyncFunction(__action).apply(this, arguments) };'\n      )(funcBody)\n    }\n  } else {\n    if (paramsClean[0] !== '') {\n      action = new Function(\n        '__action',\n        'return function ' +\n          functionName +\n          ' (' +\n          paramsClean.join(', ') +\n          \") { return new Function('\" +\n          paramsClean.join(\"', '\") +\n          \"', __action).apply(this, arguments) };\"\n      )(funcBody)\n    } else {\n      action = new Function(\n        '__action',\n        'return function ' +\n          functionName +\n          ' () { return new Function(__action).apply(this, arguments) };'\n      )(funcBody)\n    }\n  }\n\n  return action\n}\n\n/* Public methods */\n\n/**\n * @method add\n * @param {String} id id of the component\n * @param {Object} state the state on which the action will be executed\n * @param {Object} action the action to execute when the component will have a specific state\n * @param {Boolean} useCoreAPI if true, System Runtime core modules will be injected as parameters of the action (default false)\n * @param {Object} context new context of the behavior\n * @returns {String} id of the behavior created in System Runtime database\n * @description Add a behavior that will be stored in System Runtime database\n */\nfunction add(id, state, action, useCoreAPI, core, context) {\n  let behaviorId = $helper.generateId()\n  let strAction = action.toString()\n\n  if (typeof core === 'undefined') {\n    core = false\n  }\n  if (typeof useCoreAPI === 'undefined') {\n    useCoreAPI = false\n  }\n\n  action = createFunction(state, strAction, useCoreAPI)\n\n  store[behaviorId] = action\n\n  $db.collections._Behavior.insert({\n    _id: behaviorId,\n    component: id,\n    state: state,\n    action: strAction,\n    useCoreAPI: useCoreAPI,\n    core: core,\n    context: context,\n  })\n\n  return behaviorId\n}\n\n/**\n * @method remove\n * @param {Object} params\n * {String} componentId id of the component\n * {String} state state of the component\n * {String} behaviorId id of the behavior (optional)\n * @description Remove a behavior with its id or remove all the behaviors for a specific state\n * of the component\n */\nfunction remove(params) {\n  let result = []\n\n  params = params || {}\n  params.behaviorId = params.behaviorId || ''\n  params.componentId = params.componentId || ''\n  params.state = params.state || ''\n\n  if (params.componentId) {\n    if (params.behaviorId) {\n      $db.collections._Behavior.remove({\n        _id: params.behaviorId,\n        component: params.componentId,\n        state: params.state,\n      })\n      delete store[params.behaviorId]\n    } else {\n      if (params.state) {\n        result = $db.collections._Behavior.remove({\n          component: params.componentId,\n          state: params.state,\n        })\n      } else {\n        result = $db.collections._Behavior.remove({\n          component: params.componentId,\n        })\n      }\n      result.forEach(function (id) {\n        delete store[id]\n      })\n    }\n  }\n}\n\n/**\n * @method removeFromMemory\n * @param {String} id id of the component\n * @description Remove a behavior with its id from the memory\n */\nfunction removeFromMemory(id) {\n  delete store[id]\n}\n\n/**\n * @method getActions\n * @param {String} id id of the component\n * @param {String} state name of the state\n * @returns {Array} all the actions that have to be executed for a specific component and state\n * @description Get all the actions of a behavior for a component\n */\nfunction getActions(id, state) {\n  let result = []\n  let dbResult = []\n  let action = null\n\n  dbResult = $db.collections._Behavior.find({\n    component: id,\n    state: state,\n  })\n\n  dbResult.forEach(function (behavior) {\n    action = store[behavior[$mson.ID]]\n    if (typeof action === 'undefined') {\n      action = createFunction(\n        behavior.state,\n        behavior.action,\n        behavior.useCoreAPI\n      )\n      store[behavior[$mson.ID]] = action\n    }\n    result.push({\n      useCoreAPI: behavior.useCoreAPI,\n      context: behavior.context,\n      action: action,\n    })\n  })\n\n  return result\n}\n\n/**\n * @method clear\n * @description Remove all the behaviors stored in memory\n */\nfunction clear() {\n  store = {}\n}\n\n/**\n * @method get\n * @param {String} id id of the behavior\n * @returns {Behavior} the behavior\n * @description Get a behavior by its id\n */\nfunction get(id) {\n  return store[id]\n}\n\nexport default {\n  add,\n  remove,\n  removeFromMemory,\n  getActions,\n  clear,\n  get,\n}\n","/*\n * System Runtime\n *\n * https://designfirst.io/systemruntime/\n *\n * Copyright 2022 Erwan Carriou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module state\n * @description This module manages the states of all the components\n */\n\n/* Private property */\n\nlet store = {}\n\n/* Public methods */\n\n/**\n * @method set\n * @param {String} id component id on which change the state\n * @param {String} state the new state of the component\n * @param {Object} value value of the state\n * @description Set the state of a component\n */\nfunction set(id, state, value) {\n  store[id] = {\n    state: state,\n    value: value,\n  }\n}\n\n/**\n * @method get\n * @param {String} id id of the component\n * @returns {String} state of the component\n * @description Get the state of a component\n */\nfunction get(id) {\n  return store[id]\n}\n\n/**\n * @method clear\n * @description Remove all the states of the components from the memory\n */\nfunction clear() {\n  store = {}\n}\n\nexport default {\n  set,\n  get,\n  clear,\n}\n","/*\n * System Runtime\n *\n * https://designfirst.io/systemruntime/\n *\n * Copyright 2022 Erwan Carriou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module history\n * @requires db\n * @requires log\n * @description This module manages the history of all components lifecycle\n */\n\nimport $db from './db.js'\nimport $log from './log.js'\n\n/* Private property */\n\nlet stack = []\nlet cursorIndex = -1\nlet historizationEnabled = false\n\n/* Public methods */\n\n/**\n * @method isEnabled\n * @returns {Boolean} true if the history is enabled\n * @description Is historization enabled\n */\nfunction isEnabled() {\n  return historizationEnabled\n}\n\n/**\n * @method start\n * @description start historization\n */\nfunction start() {\n  historizationEnabled = true\n}\n\n/**\n * @method stop\n * @description stop historization\n */\nfunction stop() {\n  historizationEnabled = false\n}\n\n/**\n * @method pushState\n * @param {Object} state new state\n * @description Add a state in the history\n */\nfunction pushState(state) {\n  stack.push(state)\n}\n\n/**\n * @method state\n * @returns {Object} current state\n * @description get Current state\n */\nfunction state() {\n  return state[state.length - 1]\n}\n\n/**\n * @method back\n * @returns {Integer} current cursor index\n * @description move backward into the history of state\n */\nfunction back() {\n  let state = stack[cursorIndex]\n  let update = {}\n  if (state) {\n    switch (state.action) {\n      case 'insert':\n        $db.collections[state.collection].remove({\n          _id: state.id,\n        })\n        $log.historyDocumentRemoved(state.id, state.collection)\n        break\n      case 'remove':\n        $db.collections[state.collection].insert(JSON.parse(state.oldValue))\n        $log.historyDocumentInserted(state.id, state.collection, state.oldValue)\n        break\n      case 'update':\n        update[state.field] = JSON.parse(state.oldValue)\n\n        $db.collections[state.collection].update(\n          {\n            _id: state.id,\n          },\n          update\n        )\n        $log.historyDocumentUpdated(\n          state.id,\n          state.collection,\n          state.field,\n          state.oldValue\n        )\n        break\n      default:\n        break\n    }\n    cursorIndex = cursorIndex - 1\n  }\n\n  return cursorIndex\n}\n\n/**\n * @method forward\n * @returns {Integer} current cursor index\n * @description move forward into the history of state\n */\nfunction forward() {\n  cursorIndex = cursorIndex + 1\n  let state = stack[cursorIndex]\n  let update = {}\n  if (state) {\n    switch (state.action) {\n      case 'insert':\n        $db.collections[state.collection].insert(JSON.parse(state.value))\n        $log.historyDocumentInserted(state.id, state.collection, state.value)\n        break\n      case 'remove':\n        $db.collections[state.collection].remove({\n          _id: state.id,\n        })\n        $log.historyDocumentRemoved(state.id, state.collection)\n        break\n      case 'update':\n        update[state.field] = JSON.parse(state.value)\n\n        $db.collections[state.collection].update(\n          {\n            _id: state.id,\n          },\n          update\n        )\n        $log.historyDocumentUpdated(\n          state.id,\n          state.collection,\n          state.field,\n          state.value\n        )\n        break\n      default:\n        break\n    }\n  }\n\n  return cursorIndex\n}\n\n/**\n * @method get\n * @param {}\n * @description Start back/forward from state\n */\nfunction get(index) {\n  let result = null\n  if (index < 0) {\n    result = stack[stack.length + index]\n  } else {\n    result = stack[index]\n  }\n  return result\n}\n\n/**\n * @method from\n * @param {Number} index index of the stack\n * @description Start back/forward from state\n */\nfunction from(index) {\n  if (index === -1) {\n    cursorIndex = stack.length - 1\n  } else {\n    cursorIndex = index\n  }\n}\n\n/**\n * @method dump\n * @returns {String} a dump of the history\n * @description Dump all the history\n */\nfunction dump() {\n  return JSON.stringify({\n    stack: stack,\n  })\n}\n\n/**\n * @method load\n * @param {Object|String} dump dump of an history to load\n * @returns {Boolean} true if the dump was loaded with no error\n * @description Load a dump of an history\n */\nfunction load(dump) {\n  let noError = true\n\n  try {\n    let newStack = {}\n    let update = {}\n\n    if (typeof dump === 'string') {\n      newStack = JSON.parse(dump).stack\n    } else {\n      newStack = dump.stack\n    }\n\n    newStack.forEach(function (state) {\n      if (state) {\n        switch (state.action) {\n          case 'insert':\n            if ($db.collections[state.collection]) {\n              $db.collections[state.collection].insert(JSON.parse(state.value))\n              $log.historyDocumentInserted(\n                state.id,\n                state.collection,\n                state.value\n              )\n            } else {\n              noError = false\n            }\n            break\n          case 'remove':\n            if ($db.collections[state.collection]) {\n              $db.collections[state.collection].remove({\n                _id: state.id,\n              })\n              $log.historyDocumentRemoved(state.id, state.collection)\n            } else {\n              noError = false\n            }\n            break\n          case 'update':\n            if ($db.collections[state.collection]) {\n              update[state.field] = JSON.parse(state.value)\n\n              $db.collections[state.collection].update(\n                {\n                  _id: state.id,\n                },\n                update\n              )\n\n              $log.historyDocumentUpdated(\n                state.id,\n                state.collection,\n                state.field,\n                state.value\n              )\n            } else {\n              noError = false\n            }\n            break\n          default:\n            break\n        }\n      }\n    })\n  } catch (e) {\n    noError = false\n  }\n\n  return noError\n}\n\n/**\n * @method clear\n * @description Remove all the states from the memory\n */\nfunction clear() {\n  stack = []\n}\n\nexport default {\n  isEnabled,\n  start,\n  stop,\n  pushState,\n  state,\n  back,\n  forward,\n  get,\n  from,\n  dump,\n  load,\n  clear,\n}\n","/*\n * System Runtime\n *\n * https://designfirst.io/systemruntime/\n *\n * Copyright 2022 Erwan Carriou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module workflow\n * @requires metamodel\n * @requires component\n * @requires behavior\n * @requires state\n * @requires helper\n * @requires log\n * @requires db\n * @description This module manages the workflow of System Runtime.\n * It behaves like a workflow engine.\n * It checks if the change of status of a component is valid to be executed. By valid, it means that:\n * - the state is valid for the component,\n * - the input (i.e. parameters) of all actions for the state are compliants with the model and\n * - the output of all actions are compliants with the model.\n *\n * If an error occurs, the workflow will call the error state of the component, the current system and the runtime.\n *\n */\n\nimport $metamodel from './metamodel.js'\nimport $component from './component.js'\nimport $behavior from './behavior.js'\nimport $state from './state.js'\nimport $helper from './helper.js'\nimport $log from './log.js'\nimport $db from './db.js'\nimport $history from './history.js'\n\n/* Private methods */\n\n/**\n * @class RuntimeError\n * @constructor\n * @param {String} message message of the error\n * @description The RuntimeError class\n */\nfunction RuntimeError(message) {\n  this.message = message\n  this.name = 'RuntimeError'\n}\nRuntimeError.prototype = new Error()\nRuntimeError.prototype.constructor = RuntimeError\n\n/**\n * @method isModelPath\n * @param {String} value\n * @returns {Boolean}\n * @private\n * @description Is the value a model path\n */\nfunction isModelPath(value) {\n  return value.indexOf('.') !== -1\n}\n\n/**\n * @method getParamNames\n * @param {String} id id of the class\n * @param {String} methodName name of the method\n * @returns {Array} the names of all parameters of the method for the class\n * @private\n * @description Get all the names of the parameter of a method\n */\nfunction getParamNames(id, methodName) {\n  let method = null\n  let params = []\n  let result = []\n  let length = 0\n  let i = 0\n\n  if ($metamodel.getModel(id)) {\n    method = $metamodel.getModel(id)[methodName]\n  } else {\n    $log.unknownModel(id)\n  }\n\n  if (method) {\n    params = method.params\n    if (params) {\n      length = params.length\n      for (i = 0; i < length; i++) {\n        result.push(params[i].name)\n      }\n    }\n  } else {\n    if (!isModelPath(methodName)) {\n      $log.unknownMethod(id, methodName)\n    }\n  }\n  return result\n}\n\n/**\n * @method getParamNumber\n * @param {String} id id of the class\n * @param {String} methodName name of the method\n * @returns {Array} number of parameters min and max for the method\n * @private\n * @description Get the number of parameters of a method\n */\nfunction getParamNumber(id, methodName) {\n  let method = null\n  let params = []\n  let result = []\n  let length = 0\n  let i = 0\n  let min = 0\n  let max = 0\n\n  if ($metamodel.getModel(id)) {\n    method = $metamodel.getModel(id)[methodName]\n  } else {\n    $log.unknownModel(id)\n  }\n\n  if (method) {\n    params = method.params\n    if (params) {\n      length = params.length\n      for (i = 0; i < length; i++) {\n        if (\n          typeof params[i].mandatory === 'undefined' ||\n          params[i].mandatory === true\n        ) {\n          min = min + 1\n        }\n        max = max + 1\n      }\n    }\n    result.push(min)\n    result.push(max)\n  } else {\n    if (methodName.indexOf('[') === -1 && methodName.indexOf('.') === -1) {\n      $log.unknownMethod(id, methodName)\n    }\n  }\n  return result\n}\n\n/**\n * @method setDefaultValue\n * @param {String} id id of the class\n * @param {String} methodName name of the method\n * @param {Array} args arguments\n * @returns {Array} arguments with default values\n * @private\n * @description Set the default value of the non mandatory parameters of a method\n */\nfunction setDefaultValue(id, methodName, args) {\n  let method = null\n  let params = []\n  let result = []\n  let length = 0\n  let i = 0\n\n  method = $metamodel.getModel(id)[methodName]\n  if (method) {\n    params = method.params\n    if (params) {\n      length = params.length\n      for (i = 0; i < length; i++) {\n        if (params[i].mandatory === false && typeof args[i] === 'undefined') {\n          result.push(params[i].default)\n        } else {\n          result.push(args[i])\n        }\n      }\n    }\n  } else {\n    if (methodName.indexOf('[') === -1) {\n      $log.unknownMethod(id, methodName)\n    } else {\n      result = args\n    }\n  }\n  return result\n}\n\n/**\n * @method getReturnType\n * @param {String} id id of the class\n * @param {String} methodName name of the method\n * @returns {String} the type returned by the method\n * @private\n * @description Get the type returned by a method\n */\nfunction getReturnType(id, methodName) {\n  let resultType = null\n  let result = null\n\n  if ($metamodel.getModel(id)) {\n    resultType = $metamodel.getModel(id)[methodName].result\n  } else {\n    $log.unknownModel(id)\n  }\n\n  if (resultType) {\n    result = resultType\n  }\n  return result\n}\n\n/**\n * @method getParamTypes\n * @param {String} id id of the class\n * @param {String} methodName name of the method\n * @returns {Array} the types of the parameters of a method\n * @private\n * @description Get all the type of the parameters of a method\n */\nfunction getParamTypes(id, methodName) {\n  let method = null\n  let params = []\n  let result = []\n  let length = 0\n  let i = 0\n\n  if ($metamodel.getModel(id)) {\n    method = $metamodel.getModel(id)[methodName]\n  } else {\n    $log.unknownModel(id)\n  }\n\n  if (method) {\n    params = method.params\n    if (params) {\n      length = params.length\n      for (i = 0; i < length; i++) {\n        result.push(params[i].type)\n      }\n    }\n  } else {\n    if (methodName.indexOf('[') === -1 && methodName.indexOf('.') === -1) {\n      $log.unknownMethod(id, methodName)\n    }\n  }\n  return result\n}\n\n/**\n * @method getActions\n * @param {Object} component a System Runtime component\n * @param {String} name name of the state\n * @param {Boolean} isEvent true if the state is an event\n * @returns {Array} list of the actions\n * @private\n * @description Get the actions of the specified state\n */\nfunction getActions(component, name, isEvent) {\n  let action = $behavior.getActions(component.id(), name)\n  let parents = []\n  let length = 0\n  let i = 0\n  let parent = null\n\n  if (!action.length || isEvent) {\n    if (component.constructor.name !== 'Function') {\n      action = action.concat(\n        getActions($component.get(component.constructor.name), name, isEvent)\n      )\n    } else {\n      parents = $metamodel.getParents(component.name)\n      length = parents.length\n      for (i = 0; i < length; i++) {\n        parent = $component.get(parents[i])\n        if (parent) {\n          action = action.concat(getActions(parent, name, isEvent))\n        } else {\n          $log.unknownComponent(parents[i], component.name)\n        }\n        if (action.length) {\n          break\n        }\n      }\n    }\n  }\n\n  if (action.length) {\n    action.reverse()\n  }\n\n  return action\n}\n\n/**\n * @method action\n * @param {Component} component\n * @param {String} state name of the state\n * @param {Object} action action\n * @param {Array} params parameters of the action\n * @param {Boolean} isEvent is the action a callback of an event\n * @returns {Boolean} result of the action\n * @description Execute an action and make some Dependency Injection if it is a core action\n */\nfunction action(component, state, action, params, isEvent) {\n  let result = null\n  let injectedParams = []\n  let componentClassName = ''\n  let i = 0\n  let length = 0\n\n  if (component.constructor.name === 'Function') {\n    componentClassName = component.name\n  } else {\n    componentClassName = component.constructor.name\n  }\n\n  if (\n    !$metamodel.isProperty(state, componentClassName) &&\n    !$metamodel.isLink(state, componentClassName) &&\n    !$metamodel.isCollection(state, componentClassName)\n  ) {\n    params = setDefaultValue(componentClassName, state, params)\n  }\n\n  try {\n    length = params.length\n    for (i = 0; i < length; i++) {\n      injectedParams.push(params[i])\n    }\n\n    if (action.useCoreAPI) {\n      injectedParams.push($component)\n      injectedParams.push($db)\n      injectedParams.push($metamodel)\n      injectedParams.push({\n        checkInputNumbers,\n        checkInput,\n        checkOutput,\n        process,\n      })\n      injectedParams.push($behavior)\n      injectedParams.push($state)\n      injectedParams.push($log)\n      injectedParams.push($helper)\n      injectedParams.push($history)\n    }\n\n    if (isEvent) {\n      if (action.context) {\n        setTimeout(\n          action.action.bind.apply(\n            action.action,\n            [action.context].concat(injectedParams)\n          ),\n          0\n        )\n      } else {\n        setTimeout(\n          action.action.bind.apply(\n            action.action,\n            [component].concat(injectedParams)\n          ),\n          0\n        )\n      }\n    } else {\n      if (action.context) {\n        result = action.action.apply(action.context, injectedParams)\n      } else {\n        result = action.action.apply(component, injectedParams)\n      }\n    }\n  } catch (e) {\n    if (e instanceof RuntimeError) {\n      throw e\n    } else {\n      if (component && component.error) {\n        component.error({\n          message:\n            \"error when running the behavior '\" +\n            state +\n            \"' on component '\" +\n            component.id() +\n            \"'\",\n          stack: e,\n        })\n      }\n      if ($helper.getRuntime()) {\n        // do not invoke the error action of the system twice\n        if (\n          component &&\n          $helper.getRuntime().system() &&\n          $helper.getRuntime().system().id &&\n          component.id() !== $helper.getRuntime().system().id()\n        ) {\n          $helper\n            .getRuntime()\n            .system()\n            .error({\n              message:\n                \"error when running the behavior '\" +\n                state +\n                \"' on component '\" +\n                component.id() +\n                \"'\",\n              stack: e,\n            })\n        }\n\n        $helper.getRuntime().error({\n          message:\n            \"error when running the behavior '\" +\n            state +\n            \"' on component '\" +\n            component.id() +\n            \"'\",\n          stack: e,\n        })\n      }\n\n      $log.actionInvokeError(\n        state,\n        component.id(),\n        component.constructor.name,\n        e.message\n      )\n    }\n  }\n\n  return result\n}\n\n/* Public methods */\n\n/**\n * @method checkInputNumbers\n * @param {String} className name the class\n * @param {String} state state on which the action applied\n * @param {Function} action action\n * @returns {Boolean} true if the action is the valid number of parameters\n * @description Check if an action has the valid number of parameter\n */\nfunction checkInputNumbers(className, state, action) {\n  let func = ''\n  let beginBody = -1\n  let header = ''\n  let funcParams = ''\n  let params = []\n  let paramNumber = 0\n  let modelNumberParam = []\n  let isProperty = false\n  let isLink = false\n  let isCollection = false\n  let result = false\n  let isArrowFunction = true\n\n  // check number of parameters of the action\n  func = action.toString()\n\n  if (func.trim().indexOf('async') === 0) {\n    func = func.replace('async', '')\n  }\n\n  if (func.trim().indexOf('function') === 0) {\n    isArrowFunction = false\n  }\n\n  beginBody = isArrowFunction ? func.indexOf('=>') : func.indexOf('{')\n  header = func.substring(0, beginBody)\n  header = header.replace('=>', '')\n\n  if (header.indexOf('(') !== -1) {\n    funcParams = header.split('(')[1].replace(')', '').trim()\n  } else {\n    funcParams = header.trim()\n  }\n\n  params = funcParams.split(',')\n  if (params[0] === '') {\n    params = []\n  }\n  paramNumber = params.length\n\n  // get the number min and max of valid parameters\n  isProperty = $metamodel.isProperty(state, className)\n  isLink = $metamodel.isLink(state, className)\n  isCollection = $metamodel.isCollection(state, className)\n\n  switch (true) {\n    case isCollection:\n      modelNumberParam = [2, 2]\n      break\n    case isProperty:\n      if ($metamodel.getModelPathType(className, state) === 'array') {\n        modelNumberParam = [2, 2]\n      } else {\n        modelNumberParam = [1, 1]\n      }\n      break\n    case isLink:\n      modelNumberParam = [1, 1]\n      break\n    default:\n      modelNumberParam = getParamNumber(className, state)\n      break\n  }\n\n  // compare\n  if (\n    modelNumberParam[0] <= paramNumber &&\n    paramNumber <= modelNumberParam[1]\n  ) {\n    result = true\n  }\n\n  return result\n}\n\n/**\n * @method checkInput\n * @param {Object} params\n * @returns {Boolean} true if condition on input are compliant with the model\n * @description Check if conditions on input are compliant with the model before calling the action\n */\nfunction checkInput(params) {\n  params = params || {}\n\n  let component = params.component || null\n  let methodName = params.methodName || ''\n  let args = params.args || ''\n  let paramsName = []\n  let paramsType = []\n  let paramsNumber = []\n  let componentClassName = ''\n  let length = args.length\n  let i = 0\n  let param = null\n  let result = true\n  let isProperty = false\n  let isLink = false\n  let isCollection = false\n\n  if (component.constructor.name === 'Function') {\n    componentClassName = component.name\n  } else {\n    componentClassName = component.constructor.name\n  }\n\n  isProperty = $metamodel.isProperty(methodName, componentClassName)\n  isLink = $metamodel.isLink(methodName, componentClassName)\n  isCollection = $metamodel.isCollection(methodName, componentClassName)\n  paramsName = getParamNames(componentClassName, methodName)\n\n  switch (true) {\n    case isCollection && methodName.indexOf('.') === -1:\n      if (args && args[1] && args[1] === 'reset') {\n        paramsType = [\n          [$metamodel.getModel(componentClassName)[methodName].type[0]],\n          'string',\n        ]\n      } else {\n        paramsType = [\n          $metamodel.getModel(componentClassName)[methodName].type[0],\n          'string',\n        ]\n      }\n      paramsNumber = [2, 2]\n      break\n    case isProperty && methodName.indexOf('.') === -1:\n      if (isModelPath(methodName)) {\n        paramsType = [\n          $metamodel.getModelPathType(componentClassName, methodName),\n        ]\n      } else {\n        paramsType = [$metamodel.getModel(componentClassName)[methodName].type]\n      }\n      if (\n        $metamodel.getModelPathType(componentClassName, methodName) === 'array'\n      ) {\n        if (args && args[1] && args[1] === 'reset') {\n          paramsType = [['any'], 'string']\n        } else {\n          paramsType = ['any', 'string']\n        }\n        paramsNumber = [2, 2]\n      } else {\n        paramsNumber = [1, 1]\n      }\n      break\n    case isLink && methodName.indexOf('.') === -1:\n      paramsType = [$metamodel.getModel(componentClassName)[methodName].type]\n      paramsNumber = [1, 1]\n      break\n    default:\n      paramsType = getParamTypes(componentClassName, methodName)\n      paramsNumber = getParamNumber(componentClassName, methodName)\n      break\n  }\n\n  // case of object\n  if (typeof length === 'undefined') {\n    length = 1\n  }\n\n  if (length < paramsNumber[0] || paramsNumber[1] < length) {\n    result = false\n    $log.invalidParamNumber(\n      component.id(),\n      component.constructor.name,\n      methodName\n    )\n  }\n\n  for (i = 0; i < length; i++) {\n    param = args[i]\n    if (typeof param === 'undefined') {\n      if (i < paramsNumber[0]) {\n        result = false\n        $log.invalidParamNumber(\n          component.id(),\n          component.constructor.name,\n          methodName\n        )\n      } else {\n        continue\n      }\n    } else {\n      if (!$metamodel.isValidType(param, paramsType[i])) {\n        result = false\n        $log.invalidParamType(\n          component.id(),\n          component.constructor.name,\n          methodName,\n          paramsName[i]\n        )\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * @method checkOutput\n * @param {Object} params\n * @returns {Boolean} true if conditions on ouput are compliant with the metamodel\n * @description Check if conditions on output are compliant with the metamodel\n */\nfunction checkOutput(params) {\n  params = params || {}\n\n  let component = params.component || null\n  let methodName = params.methodName || ''\n  let methodResult = null\n  let componentClassName = ''\n  let returnType = null\n  let result = true\n\n  if (typeof params.methodResult !== 'undefined') {\n    methodResult = params.methodResult\n  } else {\n    methodResult = undefined\n  }\n\n  if (component.constructor.name === 'Function') {\n    componentClassName = component.name\n  } else {\n    componentClassName = component.constructor.name\n  }\n\n  returnType = getReturnType(componentClassName, methodName)\n  if (!$metamodel.isValidType(methodResult, returnType)) {\n    result = false\n    $log.invalidResultType(\n      component.id(),\n      component.constructor.name,\n      methodName,\n      typeof returnType === 'string' ? returnType : JSON.stringify(returnType),\n      Array.isArray(methodResult) ? 'array' : typeof methodResult\n    )\n  }\n\n  return result\n}\n\n/**\n * @method process\n * @param {Object} params params to process\n * {String} component id of the component\n * {String} state state of the component\n * {Array} data parameters to send to the action\n * @description Task processing.\n */\nfunction process(params) {\n  params = params || {}\n\n  params.id = params.id || ''\n  params.component = params.component || ''\n  params.state = params.state || ''\n  params.data = params.data || []\n  params.context = params.context || null\n\n  let component = null\n  let currentState = ''\n  let actions = []\n  let result = undefined\n  let i = 0\n  let length = 0\n  let componentClassName = false\n  let isProperty = false\n  let isLink = false\n  let isCollection = false\n  let isEvent = false\n  let isMethod = false\n  let behaviors = []\n  let behavior = null\n  let actionFromMemory = null\n\n  currentState = $state.get(params.component)\n\n  // check state\n  if (currentState && currentState.state === 'destroy') {\n    $log.invalidUseOfComponent(params.component)\n  }\n\n  // case of event processing\n  if (params.id) {\n    behaviors = $db.collections._Behavior.find({\n      _id: params.id,\n    })\n\n    if (behaviors.length === 0) {\n      behavior = behaviors[0]\n      component = $component.get(behavior.component)\n\n      if (component) {\n        if (component.constructor.name === 'Function') {\n          componentClassName = component.name\n        } else {\n          componentClassName = component.constructor.name\n        }\n\n        isProperty = $metamodel.isProperty(behavior.state, componentClassName)\n        isLink = $metamodel.isLink(behavior.state, componentClassName)\n        isCollection = $metamodel.isCollection(\n          behavior.state,\n          componentClassName\n        )\n        isEvent = $metamodel.isEvent(behavior.state, componentClassName)\n        isMethod = $metamodel.isMethod(behavior.state, componentClassName)\n\n        actionFromMemory = $behavior.get(params.id)\n        if (actionFromMemory) {\n          actions.push({\n            useCoreAPI: behavior.useCoreAPI,\n            context: behavior.context,\n            action: actionFromMemory,\n          })\n        }\n      }\n    }\n  } else {\n    component = $component.get(params.component)\n\n    if (component) {\n      if (component.constructor.name === 'Function') {\n        componentClassName = component.name\n      } else {\n        componentClassName = component.constructor.name\n      }\n\n      isProperty = $metamodel.isProperty(params.state, componentClassName)\n      isLink = $metamodel.isLink(params.state, componentClassName)\n      isCollection = $metamodel.isCollection(params.state, componentClassName)\n      isEvent = $metamodel.isEvent(params.state, componentClassName)\n      isMethod = $metamodel.isMethod(params.state, componentClassName)\n\n      actions = getActions(component, params.state, isEvent)\n    }\n  }\n\n  if (actions.length) {\n    if (\n      checkInput({\n        component: component,\n        methodName: params.state,\n        args: params.data,\n      })\n    ) {\n      if (isMethod) {\n        result = action(\n          params.context || component,\n          params.state,\n          actions[0],\n          params.data,\n          false\n        )\n\n        checkOutput({\n          component: component,\n          methodName: params.state,\n          methodResult: result,\n        })\n      } else {\n        length = actions.length\n        for (i = 0; i < length; i++) {\n          action(\n            params.context || component,\n            params.state,\n            actions[i],\n            params.data,\n            true\n          )\n        }\n\n        $state.set(component.id(), params.state, params.data)\n      }\n    }\n  } else {\n    if (component && (isEvent || isProperty || isLink || isCollection)) {\n      $state.set(component.id(), params.state, params.data)\n    }\n  }\n\n  return result\n}\n\nexport default {\n  checkInputNumbers,\n  checkInput,\n  checkOutput,\n  process,\n}\n","/*\n * System Runtime\n *\n * https://designfirst.io/systemruntime/\n *\n * Copyright 2022 Erwan Carriou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module component\n * @requires workflow\n * @requires db\n * @requires metamodel\n * @requires behavior\n * @requires helper\n * @requires log\n * @requires state\n * @requires mson\n * @requires history\n * @description This module manages the components.\n * It is the factory of all the components that are created by System Runtime.\n */\n\nimport $workflow from './workflow.js'\nimport $db from './db.js'\nimport $metamodel from './metamodel.js'\nimport $behavior from './behavior.js'\nimport $helper from './helper.js'\nimport $log from './log.js'\nimport $history from './history.js'\nimport $state from './state.js'\nimport $mson from './mson.js'\n\n/* Private properties */\n\nlet store = {}\n\n/* Private methods */\n\n/**\n * @class _Array\n * @param {Object} conf\n * {String} classId name of the class\n * {String} type type of the array\n * {Array} arr array\n * @private\n * @description Sub class to override many methods of Array Class\n */\nfunction _Array(conf) {\n  let arr = []\n  let arrDb = []\n  let type = ''\n  let id = ''\n  let classId = ''\n  let propertyName = ''\n  let isReadOnly = false\n  let isClassName = false\n\n  conf = conf || {}\n  type = conf.type || ''\n  id = conf.id || ''\n  propertyName = conf.propertyName || ''\n  arrDb = conf.arr || []\n  classId = conf.classId || ''\n\n  if (typeof conf.readOnly !== 'undefined') {\n    isReadOnly = conf.readOnly\n  }\n\n  isClassName = $metamodel.isClassName(type)\n\n  // init\n  arrDb.forEach(function (val) {\n    if (isClassName) {\n      arr.push($helper.getRuntime().require(val))\n    } else {\n      arr.push(val)\n    }\n  })\n\n  /**\n   * @method _copy\n   * @private\n   * @description copy the array\n   */\n  function _copy() {\n    let i = 0\n    let j = 0\n    let length = arr.length\n\n    arrDb.forEach(function (val) {\n      if (isClassName) {\n        arr[i] = $helper.getRuntime().require(val)\n      } else {\n        arr[i] = val\n      }\n      i = i + 1\n    })\n\n    for (j = i; j < length; j++) {\n      delete arr[j]\n    }\n    arr.length = arrDb.length\n  }\n\n  /**\n   * @method _add\n   * @param {String} val value to add\n   * @param {String} action type of action\n   * @param {Number} start\n   * @param {String} deleteCount\n   * @private\n   * @description add an item in the array\n   */\n  function _add(val, action, start, deleteCount) {\n    let i = 0\n    let length = 0\n    let del = []\n    let oldValue = null\n\n    if ($history.isEnabled()) {\n      oldValue = JSON.stringify(arrDb)\n    }\n\n    if (!isReadOnly) {\n      if (isClassName) {\n        if (val && $metamodel.inheritFrom(val.constructor.name, type)) {\n          switch (true) {\n            case action === 'push':\n              arrDb.push(val.id())\n              break\n            case action === 'unshift':\n              arrDb.unshift(val.id())\n              break\n            case action === 'splice':\n              del = arrDb.splice(start, deleteCount, val)\n\n              length = del.length\n              for (i = 0; i < length; i++) {\n                $workflow.process({\n                  component: id,\n                  state: propertyName,\n                  data: [store[del[i]], 'remove'],\n                })\n              }\n              break\n            default:\n              break\n          }\n\n          if ($history.isEnabled() && classId.indexOf('_') !== 0) {\n            $history.pushState({\n              action: 'update',\n              collection: classId,\n              id: id,\n              field: propertyName,\n              value: JSON.stringify(arrDb),\n              oldValue: oldValue,\n            })\n          }\n\n          if ($helper.isRuntime()) {\n            $helper.getRuntime().require('db').update({\n              collection: classId,\n              id: id,\n              field: propertyName,\n              value: arrDb,\n            })\n          }\n\n          $workflow.process({\n            component: id,\n            state: propertyName,\n            data: [val, 'add'],\n          })\n        } else {\n          $log.invalidPropertyName(id, classId, propertyName, val, type)\n        }\n      } else {\n        if (val && $metamodel.isValidType(val, type)) {\n          switch (true) {\n            case action === 'push':\n              arrDb.push(val)\n              break\n            case action === 'unshift':\n              arrDb.unshift(val)\n              break\n            case action === 'splice':\n              arrDb.splice(start, deleteCount, val)\n              break\n            default:\n              break\n          }\n\n          if ($history.isEnabled() && classId.indexOf('_') !== 0) {\n            $history.pushState({\n              action: 'update',\n              collection: classId,\n              id: id,\n              field: propertyName,\n              value: JSON.stringify(arrDb),\n              oldValue: oldValue,\n            })\n          }\n\n          if ($helper.isRuntime()) {\n            $helper.getRuntime().require('db').update({\n              collection: classId,\n              id: id,\n              field: propertyName,\n              value: arrDb,\n            })\n          }\n\n          $workflow.process({\n            component: id,\n            state: propertyName,\n            data: [val, 'add'],\n          })\n        } else {\n          $log.invalidPropertyName(id, classId, propertyName, val, type)\n        }\n      }\n    } else {\n      $log.readOnlyProperty(id, classId, propertyName)\n    }\n    return arrDb.length\n  }\n\n  /**\n   * @method _remove\n   * @param {String} action\n   * @private\n   * @description remove an item from the array\n   */\n  function _remove(action) {\n    let result\n    let val = null\n    let oldValue = null\n\n    if ($history.isEnabled()) {\n      oldValue = JSON.stringify(arrDb)\n    }\n\n    if (!isReadOnly) {\n      if (arrDb.length !== 0) {\n        switch (true) {\n          case action === 'pop':\n            val = arrDb.pop()\n            break\n          case action === 'shift':\n            val = arrDb.shift()\n            break\n          default:\n            break\n        }\n\n        if ($history.isEnabled() && classId.indexOf('_') !== 0) {\n          $history.pushState({\n            action: 'update',\n            collection: classId,\n            id: id,\n            field: propertyName,\n            value: JSON.stringify(arrDb),\n            oldValue: oldValue,\n          })\n        }\n\n        if ($helper.isRuntime()) {\n          $helper.getRuntime().require('db').update({\n            collection: classId,\n            id: id,\n            field: propertyName,\n            value: arrDb,\n          })\n        }\n\n        if (isClassName) {\n          result = store[val]\n        } else {\n          result = val\n        }\n\n        $workflow.process({\n          component: id,\n          state: propertyName,\n          data: [result, 'remove'],\n        })\n      }\n    } else {\n      $log.readOnlyProperty(id, classId, propertyName)\n    }\n    return result\n  }\n\n  /**\n   * @method push\n   * @param {_Component|Object} val\n   * @description Override push method\n   */\n  arr.push = function push(val) {\n    let result = _add(val, 'push')\n\n    arr[arr.length] = val\n\n    return result\n  }\n\n  /**\n   * @method pop\n   * @returns {_Component|Object} value\n   * @description Override pop method\n   */\n  arr.pop = function pop() {\n    let result = _remove('pop')\n    let length = arr.length\n\n    if (length !== 0) {\n      delete arr[length]\n      arr.length = length - 1\n    }\n\n    return result\n  }\n\n  /**\n   * @method shift\n   * @returns {_Component|Object} value\n   * @description Override shift method\n   */\n  arr.shift = function shift() {\n    let result = _remove('shift')\n    _copy()\n\n    return result\n  }\n\n  /**\n   * @method unshift\n   * @param {_Component|Object} val\n   * @description Override unshift method\n   */\n  arr.unshift = function unshift(val) {\n    let result = _add(val, 'unshift')\n    _copy()\n\n    return result\n  }\n\n  /**\n   * @method push\n   * @param {_Component|Object} arr\n   * @description Override concat method\n   */\n  arr.concat = function concat(arr) {\n    let i = 0\n    let length = 0\n    let result = null\n\n    if (Array.isArray(arr)) {\n      length = arr.length\n      for (i = 0; i < length; i++) {\n        _add(arr[i], 'push')\n      }\n    }\n\n    conf.arr = arrDb\n\n    result = new _Array(conf)\n    _copy()\n\n    return result\n  }\n\n  /**\n   * @method sort\n   * @param {Function} funct the sort function\n   * @returns {_Array} the current _Array\n   * @description Override sort method\n   */\n  arr.sort = function sort(funct) {\n    let oldValue = null\n\n    if ($history.isEnabled()) {\n      oldValue = JSON.stringify(arrDb)\n    }\n\n    arrDb.sort(funct)\n\n    if ($history.isEnabled() && classId.indexOf('_') !== 0) {\n      $history.pushState({\n        action: 'update',\n        collection: classId,\n        id: id,\n        field: propertyName,\n        value: JSON.stringify(arrDb),\n        oldValue: oldValue,\n      })\n    }\n\n    if ($helper.isRuntime()) {\n      $helper.getRuntime().require('db').update({\n        collection: classId,\n        id: id,\n        field: propertyName,\n        value: arrDb,\n      })\n    }\n\n    _copy()\n\n    return arr\n  }\n\n  /**\n   * @method reverse\n   * @returns {_Array} the reversed _Array\n   * @description Override reverse method\n   */\n  arr.reverse = function reverse() {\n    let oldValue = null\n\n    if ($history.isEnabled()) {\n      oldValue = JSON.stringify(arrDb)\n    }\n    arrDb.reverse()\n\n    if ($history.isEnabled() && classId.indexOf('_') !== 0) {\n      $history.pushState({\n        action: 'update',\n        collection: classId,\n        id: id,\n        field: propertyName,\n        value: JSON.stringify(arrDb),\n        oldValue: oldValue,\n      })\n    }\n\n    if ($helper.isRuntime()) {\n      $helper.getRuntime().require('db').update({\n        collection: classId,\n        id: id,\n        field: propertyName,\n        value: arrDb,\n      })\n    }\n\n    _copy()\n\n    return arr\n  }\n\n  /**\n   * @method splice\n   * @returns {_Array} the spliced _Array\n   * @description Override splice method\n   */\n  arr.splice = function splice(start, deleteCount, val) {\n    let oldValue = null\n    let result = []\n    let i = 0\n    let length = 0\n    let data = null\n\n    if ($history.isEnabled()) {\n      oldValue = JSON.stringify(arrDb)\n    }\n\n    if (typeof val !== 'undefined') {\n      _add(val, 'splice', start, deleteCount)\n    } else {\n      result = arrDb.splice(start, deleteCount)\n\n      if ($history.isEnabled() && classId.indexOf('_') !== 0) {\n        $history.pushState({\n          action: 'update',\n          collection: classId,\n          id: id,\n          field: propertyName,\n          value: JSON.stringify(arrDb),\n          oldValue: oldValue,\n        })\n      }\n\n      if ($helper.isRuntime()) {\n        $helper.getRuntime().require('db').update({\n          collection: classId,\n          id: id,\n          field: propertyName,\n          value: arrDb,\n        })\n      }\n\n      length = result.length\n      for (i = 0; i < length; i++) {\n        if (isClassName) {\n          data = store[result[i]]\n        } else {\n          data = result[i]\n        }\n\n        $workflow.process({\n          component: id,\n          state: propertyName,\n          data: [data, 'remove'],\n        })\n      }\n    }\n\n    _copy()\n\n    return result\n  }\n\n  /**\n   * @method slice\n   * @returns {_Array} the sliced _Array\n   * @description Override slice method\n   */\n  arr.slice = function slice(begin, end) {\n    let result = arrDb.slice(begin, end)\n    _copy()\n\n    return result\n  }\n\n  return arr\n}\n\n_Array.prototype = []\n\n/**\n * @method getParamNames\n * @param {String} id id of the class\n * @param {String} methodName name of the method\n * @returns {Array} all the names of method parameters of the class\n * @private\n * @description Get all the names of method parameters\n */\nfunction getParamNames(id, methodName) {\n  let params = []\n  let result = []\n  let length = 0\n  let i = 0\n\n  params = $metamodel.getModel(id)[methodName].params\n  if (params) {\n    length = params.length\n    for (i = 0; i < length; i++) {\n      result.push(params[i].name)\n    }\n  }\n  return result\n}\n\n/**\n * @method getProperties\n * @param {String} id id of the class\n * @returns {Array} all the properties of the class\n * @private\n * @description Get all the property of a class\n */\nfunction getProperties(id) {\n  let model = null\n  let schema = null\n  let propNames = []\n  let length = 0\n  let i = 0\n  let result = []\n\n  model = $metamodel.getModel(id)\n  schema = $metamodel.getSchema(model[$mson.NAME])\n\n  propNames = Object.keys(schema)\n\n  length = propNames.length\n  for (i = 0; i < length; i++) {\n    if (\n      schema[propNames[i]] === $mson.LINK_TYPE ||\n      schema[propNames[i]] === $mson.PROPERTY_TYPE ||\n      schema[propNames[i]] === $mson.COLLECTION_TYPE\n    ) {\n      result.push({\n        name: propNames[i],\n        type: model[propNames[i]].type,\n        readOnly: model[propNames[i]].readOnly,\n      })\n    }\n  }\n\n  return result\n}\n\n/**\n * @method getMethods\n * @param {String} id id of the class\n * @returns {Array} all the methods of the class\n * @private\n * @description Get all the method of a class\n */\nfunction getMethods(id) {\n  let model = null\n  let schema = null\n  let propNames = []\n  let length = 0\n  let i = 0\n  let result = []\n\n  model = $metamodel.getModel(id)\n  schema = $metamodel.getSchema(model[$mson.NAME])\n\n  propNames = Object.keys(schema)\n\n  length = propNames.length\n  for (i = 0; i < length; i++) {\n    if (schema[propNames[i]] === $mson.METHOD_TYPE) {\n      result.push(propNames[i])\n    }\n  }\n\n  return result\n}\n\n/**\n * @method getStructureProperties\n * @param {String} path path of the property\n * @param {String} name name of the model\n * @returns {Array} list of property schema of the structure type\n * @private\n * @description Get the schema of a structure\n */\nfunction getStructureProperties(path, model) {\n  let type = null\n  let structure = null\n  let result = []\n  let propNames = []\n\n  type = $metamodel.getModelPathType(model, path)\n  structure = $metamodel.getType(type)\n\n  if (structure && structure.schema) {\n    propNames = Object.keys(structure.schema)\n    propNames.forEach(function (name) {\n      structure.schema[name].name = name\n      result.push(structure.schema[name])\n    })\n  }\n\n  return result\n}\n\n/**\n * @method getEvents\n * @param {String} id id of the class\n * @returns {Array} all the events of the class\n * @private\n * @description Get all the event of a class\n */\nfunction getEvents(id) {\n  let model = null\n  let schema = null\n  let propNames = []\n  let length = 0\n  let i = 0\n  let result = []\n\n  model = $metamodel.getModel(id)\n  schema = $metamodel.getSchema(model[$mson.NAME])\n\n  propNames = Object.keys(schema)\n\n  length = propNames.length\n  for (i = 0; i < length; i++) {\n    if (schema[propNames[i]] === $mson.EVENT_TYPE) {\n      result.push(propNames[i])\n    }\n  }\n\n  return result\n}\n\n/**\n * @method getStructureValue\n * @param {String} model name of the model\n * @param {String} id name of the component\n * @param {String} path\n * @returns {Object} the value\n * @private\n * @description Get the value of a structure\n */\nfunction getStructureValue(model, id, path) {\n  let result = null\n  let doc = $db.store[model][id]\n  let subPath = path.split('.')\n  let length = subPath.length\n  let i = 0\n  let arr = ''\n  let index = -1\n\n  result = doc\n\n  for (i = 0; i < length; i++) {\n    if (subPath[i].indexOf('[') !== -1) {\n      arr = subPath[i].split('[')[0]\n      index = subPath[i].split('[')[1].replace(']', '')\n      result = result[arr][index]\n    } else {\n      if (result) {\n        result = result[subPath[i]]\n      }\n    }\n  }\n  return result\n}\n\n/**\n * @method getStructureValue\n * @param {String} model name of the model\n * @param {String} id name of the component\n * @param {String} path\n * @param {String} value the value to set\n * @private\n * @description Set the value of a structure\n */\nfunction setStructureValue(model, id, path, value) {\n  let result = null\n  let doc = $db.store[model][id]\n  let subPath = path.split('.')\n  let length = subPath.length\n  let i = 0\n  let arr = ''\n  let index = -1\n\n  result = doc\n\n  for (i = 0; i < length - 1; i++) {\n    if (subPath[i].indexOf('[') !== -1) {\n      arr = subPath[i].split('[')[0]\n      index = subPath[i].split('[')[1].replace(']', '')\n      result = result[arr][index]\n    } else {\n      result = result[subPath[i]]\n    }\n  }\n  result[subPath[i]] = value\n}\n\n/**\n * @method createClasss\n * @param {String} classId name of the class\n * @returns {Function} the class\n * @private\n * @description Create a new class from a class definition\n */\nfunction createClass(classId) {\n  let proxy = function proxy(config) {\n    config = config || {}\n    let proxy = {}\n\n    if (config.constructor.name !== 'Object') {\n      $log.invalidConctructorParameters(config, classId)\n      config = {}\n    }\n\n    if (\n      !$metamodel.isValidObject(\n        config,\n        $metamodel.getModel(classId),\n        true,\n        true\n      )\n    ) {\n      $log.invalidParameters(classId, config)\n    }\n\n    $metamodel.prepareObject(config, $metamodel.getModel(classId))\n\n    if (typeof config[$mson.ID] === 'undefined') {\n      config[$mson.ID] = $helper.generateId()\n    }\n\n    store[config[$mson.ID]] = this\n\n    // id\n    proxy = function proxy() {\n      return config[$mson.ID]\n    }\n    this.id = new Function(\n      '__proxy',\n      'return function id () { return __proxy.apply(this) };'\n    )(proxy)\n\n    // create link to db\n    $db.store[classId][config[$mson.ID]] = config\n\n    if ($history.isEnabled() && classId.indexOf('_') !== 0) {\n      $history.pushState({\n        action: 'insert',\n        collection: classId,\n        id: config[$mson.ID],\n        value: JSON.stringify(config),\n      })\n    }\n\n    if ($helper.isRuntime() && $helper.getRuntime().require('db')) {\n      $helper.getRuntime().require('db').insert({\n        collection: classId,\n        document: config,\n      })\n    }\n\n    Object.freeze(this)\n\n    if (this.init) {\n      this.init(config)\n    }\n  }\n  return new Function(\n    '__proxy',\n    'return function ' +\n      classId +\n      ' (config) { __proxy.apply(this, arguments) };'\n  )(proxy)\n}\n\n/**\n * @method addIdClass\n * @param {Function} Class a class\n * @param {String} classId name of the class\n * @private\n * @description Add an id method to a class that will return its id\n */\nfunction addIdClass(Class, classId) {\n  let proxy = function proxy() {\n    return classId\n  }\n  Class.id = new Function(\n    '__proxy',\n    'return function id () { return __proxy.apply(this) };'\n  )(proxy)\n}\n\n/**\n * @method addProperties\n * @param {String} model model name\n * @param {Function} Class Class\n * @param {String} classId name of the class\n * @private\n * @description Add properties to a component.\n * All these properties will be accessed by a method with the same name.\n * Some checks can be done in order to see if the set of properties is compliant with the model.\n *\n * @example\n * laure.age(); // get the age of a person\n * laure.age(22); // set the age of a person\n */\nfunction addProperties(model, Class, classId) {\n  let properties = getProperties(model)\n\n  properties.forEach(function property(prop) {\n    let proxy = {}\n    let propertyName = ''\n    let propertyType = ''\n    let propertyReadOnly = ''\n\n    propertyName = prop.name\n    propertyType = prop.type\n    propertyReadOnly = prop.readOnly\n\n    function _isValidCollection(coll, type) {\n      let result = true\n\n      if (type !== 'any') {\n        coll.forEach(function (val) {\n          if ($metamodel.isClassName(type)) {\n            if (\n              !$metamodel.isValidType(val, type) &&\n              !$metamodel.inheritFrom(val.constructor.name, type)\n            ) {\n              result = result && false\n            }\n          } else {\n            if (!$metamodel.isValidType(val, type)) {\n              result = result && false\n            }\n          }\n        })\n      }\n\n      return result\n    }\n\n    function _getRealCollection(coll, type) {\n      let result = []\n\n      coll.forEach(function (val) {\n        if ($metamodel.isClassName(type)) {\n          switch (true) {\n            case typeof val === 'string':\n              result.push(val)\n              break\n            case typeof val.id !== 'undefined':\n              result.push(val.id())\n              break\n            default:\n              result.push(null)\n              break\n          }\n        } else {\n          result.push(val)\n        }\n      })\n\n      return result\n    }\n\n    if (Array.isArray(propertyType) || propertyType === 'array') {\n      // in case of array, return a sub array\n      proxy = function proxy(position, value) {\n        let search = []\n        let component = null\n        let runtimeArr = null\n        let val = null\n        let realVal = null\n        let oldValue = null\n\n        if (typeof value === 'undefined') {\n          if (typeof position === 'undefined') {\n            runtimeArr = new _Array({\n              id: this.id(),\n              propertyName: propertyName,\n              readOnly: propertyReadOnly,\n              classId: classId,\n              type: propertyType === 'array' ? 'any' : propertyType[0],\n              arr: $db.store[classId][this.id()][propertyName],\n            })\n\n            return runtimeArr\n          } else {\n            if (Array.isArray(position)) {\n              // we replace the collection\n              if (\n                _isValidCollection(\n                  position,\n                  propertyType === 'array' ? 'any' : propertyType[0]\n                )\n              ) {\n                search = $db.collections[classId].find({\n                  _id: this.id(),\n                })\n                if (search.length) {\n                  component = search[0]\n                  realVal = _getRealCollection(\n                    position,\n                    propertyType === 'array' ? 'any' : propertyType[0]\n                  )\n\n                  $workflow.process({\n                    component: this.id(),\n                    state: propertyName,\n                    data: [position, 'reset'],\n                  })\n\n                  if ($history.isEnabled()) {\n                    oldValue = JSON.stringify(component[propertyName])\n                  }\n\n                  component[propertyName] = realVal\n\n                  if ($history.isEnabled() && classId.indexOf('_') !== 0) {\n                    $history.pushState({\n                      action: 'update',\n                      collection: classId,\n                      id: this.id(),\n                      field: propertyName,\n                      value: JSON.stringify(component[propertyName]),\n                      oldValue: oldValue,\n                    })\n                  }\n\n                  if ($helper.isRuntime()) {\n                    $helper.getRuntime().require('db').update({\n                      collection: classId,\n                      id: this.id(),\n                      field: propertyName,\n                      value: component[propertyName],\n                    })\n                  }\n                }\n              } else {\n                $log.invalidCollectionItem(\n                  this.id(),\n                  this.constructor.name,\n                  propertyName,\n                  position,\n                  propertyType === 'array' ? 'any' : propertyType[0]\n                )\n              }\n            } else {\n              if (typeof position === 'number') {\n                val = $db.store[classId][this.id()][propertyName][position]\n                if (val) {\n                  switch (true) {\n                    case $metamodel.isClassName(\n                      propertyType === 'array' ? 'array' : propertyType[0]\n                    ):\n                      realVal = $helper.getRuntime().require(val)\n                      break\n                    case propertyType === 'array'\n                      ? 'array'\n                      : propertyType[0] === 'date':\n                      realVal = new Date(val)\n                      break\n                    case $metamodel.isStructure(propertyName, model):\n                      realVal = addStructure(\n                        '',\n                        propertyName + '[' + position + ']',\n                        model,\n                        this.id()\n                      )\n                      break\n                    default:\n                      realVal = val\n                      break\n                  }\n                  return realVal\n                }\n              } else {\n                $log.invalidPropertyName(\n                  this.id(),\n                  this.constructor.name,\n                  propertyName,\n                  position,\n                  'number'\n                )\n              }\n            }\n          }\n        } else {\n          if (propertyReadOnly) {\n            $log.readOnlyProperty(\n              this.id(),\n              this.constructor.name,\n              propertyName\n            )\n          } else {\n            if (\n              $metamodel.isValidType(\n                value,\n                propertyType === 'array' ? 'any' : propertyType[0]\n              ) ||\n              ($metamodel.inheritFrom(\n                value.constructor.name,\n                propertyType === 'array' ? 'array' : propertyType[0]\n              ) &&\n                $metamodel.isClassName(\n                  propertyType === 'array' ? 'array' : propertyType[0]\n                ))\n            ) {\n              search = $db.collections[classId].find({\n                _id: this.id(),\n              })\n              if (search.length) {\n                switch (true) {\n                  case $metamodel.isClassName(\n                    propertyType === 'array' ? 'array' : propertyType[0]\n                  ):\n                    switch (true) {\n                      case typeof value === 'string':\n                        realVal = value\n                        break\n                      case typeof value.id !== 'undefined':\n                        realVal = value.id()\n                        break\n                      default:\n                        realVal = ''\n                        break\n                    }\n                    break\n                  case Array.isArray(propertyType)\n                    ? propertyType[0]\n                    : 'any' === 'date':\n                    if (typeof value === 'string') {\n                      realVal = value\n                    } else {\n                      realVal = value.toISOString()\n                    }\n                    break\n                  default:\n                    realVal = ''\n                    break\n                }\n\n                component = search[0]\n                component[propertyName][position] = realVal\n\n                if ($history.isEnabled()) {\n                  oldValue = JSON.stringify(component[propertyName])\n                }\n\n                if ($history.isEnabled() && classId.indexOf('_') !== 0) {\n                  $history.pushState({\n                    action: 'update',\n                    collection: classId,\n                    id: this.id(),\n                    field: propertyName,\n                    value: JSON.stringify(component[propertyName]),\n                    oldValue: oldValue,\n                  })\n                }\n\n                if ($helper.isRuntime()) {\n                  $helper.getRuntime().require('db').update({\n                    collection: classId,\n                    id: this.id(),\n                    field: propertyName,\n                    value: component[propertyName],\n                  })\n                }\n\n                $workflow.process({\n                  component: this.id(),\n                  state: propertyName,\n                  data: [value, 'add'],\n                })\n              }\n            } else {\n              $log.invalidPropertyName(\n                this.id(),\n                this.constructor.name,\n                propertyName,\n                value,\n                propertyType[0]\n              )\n            }\n          }\n        }\n      }\n      Class.prototype[propertyName] = new Function(\n        '__proxy',\n        'return function ' +\n          propertyName +\n          ' (position, value) { return __proxy.apply(this, arguments) };'\n      )(proxy)\n    } else {\n      proxy = function proxy(value) {\n        let search = []\n        let component = null\n        let propertyValue = null\n        let oldValue = null\n        let realVal = null\n\n        if (typeof value === 'undefined') {\n          component = $db.store[classId][this.id()]\n          if (component) {\n            switch (true) {\n              case $metamodel.isClassName(propertyType):\n                propertyValue = get(component[propertyName])\n                break\n              case propertyType === 'date':\n                propertyValue = new Date(component[propertyName])\n                break\n              case propertyType === 'json':\n                propertyValue = component[propertyName]\n                propertyValue = JSON.parse(JSON.stringify(propertyValue))\n                break\n              case propertyType === 'array':\n                propertyValue = new _Array({\n                  id: this.id(),\n                  propertyName: propertyName,\n                  readOnly: propertyReadOnly,\n                  classId: classId,\n                  type: 'any',\n                  arr: $db.store[classId][this.id()][propertyName],\n                })\n                break\n              case $metamodel.isStructure(propertyName, classId):\n                propertyValue = addStructure('', propertyName, model, this.id())\n                break\n              default: // TODO case of object\n                propertyValue = component[propertyName]\n                break\n            }\n            return propertyValue\n          } else {\n            $log.destroyedComponentCall(propertyName, this.id())\n          }\n        } else {\n          if (propertyReadOnly) {\n            $log.readOnlyProperty(\n              this.id(),\n              this.constructor.name,\n              propertyName\n            )\n          } else {\n            if ($metamodel.isValidType(value, propertyType)) {\n              search = $db.collections[classId].find({\n                _id: this.id(),\n              })\n              if (search.length) {\n                component = search[0]\n\n                if ($history.isEnabled()) {\n                  oldValue = JSON.stringify(component[propertyName])\n                }\n\n                switch (true) {\n                  case $metamodel.isClassName(propertyType):\n                    if (value === null) {\n                      realVal = value\n                    } else {\n                      realVal = value.id()\n                    }\n                    break\n                  case propertyType === 'date':\n                    if (typeof value === 'string') {\n                      realVal = value\n                    } else {\n                      realVal = value.toISOString()\n                      component[propertyName] = value.toISOString()\n                    }\n                    break\n                  default:\n                    realVal = value\n                    break\n                }\n\n                component[propertyName] = realVal\n\n                if ($history.isEnabled() && classId.indexOf('_') !== 0) {\n                  $history.pushState({\n                    action: 'update',\n                    collection: classId,\n                    id: this.id(),\n                    field: propertyName,\n                    value: JSON.stringify(realVal),\n                    oldValue: oldValue,\n                  })\n                }\n\n                if ($helper.isRuntime() && $helper.getRuntime().require('db')) {\n                  $helper.getRuntime().require('db').update({\n                    collection: classId,\n                    id: this.id(),\n                    field: propertyName,\n                    value: realVal,\n                  })\n                }\n\n                // case of _Behavior\n                if (classId === '_Behavior') {\n                  $behavior.removeFromMemory(this.id())\n                }\n\n                $workflow.process({\n                  component: this.id(),\n                  state: propertyName,\n                  data: [value],\n                })\n              }\n            } else {\n              $log.invalidPropertyName(\n                this.id(),\n                this.constructor.name,\n                propertyName,\n                value,\n                propertyType\n              )\n            }\n          }\n        }\n      }\n      Class.prototype[propertyName] = new Function(\n        '__proxy',\n        'return function ' +\n          propertyName +\n          ' (value) { return __proxy.apply(this, arguments) };'\n      )(proxy)\n    }\n  })\n}\n\n/**\n * @method addStructure\n * @param {String} path parent path\n * @param {String} name property name\n * @param {String} model model name\n * @param {String} id id of the component\n * @returns {Object} object that cointains methods to access the structure\n * @private\n * @description Add structure properties to a component.\n * All these properties will be accessed by a method with the same name.\n * Some checks can be done in order to see if the set of properties is compliant with the model.\n */\nfunction addStructure(path, name, model, id) {\n  let properties = getStructureProperties(\n    path ? path + '.' + name : name,\n    model\n  )\n  let sructure = undefined\n\n  if (getStructureValue(model, id, path ? path + '.' + name : name)) {\n    sructure = {}\n    properties.forEach(function property(prop) {\n      let proxy = {}\n      let propertyName = ''\n      let propertyType = ''\n      let propertyReadOnly = ''\n\n      propertyName = prop.name\n      propertyType = prop.type\n      propertyReadOnly = prop.readOnly\n\n      if (Array.isArray(propertyType) || propertyType === 'array') {\n        // in case of array, return a sub array\n        proxy = function proxy(position, value) {\n          let search = []\n          let component = null\n          let runtimeArr = null\n          let val = null\n          let parentPath = ''\n          let fullPath = ''\n          let oldValue = null\n\n          function _isValidCollection(coll, type) {\n            let result = true\n\n            coll.forEach(function (val) {\n              if (!$metamodel.isValidType(val, type)) {\n                result = result && false\n              }\n            })\n\n            return result\n          }\n\n          if (path) {\n            parentPath = path + '.' + name\n          } else {\n            parentPath = name\n          }\n          fullPath = parentPath + '.' + propertyName\n\n          if (typeof value === 'undefined') {\n            if (typeof position === 'undefined') {\n              runtimeArr = new _Array({\n                id: id,\n                propertyName: fullPath,\n                readOnly: propertyReadOnly,\n                classId: model,\n                type: Array.isArray(propertyType) ? propertyType[0] : 'any',\n                arr: getStructureValue(model, id, fullPath),\n              })\n\n              return runtimeArr\n            } else {\n              if (Array.isArray(position)) {\n                // we replace the collection\n                if (\n                  _isValidCollection(\n                    position,\n                    Array.isArray(propertyType) ? propertyType[0] : 'any'\n                  )\n                ) {\n                  search = $db.collections[model].find({\n                    _id: id,\n                  })\n                  if (search.length) {\n                    if ($history.isEnabled()) {\n                      oldValue = getStructureValue(model, id, fullPath)\n                    }\n\n                    setStructureValue(model, id, fullPath, position)\n\n                    // all element\n                    if (fullPath.indexOf('[') !== -1) {\n                      $workflow.process({\n                        component: id,\n                        state: fullPath.replace(/\\[(\\d)*\\]/g, ''),\n                        data: [position, 'reset'],\n                      })\n                    }\n\n                    // current element\n                    $workflow.process({\n                      component: id,\n                      state: fullPath,\n                      data: [position, 'reset'],\n                    })\n\n                    if ($history.isEnabled() && model.indexOf('_') !== 0) {\n                      $history.pushState({\n                        action: 'update',\n                        collection: model,\n                        id: id,\n                        field: fullPath,\n                        value: JSON.stringify([]),\n                        oldValue: JSON.stringify(oldValue),\n                      })\n                    }\n\n                    if ($helper.isRuntime()) {\n                      $helper.getRuntime().require('db').update({\n                        collection: model,\n                        id: id,\n                        field: fullPath,\n                        value: position,\n                      })\n                    }\n                  }\n                } else {\n                  $log.invalidPropertyName(\n                    id,\n                    this.constructor.name,\n                    propertyName,\n                    position,\n                    propertyType[0]\n                  )\n                }\n              } else {\n                if (typeof position === 'number') {\n                  component = $db.store[model][id]\n                  if (component) {\n                    switch (true) {\n                      case $metamodel.isClassName(\n                        Array.isArray(propertyType) ? propertyType[0] : 'any'\n                      ):\n                        val = get(\n                          getStructureValue(\n                            model,\n                            id,\n                            fullPath + '[' + position + ']'\n                          )\n                        )\n                        return val\n                      case Array.isArray(propertyType)\n                        ? propertyType[0]\n                        : 'any' === 'date':\n                        val = new Date(\n                          getStructureValue(\n                            model,\n                            id,\n                            fullPath + '[' + position + ']'\n                          )\n                        )\n                        return val\n                      case Array.isArray(propertyType)\n                        ? propertyType[0]\n                        : 'any' === 'json':\n                        val = getStructureValue(\n                          model,\n                          id,\n                          fullPath + '[' + position + ']'\n                        )\n                        val = JSON.parse(JSON.stringify(val))\n                        return val\n                      case $metamodel.isStructure(fullPath, model):\n                        val = addStructure(\n                          parentPath,\n                          propertyName + '[' + position + ']',\n                          model,\n                          id\n                        )\n                        return val\n                      default:\n                        val = getStructureValue(\n                          model,\n                          id,\n                          fullPath + '[' + position + ']'\n                        )\n                        return val\n                    }\n                  } else {\n                    $log.destroyedComponentCall(\n                      fullPath[position] + '[' + position + ']',\n                      id\n                    )\n                  }\n                } else {\n                  $log.invalidPropertyName(\n                    id,\n                    this.constructor.name,\n                    propertyName,\n                    position,\n                    'number'\n                  )\n                }\n              }\n            }\n          } else {\n            if (propertyReadOnly) {\n              $log.readOnlyProperty(id, this.constructor.name, propertyName)\n            } else {\n              if (\n                $metamodel.isValidType(\n                  value,\n                  Array.isArray(propertyType) ? propertyType[0] : 'any'\n                )\n              ) {\n                search = $db.collections[model].find({\n                  _id: id,\n                })\n                if (search.length) {\n                  let arr = getStructureValue(model, id, fullPath)\n                  if (typeof arr === 'undefined') {\n                    arr = []\n                  }\n\n                  switch (true) {\n                    case $metamodel.inheritFrom(\n                      value.constructor.name,\n                      Array.isArray(propertyType) ? propertyType[0] : 'any'\n                    ) &&\n                      $metamodel.isClassName(\n                        Array.isArray(propertyType) ? propertyType[0] : 'any'\n                      ):\n                      arr[position] = value.id()\n                      break\n                    case Array.isArray(propertyType)\n                      ? propertyType[0]\n                      : 'any' === 'date':\n                      arr[position] = value.toISOString()\n                      break\n                    default:\n                      arr[position] = value\n                      break\n                  }\n\n                  if ($history.isEnabled()) {\n                    oldValue = getStructureValue(model, id, fullPath)\n                  }\n\n                  setStructureValue(model, id, fullPath, arr)\n\n                  if ($history.isEnabled() && model.indexOf('_') !== 0) {\n                    $history.pushState({\n                      action: 'update',\n                      collection: model,\n                      id: id,\n                      field: fullPath,\n                      value: JSON.stringify(value),\n                      oldValue: JSON.stringify(oldValue),\n                    })\n                  }\n\n                  if ($helper.isRuntime()) {\n                    $helper.getRuntime().require('db').update({\n                      collection: model,\n                      id: id,\n                      field: fullPath,\n                      value: arr,\n                    })\n                  }\n\n                  // all element\n                  if (fullPath.indexOf('[') !== -1) {\n                    $workflow.process({\n                      component: id,\n                      state: fullPath.replace(/\\[(\\d)*\\]/g, ''),\n                      data: [value, 'add'],\n                    })\n                  }\n\n                  // current element\n                  $workflow.process({\n                    component: id,\n                    state: fullPath,\n                    data: [value, 'add'],\n                  })\n                }\n              } else {\n                $log.invalidPropertyName(\n                  id,\n                  this.constructor.name,\n                  propertyName,\n                  value,\n                  Array.isArray(propertyType) ? propertyType[0] : 'any'\n                )\n              }\n            }\n          }\n        }\n\n        sructure[propertyName] = new Function(\n          '__proxy',\n          'return function ' +\n            propertyName +\n            ' (position, value) { return __proxy.apply(this, arguments) };'\n        )(proxy)\n      } else {\n        proxy = function proxy(value) {\n          let search = []\n          let component = null\n          let propertyValue = null\n          let parentPath = ''\n          let fullPath = ''\n          let oldValue = null\n          let realVal = null\n\n          if (path) {\n            parentPath = path + '.' + name\n          } else {\n            parentPath = name\n          }\n          fullPath = parentPath + '.' + propertyName\n\n          if (typeof value === 'undefined') {\n            component = $db.store[model][id]\n            if (component) {\n              switch (true) {\n                case $metamodel.isClassName(propertyType):\n                  propertyValue = get(getStructureValue(model, id, fullPath))\n                  break\n                case propertyType === 'date':\n                  propertyValue = new Date(\n                    getStructureValue(model, id, fullPath)\n                  )\n                  break\n                case propertyType === 'json':\n                  propertyValue = getStructureValue(model, id, fullPath)\n                  propertyValue = JSON.parse(JSON.stringify(propertyValue))\n                  break\n                case $metamodel.isStructure(fullPath, model):\n                  propertyValue = addStructure(\n                    parentPath,\n                    propertyName,\n                    model,\n                    id\n                  )\n                  break\n                default:\n                  propertyValue = getStructureValue(model, id, fullPath)\n                  break\n              }\n              if (propertyValue === undefined && prop.default !== undefined) {\n                propertyValue = prop.default\n              }\n              return propertyValue\n            } else {\n              $log.destroyedComponentCall(fullPath, id)\n            }\n          } else {\n            if (propertyReadOnly) {\n              $log.readOnlyProperty(id, model, fullPath)\n            } else {\n              if ($metamodel.isValidType(value, propertyType)) {\n                search = $db.collections[model].find({\n                  _id: id,\n                })\n                if (search.length) {\n                  component = search[0]\n\n                  if ($history.isEnabled()) {\n                    oldValue = getStructureValue(model, id, fullPath)\n                  }\n\n                  switch (true) {\n                    case $metamodel.isClassName(propertyType):\n                      realVal = value.id()\n                      break\n                    case propertyType === 'date':\n                      realVal = value.toISOString()\n                      break\n                    default:\n                      realVal = value\n                      break\n                  }\n\n                  setStructureValue(model, id, fullPath, realVal)\n\n                  if ($history.isEnabled() && model.indexOf('_') !== 0) {\n                    $history.pushState({\n                      action: 'update',\n                      collection: model,\n                      id: id,\n                      field: fullPath,\n                      value: JSON.stringify(realVal),\n                      oldValue: JSON.stringify(oldValue),\n                    })\n                  }\n\n                  if (\n                    $helper.isRuntime() &&\n                    $helper.getRuntime().require('db')\n                  ) {\n                    $helper.getRuntime().require('db').update({\n                      collection: model,\n                      id: id,\n                      field: fullPath,\n                      value: realVal,\n                    })\n                  }\n\n                  // case of _Behavior\n                  if (model === '_Behavior') {\n                    $behavior.removeFromMemory(id)\n                  }\n\n                  // all elements\n                  if (fullPath.indexOf('[') !== -1) {\n                    $workflow.process({\n                      component: id,\n                      state: fullPath.replace(/\\[(\\d)*\\]/g, ''),\n                      data: [value],\n                    })\n                  }\n\n                  // the current element\n                  $workflow.process({\n                    component: id,\n                    state: fullPath,\n                    data: [value],\n                  })\n                }\n              } else {\n                $log.invalidPropertyName(\n                  id,\n                  model,\n                  fullPath,\n                  value,\n                  propertyType\n                )\n              }\n            }\n          }\n        }\n\n        sructure[propertyName] = new Function(\n          '__proxy',\n          'return function ' +\n            propertyName +\n            ' (value) { return __proxy.apply(this, arguments) };'\n        )(proxy)\n      }\n    })\n  }\n\n  return sructure\n}\n\n/**\n * @method addMethods\n * @param {String} model model name\n * @param {Function} Class Class\n * @param {String} classId name of the class\n * @private\n * @description Add methods to a component.\n * The call to these methods will invoke the workflow in order to check that inpouts / outputs are compliant with the model.\n */\nfunction addMethods(model, Class, classId) {\n  let methods = getMethods(model)\n\n  methods.forEach(function method(methodName) {\n    let paramsName = getParamNames(classId, methodName)\n    let params = paramsName.join(', ')\n    let paramsWithContext = ''\n\n    let proxy = function proxy() {\n      let result = null\n\n      result = $workflow.process({\n        component: this.id(),\n        state: methodName,\n        data: arguments,\n      })\n\n      return result\n    }\n\n    let proxyWithContext = function proxy() {\n      let result = null\n      let data = Array.prototype.slice.call(arguments)\n\n      data.shift()\n\n      if (arguments[0]) {\n        result = $workflow.process({\n          component: this.id(),\n          state: methodName,\n          data: data,\n          context: arguments[0],\n        })\n      } else {\n        $log.unknownContext(classId, methodName)\n      }\n\n      return result\n    }\n\n    if (params) {\n      paramsName.unshift('context')\n      paramsWithContext = paramsName.join(', ')\n\n      Class.prototype[methodName] = new Function(\n        '__proxy',\n        'return function ' +\n          methodName +\n          ' (' +\n          params +\n          ') { return __proxy.apply(this, arguments) };'\n      )(proxy)\n      if (methodName !== 'name') {\n        Class[methodName] = new Function(\n          '__proxy',\n          'return function ' +\n            methodName +\n            ' (' +\n            paramsWithContext +\n            ') { return __proxy.apply(this, arguments) };'\n        )(proxyWithContext)\n      }\n    } else {\n      Class.prototype[methodName] = new Function(\n        '__proxy',\n        'return function ' + methodName + ' () { return __proxy.apply(this) };'\n      )(proxy)\n      if (methodName !== 'name') {\n        Class[methodName] = new Function(\n          '__proxy',\n          'return function ' +\n            methodName +\n            ' (context) { return __proxy.apply(this, arguments) };'\n        )(proxyWithContext)\n      }\n    }\n  })\n}\n\n/**\n * @method addEvents\n * @param {String} model model name\n * @param {Function} Class Class\n * @param {String} classId name of the class\n * @private\n * @description Add events to a component.\n * The call to these methods will invoke the workflow in order to check that inpouts are compliant with the model.\n */\nfunction addEvents(model, Class, classId) {\n  let events = getEvents(model)\n  events.forEach(function event(methodName) {\n    let paramsName = getParamNames(classId, methodName)\n    let params = paramsName.join(', ')\n\n    let proxy = function proxy() {\n      let systems = []\n      let systemId = 'e89c617b6b15d24'\n      let data = []\n      let i = 0\n      let length = -1\n      let message = {}\n\n      if (classId === '_Channel') {\n        systems = $db.collections._System.find({\n          master: true,\n        })\n        if (systems.length) {\n          systemId = systems[0][$mson.ID]\n        }\n\n        message.from = systemId\n        length = arguments.length\n        for (i = 0; i < length; i++) {\n          data.push(arguments[i])\n        }\n        message.data = data\n        message.event = methodName\n\n        $db.collections._Message.insert(message)\n\n        $workflow.process({\n          component: this.id(),\n          state: 'send',\n          data: [\n            {\n              event: message.event,\n              from: message.from,\n              data: message.data,\n            },\n          ],\n        })\n      } else {\n        $workflow.process({\n          component: this.id(),\n          state: methodName,\n          data: arguments,\n        })\n      }\n    }\n    if (params) {\n      Class.prototype[methodName] = new Function(\n        '__proxy',\n        'return function ' +\n          methodName +\n          ' (' +\n          params +\n          ') { return __proxy.apply(this, arguments) };'\n      )(proxy)\n    } else {\n      Class.prototype[methodName] = new Function(\n        '__proxy',\n        'return function ' + methodName + ' () { return __proxy.apply(this) };'\n      )(proxy)\n    }\n  })\n}\n\n/**\n * @method addOn\n * @param {Function} Class Class\n * @param {String} classId name of the class\n * @private\n * @description Add a on method to a component to add behaviors to the component\n */\nfunction addOn(Class, classId) {\n  let proxy = function proxy(state, action, useCoreAPI, isCore) {\n    let behaviorId = ''\n    let currentState = ''\n    let context = null\n\n    // case of context\n    if (\n      useCoreAPI &&\n      useCoreAPI.constructor &&\n      useCoreAPI.constructor.name !== 'Boolean'\n    ) {\n      context = useCoreAPI\n      useCoreAPI = false\n      isCore = true\n    }\n\n    if (\n      $workflow.checkInput({\n        component: this,\n        methodName: 'on',\n        args: arguments,\n      })\n    ) {\n      if ($metamodel.isValidState(state, classId)) {\n        if (\n          !$metamodel.isEvent(state, classId) &&\n          !$metamodel.isProperty(state, classId) &&\n          !$metamodel.isLink(state, classId) &&\n          !$metamodel.isCollection(state, classId) &&\n          $db.collections._Behavior.find({\n            component: this.id(),\n            state: state,\n          }).length >= 1\n        ) {\n          $log.behaviorNotUnique(classId, state)\n        } else {\n          if ($workflow.checkInputNumbers(classId, state, action)) {\n            behaviorId = $behavior.add(\n              this.id(),\n              state,\n              action,\n              useCoreAPI,\n              isCore,\n              context\n            )\n\n            currentState = $state.get(this.id())\n            if (currentState && currentState.state === state) {\n              $workflow.process({\n                id: behaviorId,\n                data: currentState.value,\n              })\n            }\n          } else {\n            $log.invalidParamNumberMethodOn(\n              this.id(),\n              this.constructor.name,\n              state\n            )\n          }\n        }\n      } else {\n        $log.invalidStateOn(classId, state)\n      }\n    }\n    return behaviorId\n  }\n  Class.prototype.on = new Function(\n    '__proxy',\n    'return function on (state, action, useCoreAPI, isCore) { return __proxy.apply(this, arguments) };'\n  )(proxy)\n}\n\n/**\n * @method addOnClass\n * @param {Function} Class Class\n * @param {String} classId name of the class\n * @private\n * @description Add a on method to a class component to add behaviors to the class\n */\nfunction addOnClass(Class, classId) {\n  let proxy = function proxy(state, action, useCoreAPI, isCore) {\n    let behaviorId = ''\n    let currentState = ''\n    let context = null\n\n    // case of context\n    if (\n      useCoreAPI &&\n      useCoreAPI.constructor &&\n      useCoreAPI.constructor.name !== 'Boolean'\n    ) {\n      context = useCoreAPI\n      useCoreAPI = false\n      isCore = true\n    }\n    if (\n      $workflow.checkInput({\n        component: this,\n        methodName: 'on',\n        args: arguments,\n      })\n    ) {\n      if ($metamodel.isValidState(state, classId)) {\n        if (\n          !$metamodel.isEvent(state, classId) &&\n          !$metamodel.isProperty(state, classId) &&\n          !$metamodel.isLink(state, classId) &&\n          !$metamodel.isCollection(state, classId) &&\n          $db.collections._Behavior.find({\n            component: this.id(),\n            state: state,\n          }).length >= 1\n        ) {\n          $log.behaviorNotUnique(classId, state)\n        } else {\n          if ($workflow.checkInputNumbers(classId, state, action)) {\n            behaviorId = $behavior.add(\n              this.id(),\n              state,\n              action,\n              useCoreAPI,\n              isCore,\n              context\n            )\n\n            currentState = $state.get(this.id())\n            if (currentState && currentState.state === state) {\n              $workflow.process({\n                id: behaviorId,\n                data: currentState.value,\n              })\n            }\n          } else {\n            $log.invalidParamNumberMethodOn(\n              this.id(),\n              this.constructor.name,\n              state\n            )\n          }\n        }\n      } else {\n        $log.invalidStateOn(classId, state)\n      }\n    }\n    return behaviorId\n  }\n  Class.on = new Function(\n    '__proxy',\n    'return function on (state, action, useCoreAPI, isCore) { return __proxy.apply(this, arguments) };'\n  )(proxy)\n}\n\n/**\n * @method addOffClass\n * @param {Object} Class Class\n * @param {String} classId name of the class\n * @private\n * @description Add a off method to a class component to remove behaviors from the class\n */\nfunction addOffClass(Class, classId) {\n  let proxy = function proxy(state, behaviorId) {\n    if (\n      $workflow.checkInput({\n        component: this,\n        methodName: 'off',\n        args: arguments,\n      })\n    ) {\n      if ($metamodel.isValidState(state, classId)) {\n        $behavior.remove({\n          behaviorId: behaviorId,\n          componentId: classId,\n          state: state,\n        })\n      } else {\n        $log.invalidStateOff(classId, state)\n      }\n    }\n  }\n  Class.off = new Function(\n    '__proxy',\n    'return function off (state, behaviorId) { return __proxy.apply(this, arguments) };'\n  )(proxy)\n}\n\n/**\n * @method addDestroyClass\n * @param {Object} Class Class\n * @private\n * @description Add a destroy method to a class component to detroy the class and all the components of the same class\n */\nfunction addDestroyClass(Class) {\n  let proxy = function proxy() {\n    let id = this.id()\n    let result = []\n    let i = 0\n    let length = 0\n\n    // if not virtual component\n    if ($db.collections[id]) {\n      result = $db.collections[id].remove()\n    }\n\n    delete store[id]\n\n    // remove behaviors\n    $behavior.remove({\n      componentId: id,\n    })\n\n    length = result.length\n    for (i = 0; i < length; i++) {\n      // remove behaviors\n      $behavior.remove({\n        componentId: result[i],\n      })\n    }\n\n    $workflow.process({\n      component: id,\n      state: 'destroy',\n    })\n  }\n  Class.destroy = new Function(\n    '__proxy',\n    'return function destroy () { return __proxy.apply(this) };'\n  )(proxy)\n}\n\n/**\n * @method addRequireClass\n * @param {Object} Class Class\n * @private\n * @description Require a component\n */\nfunction addRequireClass(Class) {\n  let proxy = function proxy(id) {\n    return get(id)\n  }\n  Class.require = new Function(\n    '__proxy',\n    'return function require (id) { return __proxy.apply(this, arguments) };'\n  )(proxy)\n}\n\n/**\n * @method addInitClass\n * @param {Object} Class Class\n * @private\n * @description Init a class\n */\nfunction addInitClass(Class) {\n  let proxy = function proxy() {}\n  Class.init = new Function(\n    '__proxy',\n    'return function init (conf) { return __proxy.apply(this, arguments) };'\n  )(proxy)\n}\n\n/**\n * @method factory\n * @param {JSON} config configuration of the component\n * @returns {Component} the created component\n * @private\n * @description Create a component from its configuration\n */\nfunction factory(config) {\n  config = config || {}\n\n  let Class = {}\n  let classId = ''\n\n  if (typeof config.model === 'undefined') {\n    classId = $helper.generateId()\n  } else {\n    classId = config.model\n  }\n\n  Class = createClass(classId)\n\n  store[classId] = Class\n\n  addIdClass(Class, classId)\n\n  addProperties(config.model, Class, classId)\n  addMethods(config.model, Class, classId)\n  addEvents(config.model, Class, classId)\n\n  // add default properties/methods only if the component\n  // inherit from _Component\n  if ($metamodel.inheritFrom(classId, '_Component')) {\n    addOn(Class, classId)\n\n    addOnClass(Class, classId)\n    addOffClass(Class, classId)\n    addRequireClass(Class)\n    addInitClass(Class)\n    addDestroyClass(Class)\n  }\n\n  Object.freeze(Class)\n\n  return Class\n}\n\n/* Public methods */\n\n/**\n * @method get\n * @param {String} id of the component\n * @returns {Component} component\n * @description Get a component by its id\n */\nfunction get(id) {\n  return store[id]\n}\n\n/**\n * @method create\n * @param {Object} config <br>\n * {String} model model name <br>\n * @returns {Component}\n * @description Create a component from its configuration\n */\nfunction create(config) {\n  return factory(config)\n}\n\n/**\n * @method destroy\n * @param {String} id id of the component to destroy\n * @description Destroy a component from its id\n */\nfunction destroy(id) {\n  let component = store[id]\n  let classId = ''\n\n  if (component) {\n    delete store[id]\n    classId = component.constructor.name\n    $db.collections[classId].remove({\n      _id: id,\n    })\n\n    // remove behaviors\n    $behavior.remove({\n      componentId: id,\n    })\n\n    // case of Behavior\n    if (classId === '_Behavior') {\n      $behavior.removeFromMemory(id)\n    }\n  }\n}\n\n/**\n * @method removeFromMemory\n * @param {String} id id of the component\n * @description Remove a component with its id from the memory\n */\nfunction removeFromMemory(id) {\n  delete store[id]\n}\n\n/**\n * @method clear\n * @description Remove all the components store in the memory\n */\nfunction clear() {\n  store = {}\n}\n\nexport default {\n  get,\n  create,\n  destroy,\n  removeFromMemory,\n  clear,\n}\n","/*\n * System Runtime\n *\n * https://designfirst.io/systemruntime/\n *\n * Copyright 2022 Erwan Carriou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module db\n * @requires component\n * @requires metamodel\n * @requires helper\n * @requires log\n * @requires behavior\n * @requires state\n * @requires workflow\n * @requires mson\n * @requires history\n * @description This module manages System Runtime database.\n * System Runtime database is a micro NoSQL Database that contains:\n * - collections to store documents (schemas, types, components, ...) and\n * - APIs to import or export documents.\n *\n * System Runtime Database is closely linked to System Runtime metamodel and System Runtime components because:\n * - all operations done by System Runtime database must be compliant with the model before being finished,\n * - insert operation automatically creates a component and\n * - remove operation automatically destroy a component.\n */\n\nimport $component from './component.js'\nimport $metamodel from './metamodel.js'\nimport $helper from './helper.js'\nimport $log from './log.js'\nimport $history from './history.js'\nimport $behavior from './behavior.js'\nimport $state from './state.js'\nimport $workflow from './workflow.js'\nimport $mson from './mson.js'\n\n/* Private properties */\n\nlet collectionNames = []\nlet internalDB = [\n  '_Runtime',\n  '_Schema',\n  '_GeneratedSchema',\n  '_Model',\n  '_GeneratedModel',\n  '_Behavior',\n  '_Type',\n  '_Metamodel',\n  '_Database',\n  '_System',\n  '_Message',\n  '_Channel',\n  '_Logger',\n  '_History',\n]\nlet coreDb = [\n  '_Schema',\n  '_GeneratedSchema',\n  '_Logger',\n  '_Model',\n  '_GeneratedModel',\n  '_Type',\n  '_History',\n]\n\n/* Private methods */\n\n/**\n * @method dump\n * @returns {Object} the dump of the database. The dump is an object that contains: <br>\n * {Object} schemas the schemas store in the database <br>\n * {Object} types the types store in the database <br>\n * {Object} behaviors the behaviors store in the database <br>\n * {Object} components the components store in the database\n * @private\n * @description Dump the database\n */\nfunction dump() {\n  let dbDump = {}\n  let collectionName = ''\n  let behaviorId = ''\n  let typeId = ''\n  let type = null\n  let behavior = null\n  let schema = null\n  let model = null\n  let collection = null\n  let schemaId = ''\n  let modelId = ''\n  let length = 0\n  let i = 0\n  let id = ''\n\n  // schemas\n  dbDump.schemas = {}\n  if (collections._Schema.count()) {\n    for (schemaId in store._Schema) {\n      if (!store._Schema[schemaId][$mson.CORE]) {\n        schema = JSON.parse(JSON.stringify(store._Schema[schemaId]))\n        dbDump.schemas[schemaId] = schema\n      }\n    }\n  }\n\n  // models\n  dbDump.models = {}\n  if (collections._Model.count()) {\n    for (modelId in store._Model) {\n      if (!store._Model[modelId][$mson.CORE]) {\n        model = JSON.parse(JSON.stringify(store._Model[modelId]))\n        dbDump.models[modelId] = model\n      }\n    }\n  }\n\n  // types\n  dbDump.types = {}\n  if (collections._Type.count()) {\n    for (typeId in store._Type) {\n      if (!store._Type[typeId].core) {\n        type = JSON.parse(JSON.stringify(store._Type[typeId]))\n        dbDump.types[type.name] = type\n      }\n    }\n  }\n\n  // behaviors\n  dbDump.behaviors = {}\n  for (behaviorId in store._Behavior) {\n    if (!store._Behavior[behaviorId].core) {\n      behavior = JSON.parse(JSON.stringify(store._Behavior[behaviorId]))\n      dbDump.behaviors[behaviorId] = behavior\n    }\n  }\n\n  // components\n  dbDump.components = {}\n  length = collectionNames.length\n  for (i = 0; i < length; i++) {\n    collectionName = collectionNames[i]\n    if (collections[collectionName].count()) {\n      collection = JSON.parse(JSON.stringify(store[collectionName]))\n\n      for (id in collection) {\n        if (collection[id][$mson.CORE]) {\n          delete collection[id]\n        }\n      }\n\n      if (Object.keys(collection).length) {\n        dbDump.components[collectionName] = collection\n      }\n    }\n  }\n\n  return dbDump\n}\n\n/**\n * @class _Array\n * @private\n * @description Sub class to override sort method of Array Class\n */\nfunction _Array() {\n  let arr = []\n\n  /**\n   * @method sort\n   * @param {Function|Object} param the sort function or the sort query\n   * @returns {Array} the sorted array\n   * @description Override sort method\n   */\n  arr.sort = function sort(param) {\n    let field = ''\n    let arrCopy = []\n\n    // copy\n    arr.forEach(function (val) {\n      arrCopy.push(val)\n    })\n\n    if (param instanceof Function) {\n      arrCopy.sort(param)\n    } else {\n      field = Object.keys(param)[0]\n      arrCopy.sort(function (docA, docB) {\n        if (docA[field] < docB[field]) {\n          return param[field] === 1 ? -1 : 1\n        }\n        if (docA[field] > docB[field]) {\n          return param[field] === 1 ? 1 : -1\n        }\n        return 0\n      })\n    }\n\n    return arrCopy\n  }\n\n  return arr\n}\n\n_Array.prototype = []\n\n/**\n * @method isValidWithSelectors\n * @param {Object} field field on which made the search\n * @param {Object} query query object\n * @param {Object} document document object\n * @returns {Boolean} true if the query  used for the search is valid with the document\n * @private\n * @description Test if the query used for the search is valid with the document\n */\nfunction isValidWithSelectors(field, query, document) {\n  let result = true\n  let selector = ''\n\n  search: for (selector in query) {\n    switch (true) {\n      case selector === '$eq':\n        if (query[selector] instanceof RegExp) {\n          if (document[field].toString().match(query[selector]) === null) {\n            result = false\n            break search\n          }\n        } else {\n          if (document[field] !== query[selector]) {\n            result = false\n            break search\n          }\n        }\n        break\n      case selector === '$gt':\n        if (document[field] <= query[selector]) {\n          result = false\n          break search\n        }\n        break\n      case selector === '$gte':\n        if (document[field] < query[selector]) {\n          result = false\n          break search\n        }\n        break\n      case selector === '$lt':\n        if (document[field] >= query[selector]) {\n          result = false\n          break search\n        }\n        break\n      case selector === '$lte':\n        if (document[field] > query[selector]) {\n          result = false\n          break search\n        }\n        break\n      case selector === '$ne':\n        if (document[field] === query[selector]) {\n          result = false\n          break search\n        }\n        break\n      case selector === '$in':\n        if (\n          Array.isArray(query[selector]) &&\n          query[selector].indexOf(document[field]) === -1\n        ) {\n          result = false\n          break search\n        }\n        break\n      case selector === '$nin':\n        if (\n          Array.isArray(query[selector]) &&\n          query[selector].indexOf(document[field]) !== -1\n        ) {\n          result = false\n          break search\n        }\n        break\n      default:\n        break\n    }\n  }\n  return result\n}\n\n/**\n * @method isValid\n * @param {Object} query query object\n * @param {Object} document document object\n * @returns {Boolean} true if the query of search is valid with the document\n * @private\n * @description Test if the query of search is valid with the document\n */\nfunction isValid(query, document) {\n  let result = true\n  let findInArray = false\n  let field = ''\n  let i = 0\n  let length = 0\n\n  search: for (field in query) {\n    if (typeof document[field] !== 'undefined') {\n      switch (true) {\n        // regular expression\n        case query[field] instanceof RegExp:\n          if (Array.isArray(document[field]) && !Array.isArray(query[field])) {\n            length = document[field].length\n            for (i = 0; i < length; i++) {\n              if (document[field][i].toString().match(query[field]) !== null) {\n                findInArray = true\n                break search\n              }\n            }\n            result = findInArray\n          } else {\n            if (document[field].toString().match(query[field]) === null) {\n              result = false\n              break search\n            }\n          }\n          break\n\n        // query selectors\n        case query[field] instanceof Object && !Array.isArray(query[field]):\n          result = isValidWithSelectors(field, query[field], document)\n          break\n\n        // multiple query\n        case Array.isArray(document[field]) && !Array.isArray(query[field]):\n          if (document[field].indexOf(query[field]) === -1) {\n            result = false\n            break search\n          }\n          break\n\n        // simple query\n        default:\n          if (document[field] !== query[field]) {\n            result = false\n            break search\n          }\n          break\n      }\n    } else {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\n/**\n * @method impSystem\n * @param {JSON} importedSystem a System Runtime system to import\n * @returns {String} the id of the imported System Runtime system\n * @private\n * @description Import system into the database\n */\nfunction impSystem(importedSystem) {\n  let result = ''\n  let collectionName = ''\n  let componentId = ''\n  let typeName = ''\n  let schemaName = ''\n  let modelName = ''\n  let behaviorId = ''\n  let systems = []\n\n  if (importedSystem) {\n    // add types\n    for (typeName in importedSystem.types) {\n      $metamodel.type(importedSystem.types[typeName])\n    }\n\n    // add schemas\n    for (schemaName in importedSystem.schemas) {\n      $metamodel.schema(importedSystem.schemas[schemaName])\n    }\n\n    // add models\n    for (modelName in importedSystem.models) {\n      $metamodel.model(importedSystem.models[modelName])\n    }\n\n    $metamodel.create()\n\n    // add behaviors\n    for (behaviorId in importedSystem.behaviors) {\n      collections._Behavior.insert(importedSystem.behaviors[behaviorId])\n    }\n\n    $log.initDb()\n\n    // add components\n    for (collectionName in importedSystem.components) {\n      for (componentId in importedSystem.components[collectionName]) {\n        collections[collectionName].insert(\n          importedSystem.components[collectionName][componentId]\n        )\n      }\n    }\n\n    // reset info if already a master system\n    systems = collections._System.find({\n      master: true,\n    })\n    if (systems.length) {\n      if (systems[0][$mson.ID] === importedSystem[$mson.ID]) {\n        importedSystem.master = true\n      } else {\n        if (importedSystem.master) {\n          systems[0].master = false\n        }\n      }\n    }\n\n    // insert the system in DB\n    collections._System.insert(importedSystem)\n\n    result = importedSystem[$mson.ID]\n  }\n\n  return result\n}\n\n/**\n * @method expSystem\n * @returns {String} a stringified system\n * @private\n * @description Export a system from the database\n */\nfunction expSystem() {\n  let result = ''\n  let collectionName = ''\n  let systems = []\n  let id = null\n  let dbDump = null\n  let mastersystem = null\n  let exportedSystem = {}\n\n  // get id of the master system\n  systems = collections._System.find({\n    master: true,\n  })\n\n  if (systems.length) {\n    mastersystem = systems[0]\n    id = mastersystem[$mson.ID]\n\n    // prop\n    exportedSystem[$mson.ID] = id\n    exportedSystem.name = mastersystem.name\n    exportedSystem.description = mastersystem.description\n    exportedSystem.version = mastersystem.version\n    exportedSystem.master = true\n\n    // dump\n    dbDump = dump()\n    for (collectionName in dbDump) {\n      if (dbDump.hasOwnProperty(collectionName)) {\n        exportedSystem[collectionName] = dbDump[collectionName]\n      }\n    }\n\n    result = JSON.stringify(exportedSystem)\n  } else {\n    result = '{}'\n    $log.masterSystemNotFound()\n  }\n\n  return result\n}\n\n/**\n * @method exportSubsystem\n * @param {JSON} params parameters\n * @returns {String} a stringified sub-system\n * @private\n * @description Export a sub-system\n */\nfunction expSubsystem(params) {\n  let system = {}\n  let result = []\n  let defaultName = ''\n  let i = 0\n  let length = 0\n  let schema = null\n  let type = null\n  let model = null\n  let behavior = null\n  let component = null\n  let className = ''\n\n  // default values\n  result = collections._System.find({\n    master: true,\n  })\n  if (result.length) {\n    defaultName = result[0].name\n  }\n\n  system.name = params.name || 'sub_' + defaultName\n  system.version = params.version || '0.0.1'\n  system.description = params.description || ''\n\n  // schemas\n  system.schemas = {}\n  if (params.schemas) {\n    result = collections._Schema.find(params.schema)\n\n    length = result.length\n    for (i = 0; i < length; i++) {\n      schema = result[i]\n      if (!schema[$mson.CORE]) {\n        system.schemas[schema[$mson.ID]] = schema\n      }\n    }\n  }\n\n  // models\n  system.models = {}\n  if (params.models) {\n    result = collections._Model.find(params.models)\n\n    length = result.length\n    for (i = 0; i < length; i++) {\n      model = result[i]\n      if (!model[$mson.CORE]) {\n        system.models[model[$mson.ID]] = model\n      }\n    }\n  }\n\n  // types\n  system.types = {}\n  if (params.types) {\n    result = collections._Type.find(params.types)\n\n    length = result.length\n    for (i = 0; i < length; i++) {\n      type = result[i]\n      if (!type[$mson.CORE]) {\n        system.types[type[$mson.ID]] = type\n      }\n    }\n  }\n\n  // behaviors\n  system.behaviors = {}\n  if (params.behaviors) {\n    behavior = collections._Behavior.find(params.behaviors)\n\n    length = result.length\n    for (i = 0; i < length; i++) {\n      behavior = result[i]\n      if (!behavior.core) {\n        system.behaviors[behavior[$mson.ID]] = behavior\n      }\n    }\n  }\n\n  // components\n  system.components = {}\n  if (params.components) {\n    for (className in params.components) {\n      if (collections[className]) {\n        system.components[className] = {}\n\n        result = collections[className].find(params.components[className])\n        length = result.length\n        for (i = 0; i < length; i++) {\n          component = result[i]\n          system.components[className][component[$mson.ID]] = component\n        }\n      }\n    }\n  }\n\n  return JSON.stringify(system)\n}\n\n/* Public properties */\n\n/**\n * @property {JSON} store\n * @description System Runtime database store that lists all the collections\n */\nconst store = {}\n\n/**\n * @property {JSON} store\n * @description System Runtime database store that lists all the collections\n */\nconst collections = {}\n\n/* Public methods */\n\n/**\n * @class DatabaseCollection\n * @constructor\n * @param {String} name name of the new collection\n * @@description A collection of documents managed by System Runtime.\n * Internal collections manage core objects of System Runtime (schema, type, ...).\n * Public collections manage components of the same class.\n */\nlet DatabaseCollection = function DatabaseCollection(name) {\n  if ($metamodel.getSchema(name) || internalDB.indexOf(name) !== -1) {\n    store[name] = {}\n    this.name = name\n    if (internalDB.indexOf(name) === -1) {\n      collectionNames.push(name)\n    }\n  } else {\n    $log.invalidCollectionName(name)\n  }\n}\n\n/**\n * @method find\n * @param {Object|Array} query\n * @returns {Array} Array of documents that map the query\n * @description Find a document into the collection\n *\n * @example\n * $db.collections.Person.find({'name': 'laure'});\n * $db.collections.Person.find({'name': 'laure', 'age' : 24});\n * $db.collections.Person.find([{'name': 'rene'}, {'name': 'robert'}]);\n */\nDatabaseCollection.prototype.find = function find(query) {\n  let result = new _Array()\n  let resultId = {}\n  let id = ''\n  let document = {}\n\n  query = query || null\n\n  if (query && Object.keys(query).length) {\n    if (Array.isArray(query)) {\n      query.forEach(\n        function multiSearch(criteria) {\n          for (id in store[this.name]) {\n            document = store[this.name][id]\n            if (isValid(criteria, document)) {\n              if (typeof resultId[id] === 'undefined') {\n                result.push(document)\n                resultId[id] = true\n              }\n            }\n          }\n        }.bind(this)\n      )\n    } else {\n      for (id in store[this.name]) {\n        document = store[this.name][id]\n        if (isValid(query, document)) {\n          result.push(document)\n        }\n      }\n    }\n  } else {\n    for (id in store[this.name]) {\n      document = store[this.name][id]\n      result.push(document)\n    }\n  }\n\n  return result\n}\n\n/**\n * @method insert\n * @param {Object|Array} document a new object to add\n * @returns {Array} array of id created\n * @description Insert an new document into the collection.\n * Before inserting the document, System Runtime checks that the document is compliant\n * with its class definition.\n * Then, after inserting it, we create the component.\n *\n * @example\n * $db.collections.Person.insert({\n *      'name': 'bob',\n *      'firstName': 'Saint-Clar',\n *      'age': 43\n * });\n */\nDatabaseCollection.prototype.insert = function insert(document) {\n  let doc = []\n  let Component = null\n  let result = []\n\n  if (Array.isArray(document)) {\n    doc = document\n  } else {\n    doc.push(document)\n  }\n\n  doc.forEach(\n    function multiInsert(obj) {\n      let channels = []\n\n      switch (true) {\n        case obj === null:\n          $log.invalidDocumentOnDbInsert(obj, this.name)\n          break\n        case this.name === '_Schema':\n        case this.name === '_Logger':\n        case this.name === '_Model':\n        case this.name === '_Type':\n        case this.name === '_GeneratedModel':\n        case this.name === '_GeneratedSchema':\n        case $metamodel.isValidObject(obj, $metamodel.getModel(this.name)):\n          if (typeof obj[$mson.ID] === 'undefined') {\n            obj[$mson.ID] = $helper.generateId()\n          }\n\n          $metamodel.prepareObject(obj, $metamodel.getModel(this.name))\n\n          store[this.name][obj[$mson.ID]] = obj\n\n          result.push(obj[$mson.ID])\n\n          Component = $component.get(this.name)\n          if (Component) {\n            new Component(obj)\n          } else {\n            if ($history.isEnabled() && this.name.indexOf('_') !== 0) {\n              $history.pushState({\n                action: 'insert',\n                collection: this.name,\n                id: obj[$mson.ID],\n                value: JSON.stringify(obj),\n              })\n            }\n\n            if ($helper.isRuntime() && $helper.getRuntime().require('db')) {\n              $helper.getRuntime().require('db').insert({\n                collection: this.name,\n                document: obj,\n              })\n            }\n          }\n\n          if (this.name === '_Message') {\n            if ($helper.isRuntime()) {\n              channels = collections._Channel.find({})\n              let length = channels.length\n              for (let i = 0; i < length; i++) {\n                $helper.getRuntime().require(channels[i][$mson.ID])\n                $workflow.process({\n                  component: channels[i][$mson.ID],\n                  state: obj.event,\n                  data: obj.data,\n                })\n              }\n            }\n          }\n\n          break\n        default:\n          $log.invalidDocumentOnDbInsert(obj, this.name)\n          break\n      }\n    }.bind(this)\n  )\n\n  return result\n}\n\n/**\n * @method update\n * @param {Object|Array} query query to find the documents to update\n * @param {Object} update update to make\n * @param {Object} options\n * {Boolean} upsert true if we create a document when no document is found by the query\n * @returns {Array} array of id of updated documents\n * @description Update documents into a collection\n *\n * @example\n * $db.collections.Cars.update({'code': 'AZD-71'}, {'price': '10000$'});\n * $db.collections.Cars.update([{'code': 'AZD-71'}, {'code': 'AZD-65'}], {'price': '10000$'});\n * $db.collections.Cars.update({'code': 'AZD-71'}, {'price': '10000$'}, {'upsert': true});\n */\nDatabaseCollection.prototype.update = function update(query, update, options) {\n  let docs = this.find(query)\n  let result = []\n  let i = 0\n  let length = docs.length\n  let attributeName = ''\n  let schema = $metamodel.getModel(this.name)\n  let type = ''\n  let createdDocumentId = []\n\n  options = options || {}\n  if (typeof options.upsert === 'undefined') {\n    options.upsert = options.upsert || false\n  }\n\n  if (update) {\n    // upsert case\n    if (length === 0 && options.upsert) {\n      if (query[$mson.ID]) {\n        update[$mson.ID] = query[$mson.ID]\n      }\n      createdDocumentId = this.insert(update)\n      if (createdDocumentId.length === 1) {\n        result.push(createdDocumentId[0])\n      }\n    }\n\n    for (i = 0; i < length; i++) {\n      // case of update of _id\n      if (\n        typeof update[$mson.ID] !== 'undefined' &&\n        update[$mson.ID] !== docs[i][$mson.ID]\n      ) {\n        $log.updateUuid(\n          docs[i][$mson.ID],\n          update[$mson.ID],\n          typeof $component.get(update[$mson.ID]) !== 'undefined'\n        )\n      }\n\n      for (attributeName in update) {\n        if (typeof docs[i][attributeName.split('.')[0]] !== 'undefined') {\n          if (\n            this.name !== '_Schema' &&\n            this.name !== '_GeneratedSchema' &&\n            this.name !== '_Model' &&\n            this.name !== '_GeneratedModel'\n          ) {\n            // check type\n            type = ''\n            if (attributeName.indexOf('_') !== 0) {\n              if (attributeName.indexOf('.') !== -1) {\n                type = $metamodel.getModelPathType(this.name, attributeName)\n              } else {\n                type = schema[attributeName].type\n              }\n            } else {\n              if ($mson.SCHEMA_DEFINITION[attributeName]) {\n                type = $mson.SCHEMA_DEFINITION[attributeName].type\n              }\n            }\n            if (type) {\n              if ($metamodel.isValidType(update[attributeName], type, true)) {\n                if ($history.isEnabled() && this.name.indexOf('_') !== 0) {\n                  $history.pushState({\n                    action: 'update',\n                    collection: this.name,\n                    id: docs[i][$mson.ID],\n                    field: attributeName,\n                    value: JSON.stringify(update[attributeName]),\n                    oldValue: JSON.stringify(docs[i][attributeName]),\n                  })\n                }\n\n                docs[i][attributeName] = update[attributeName]\n\n                result.push(docs[i][$mson.ID])\n\n                if ($helper.isRuntime() && $helper.getRuntime().require('db')) {\n                  $helper.getRuntime().require('db').update({\n                    collection: this.name,\n                    id: docs[i][$mson.ID],\n                    field: attributeName,\n                    value: update[attributeName],\n                  })\n                }\n                if (type === 'array') {\n                  $workflow.process({\n                    component: docs[i][$mson.ID],\n                    state: attributeName,\n                    data: [update[attributeName], 'reset'],\n                  })\n                } else {\n                  $workflow.process({\n                    component: docs[i][$mson.ID],\n                    state: attributeName,\n                    data: [update[attributeName]],\n                  })\n                }\n              } else {\n                $log.invalidPropertyTypeOnDbUpdate(\n                  this.name,\n                  docs[i][$mson.ID],\n                  attributeName,\n                  update[attributeName],\n                  type\n                )\n              }\n            } else {\n              $log.unknownPropertyOnDbUpdate(\n                this.name,\n                attributeName,\n                docs[i][$mson.ID]\n              )\n            }\n          } else {\n            // TODO more check in case of schema update\n            if ($history.isEnabled() && this.name.indexOf('_') !== 0) {\n              $history.pushState({\n                action: 'update',\n                collection: this.name,\n                id: docs[i][$mson.ID],\n                field: attributeName,\n                value: JSON.stringify(update[attributeName]),\n                oldValue: JSON.stringify(docs[i][attributeName]),\n              })\n            }\n\n            docs[i][attributeName] = update[attributeName]\n\n            result.push(docs[i][$mson.ID])\n\n            if ($helper.isRuntime() && $helper.getRuntime().require('db')) {\n              $helper.getRuntime().require('db').update({\n                collection: this.name,\n                id: docs[i][$mson.ID],\n                field: attributeName,\n                value: update[attributeName],\n              })\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * @method remove\n * @param {Object|Array} query query to find the documents to remove\n * @returns {Array} list of documents id removed\n * @description Remove a document from the collection.\n * When a document is removed, the component is destroyed.\n *\n * @example\n * $db.collections.Cars.remove({'code': 'AZD-71'});\n * $db.collections.Cars.remove([{'code': 'AZD-71'}, {'code': 'AZD-65'}]);\n */\nDatabaseCollection.prototype.remove = function remove(query) {\n  let result = []\n  let id = ''\n  let component = null\n  let object = {}\n\n  query = query || null\n\n  if (query && Object.keys(query).length) {\n    if (Array.isArray(query)) {\n      query.forEach(\n        function multiRemove(criteria) {\n          for (id in store[this.name]) {\n            object = store[this.name][id]\n\n            if (isValid(criteria, object)) {\n              if ($history.isEnabled() && this.name.indexOf('_') !== 0) {\n                $history.pushState({\n                  action: 'remove',\n                  collection: this.name,\n                  id: id,\n                  oldValue: JSON.stringify(store[this.name][id]),\n                })\n              }\n\n              delete store[this.name][id]\n\n              result.push(id)\n\n              component = $component.get(id)\n              if (component) {\n                component.destroy()\n              }\n              if ($helper.isRuntime() && $helper.getRuntime().require('db')) {\n                $helper.getRuntime().require('db').remove({\n                  collection: this.name,\n                  id: id,\n                })\n              }\n            }\n          }\n        }.bind(this)\n      )\n    } else {\n      for (id in store[this.name]) {\n        object = store[this.name][id]\n\n        if (isValid(query, object)) {\n          if ($history.isEnabled() && this.name.indexOf('_') !== 0) {\n            $history.pushState({\n              action: 'remove',\n              collection: this.name,\n              id: id,\n              oldValue: JSON.stringify(store[this.name][id]),\n            })\n          }\n\n          delete store[this.name][id]\n\n          result.push(id)\n\n          component = $component.get(id)\n          if (component) {\n            component.destroy()\n          }\n          if ($helper.isRuntime() && $helper.getRuntime().require('db')) {\n            $helper.getRuntime().require('db').remove({\n              collection: this.name,\n              id: id,\n            })\n          }\n        }\n      }\n    }\n  } else {\n    for (id in store[this.name]) {\n      if ($history.isEnabled() && this.name.indexOf('_') !== 0) {\n        $history.pushState({\n          action: 'remove',\n          collection: this.name,\n          id: id,\n          oldValue: JSON.stringify(store[this.name][id]),\n        })\n      }\n\n      delete store[this.name][id]\n\n      if (coreDb.indexOf(this.name) === -1) {\n        component = $component.get(id)\n        if (component) {\n          component.destroy()\n        }\n      }\n      if ($helper.isRuntime() && $helper.getRuntime().require('db')) {\n        $helper.getRuntime().require('db').remove({\n          collection: this.name,\n          id: id,\n        })\n      }\n      result.push(id)\n    }\n  }\n\n  return result\n}\n\n/**\n * @method count\n * @returns {Number} number of documents in the collection\n * @description Count the number of documents in the collection\n */\nDatabaseCollection.prototype.count = function count() {\n  return store[this.name] ? Object.keys(store[this.name]).length : 0\n}\n\n/* Public methods */\n\n/**\n * @method collection\n * @param {String} name of the collection\n * @description Create a new DatabaseCollection\n */\nfunction collection(name) {\n  collections[name] = new DatabaseCollection(name)\n}\n\n/**\n * @method importSystem\n * @param {JSON} importedSystem a System Runtime system to import\n * @returns {String} the id of the imported System Runtime system\n * @description Import a system into the database\n */\nfunction importSystem(importedSystem) {\n  return impSystem(importedSystem)\n}\n\n/**\n * @method exportSystem\n * @param {JSON} params parameters\n * @returns {String} a stringified system\n * @description Export a system\n *\n * @example\n * $db.exportSystem(); // export all the system\n * $db.exportSystem({'schemas':{'name':'Person'}}); // filter export on schemas\n * $db.exportSystem({'types':{'name':'address'}}); // filter export on types\n * $db.exportSystem({'behaviors':{'component':'laure'}}); // filter export on behaviors\n * $db.exportSystem({'components':{'Person': {'country': 'France'}}}); // filter export on components\n * $db.exportSystem({'schemas':{'name':'Person'},'components':{'Person': {'country': 'France'}}}); // combine filters\n */\nfunction exportSystem(params) {\n  let result = ''\n\n  if (params) {\n    result = expSubsystem(params)\n  } else {\n    result = expSystem()\n  }\n  return result\n}\n\n/**\n * @method clear\n * @description Clear the database\n */\nfunction clear() {\n  let length = 0\n  let i = 0\n  let collectionName = ''\n\n  // remove collections\n  length = collectionNames.length\n  for (i = 0; i < length; i++) {\n    collectionName = collectionNames[i]\n    collections[collectionName].remove()\n  }\n\n  // remove internal collections\n  length = internalDB.length\n  for (i = 0; i < length; i++) {\n    collectionName = internalDB[i]\n    collections[collectionName].remove()\n  }\n}\n\n/**\n * @method init\n * @description Init the database\n */\nfunction init() {\n  let runtimeSystemId = ''\n  let runtimeSystem = null\n\n  runtimeSystem = collections._System.find({\n    _id: 'e89c617b6b15d24',\n  })[0]\n\n  // clear all the data in memory\n  clear()\n  $component.clear()\n  $metamodel.clear()\n  $state.clear()\n  $behavior.clear()\n  $history.clear()\n\n  // init metamodel\n  $metamodel.init()\n\n  // reimport System Runtime core system\n  runtimeSystemId = importSystem(runtimeSystem)\n  $component.get(runtimeSystemId).start()\n}\n\nexport default {\n  store,\n  collection,\n  collections,\n  importSystem,\n  exportSystem,\n  clear,\n  init,\n}\n","/*\n * System Runtime\n *\n * https://designfirst.io/systemruntime/\n *\n * Copyright 2022 Erwan Carriou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module runtime\n * @requires db\n * @requires component\n * @requires metamodel\n * @requires system\n * @requires helper\n * @description This module is the main module of System Runtime.\n * It inits System Runtime metamodel and loads System Runtime core system.\n */\n\nimport $db from './db.js'\nimport $component from './component.js'\nimport $metamodel from './metamodel.js'\nimport $system from './system.js'\n\n/* Private Property */\n\nlet sytemId = ''\nlet system = ''\nlet channel = null\n\n// init Metamodel\n$metamodel.init()\n\n// init runtime from a system\nsytemId = $db.importSystem($system.system)\n\nsystem = $component.get(sytemId)\nchannel = $component.get('channel')\n\nsystem.state('installed')\nchannel.$systemInstalled(sytemId)\nsystem.state('resolved')\nchannel.$systemResolved(sytemId)\nsystem.state('starting')\nchannel.$systemStarted(sytemId)\n\nsystem.start()\n\nsystem.state('active')\n\n/* Public property */\n\n/**\n * @property runtime\n * @type _Runtime\n * @description _Runtime instance\n */\nconst runtime = $component.get('runtime')\n\nexport default runtime\n","/*\n * System Runtime\n * \n * https://designfirst.io/systemruntime/\n * \n * Copyright 2022 Erwan Carriou\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* !! This file has been generated, do not edit it !! */\n\n/**\n * @module system\n * @description This module contains System Runtime core system.\n */\n\n/* Public properties */\n\n\n/**\n * System Runtime core system\n * @property {Object} system\n */\nexport default {system:\n{\n\t\"name\": \"system-runtime\",\n\t\"master\": false,\n\t\"version\": \"5.1.0\",\n\t\"description\": \"System Runtime\",\n\t\"schemas\": {\n\t\t\"1ac07185641fa9f\": {\n\t\t\t\"_name\": \"_Behavior\",\n\t\t\t\"_inherit\": [\n\t\t\t\t\"_Component\"\n\t\t\t],\n\t\t\t\"_core\": true,\n\t\t\t\"core\": \"property\",\n\t\t\t\"component\": \"property\",\n\t\t\t\"action\": \"property\",\n\t\t\t\"state\": \"property\",\n\t\t\t\"useCoreAPI\": \"property\",\n\t\t\t\"context\": \"property\",\n\t\t\t\"_id\": \"1ac07185641fa9f\"\n\t\t},\n\t\t\"104ad1f48518376\": {\n\t\t\t\"_id\": \"104ad1f48518376\",\n\t\t\t\"_name\": \"_Channel\",\n\t\t\t\"_inherit\": [\n\t\t\t\t\"_Component\"\n\t\t\t],\n\t\t\t\"_core\": true,\n\t\t\t\"send\": \"event\",\n\t\t\t\"$systemInstalled\": \"event\",\n\t\t\t\"$systemResolved\": \"event\",\n\t\t\t\"$systemStarted\": \"event\",\n\t\t\t\"$systemStopped\": \"event\",\n\t\t\t\"$systemUninstalled\": \"event\"\n\t\t},\n\t\t\"111df11e2b19fde\": {\n\t\t\t\"_id\": \"111df11e2b19fde\",\n\t\t\t\"_name\": \"_Component\",\n\t\t\t\"_inherit\": [],\n\t\t\t\"_core\": true,\n\t\t\t\"on\": \"method\",\n\t\t\t\"off\": \"method\",\n\t\t\t\"require\": \"method\",\n\t\t\t\"destroy\": \"method\",\n\t\t\t\"init\": \"method\",\n\t\t\t\"error\": \"event\"\n\t\t},\n\t\t\"1723516a30132ac\": {\n\t\t\t\"_name\": \"_Database\",\n\t\t\t\"_inherit\": [\n\t\t\t\t\"_Component\"\n\t\t\t],\n\t\t\t\"_core\": true,\n\t\t\t\"collections\": \"method\",\n\t\t\t\"insert\": \"event\",\n\t\t\t\"update\": \"event\",\n\t\t\t\"remove\": \"event\",\n\t\t\t\"_id\": \"1723516a30132ac\"\n\t\t},\n\t\t\"1268f1dddd1fea7\": {\n\t\t\t\"_name\": \"_Logger\",\n\t\t\t\"_core\": true,\n\t\t\t\"level\": \"property\",\n\t\t\t\"debug\": \"method\",\n\t\t\t\"info\": \"method\",\n\t\t\t\"warn\": \"method\",\n\t\t\t\"error\": \"method\",\n\t\t\t\"_id\": \"1268f1dddd1fea7\"\n\t\t},\n\t\t\"14caa1c46414ee1\": {\n\t\t\t\"_name\": \"_Message\",\n\t\t\t\"_inherit\": [\n\t\t\t\t\"_Component\"\n\t\t\t],\n\t\t\t\"_core\": true,\n\t\t\t\"event\": \"property\",\n\t\t\t\"from\": \"property\",\n\t\t\t\"data\": \"property\",\n\t\t\t\"_id\": \"14caa1c46414ee1\"\n\t\t},\n\t\t\"193f1166eb16609\": {\n\t\t\t\"_name\": \"_Metamodel\",\n\t\t\t\"_inherit\": [\n\t\t\t\t\"_Component\"\n\t\t\t],\n\t\t\t\"_core\": true,\n\t\t\t\"schema\": \"method\",\n\t\t\t\"model\": \"method\",\n\t\t\t\"type\": \"method\",\n\t\t\t\"create\": \"method\",\n\t\t\t\"_id\": \"193f1166eb16609\"\n\t\t},\n\t\t\"157931f7a31b61d\": {\n\t\t\t\"_id\": \"157931f7a31b61d\",\n\t\t\t\"_name\": \"_OSGi\",\n\t\t\t\"_inherit\": [\n\t\t\t\t\"_Component\"\n\t\t\t],\n\t\t\t\"_core\": true,\n\t\t\t\"install\": \"method\",\n\t\t\t\"uninstall\": \"method\",\n\t\t\t\"start\": \"method\",\n\t\t\t\"stop\": \"method\",\n\t\t\t\"status\": \"method\",\n\t\t\t\"bundle\": \"method\"\n\t\t},\n\t\t\"12e211d4cd120a6\": {\n\t\t\t\"_id\": \"12e211d4cd120a6\",\n\t\t\t\"_name\": \"_Runtime\",\n\t\t\t\"_inherit\": [\n\t\t\t\t\"_OSGi\"\n\t\t\t],\n\t\t\t\"_core\": true,\n\t\t\t\"version\": \"property\",\n\t\t\t\"system\": \"method\",\n\t\t\t\"message\": \"method\",\n\t\t\t\"ready\": \"event\"\n\t\t},\n\t\t\"1cb761fa4510dca\": {\n\t\t\t\"_id\": \"1cb761fa4510dca\",\n\t\t\t\"_name\": \"_System\",\n\t\t\t\"_inherit\": [\n\t\t\t\t\"_SystemOSGi\"\n\t\t\t],\n\t\t\t\"_core\": true,\n\t\t\t\"name\": \"property\",\n\t\t\t\"master\": \"property\",\n\t\t\t\"version\": \"property\",\n\t\t\t\"description\": \"property\",\n\t\t\t\"schemas\": \"property\",\n\t\t\t\"models\": \"property\",\n\t\t\t\"behaviors\": \"property\",\n\t\t\t\"types\": \"property\",\n\t\t\t\"components\": \"property\"\n\t\t},\n\t\t\"145fe10c7514298\": {\n\t\t\t\"_id\": \"145fe10c7514298\",\n\t\t\t\"_name\": \"_SystemOSGi\",\n\t\t\t\"_inherit\": [\n\t\t\t\t\"_Component\"\n\t\t\t],\n\t\t\t\"_core\": true,\n\t\t\t\"state\": \"property\",\n\t\t\t\"location\": \"property\",\n\t\t\t\"start\": \"method\",\n\t\t\t\"stop\": \"method\"\n\t\t},\n\t\t\"e018483e-4254-455c-83e9-99bb8dc3b233\": {\n\t\t\t\"_id\": \"e018483e-4254-455c-83e9-99bb8dc3b233\",\n\t\t\t\"_name\": \"_History\",\n\t\t\t\"_core\": true,\n\t\t\t\"_inherit\": [\n\t\t\t\t\"_Component\"\n\t\t\t],\n\t\t\t\"back\": \"method\",\n\t\t\t\"forward\": \"method\",\n\t\t\t\"from\": \"method\",\n\t\t\t\"dump\": \"method\",\n\t\t\t\"get\": \"method\",\n\t\t\t\"load\": \"method\",\n\t\t\t\"start\": \"method\",\n\t\t\t\"stop\": \"method\",\n\t\t\t\"clear\": \"method\"\n\t\t}\n\t},\n\t\"models\": {\n\t\t\"166971fd9d107fd\": {\n\t\t\t\"_name\": \"_Behavior\",\n\t\t\t\"_core\": true,\n\t\t\t\"context\": {\n\t\t\t\t\"type\": \"any\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": null\n\t\t\t},\n\t\t\t\"core\": {\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": false\n\t\t\t},\n\t\t\t\"useCoreAPI\": {\n\t\t\t\t\"type\": \"any\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": false\n\t\t\t},\n\t\t\t\"component\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": true,\n\t\t\t\t\"default\": \"\"\n\t\t\t},\n\t\t\t\"action\": {\n\t\t\t\t\"type\": \"javascript\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": true,\n\t\t\t\t\"default\": \"\"\n\t\t\t},\n\t\t\t\"state\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": true,\n\t\t\t\t\"default\": \"\"\n\t\t\t},\n\t\t\t\"_id\": \"166971fd9d107fd\"\n\t\t},\n\t\t\"135c71078810af2\": {\n\t\t\t\"_id\": \"135c71078810af2\",\n\t\t\t\"_name\": \"_Channel\",\n\t\t\t\"_core\": true,\n\t\t\t\"send\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"message\",\n\t\t\t\t\t\t\"type\": \"message\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"$systemInstalled\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\t\"default\": \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"$systemResolved\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\t\"default\": \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"$systemUninstalled\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\t\"default\": \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"$systemStarted\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\t\"default\": \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"$systemStopped\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\t\"default\": \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"123751cb591de26\": {\n\t\t\t\"_id\": \"123751cb591de26\",\n\t\t\t\"_name\": \"_Component\",\n\t\t\t\"_core\": true,\n\t\t\t\"on\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"state\",\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"action\",\n\t\t\t\t\t\t\"type\": \"function\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"useCoreAPI\",\n\t\t\t\t\t\t\"type\": \"any\",\n\t\t\t\t\t\t\"mandatory\": false,\n\t\t\t\t\t\t\"default\": false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"isCore\",\n\t\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\t\"mandatory\": false,\n\t\t\t\t\t\t\"default\": false\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"off\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"state\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"mandatory\": false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"behaviorId\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"mandatory\": false\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"require\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"destroy\": {\n\t\t\t\t\"params\": []\n\t\t\t},\n\t\t\t\"init\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"document\",\n\t\t\t\t\t\t\"type\": \"object\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"error\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"e\",\n\t\t\t\t\t\t\"type\": \"errorInfo\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"18a51169d7112d4\": {\n\t\t\t\"_name\": \"_Database\",\n\t\t\t\"_core\": true,\n\t\t\t\"collections\": {\n\t\t\t\t\"result\": \"object\"\n\t\t\t},\n\t\t\t\"insert\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"event\",\n\t\t\t\t\t\t\"type\": \"dbInsertEvent\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"update\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"event\",\n\t\t\t\t\t\t\"type\": \"dbUpdateEvent\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"remove\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"event\",\n\t\t\t\t\t\t\"type\": \"dbRemoveEvent\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"_id\": \"18a51169d7112d4\"\n\t\t},\n\t\t\"16b9d1ac2216ffe\": {\n\t\t\t\"_id\": \"16b9d1ac2216ffe\",\n\t\t\t\"_name\": \"_Logger\",\n\t\t\t\"_core\": true,\n\t\t\t\"level\": {\n\t\t\t\t\"type\": \"log\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": \"warn\"\n\t\t\t},\n\t\t\t\"debug\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"message\",\n\t\t\t\t\t\t\"type\": \"any\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"info\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"message\",\n\t\t\t\t\t\t\"type\": \"any\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"warn\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"message\",\n\t\t\t\t\t\t\"type\": \"any\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"error\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"message\",\n\t\t\t\t\t\t\"type\": \"any\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t},\n\t\t\"1d9b6139411aa91\": {\n\t\t\t\"_name\": \"_Message\",\n\t\t\t\"_core\": true,\n\t\t\t\"event\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": true,\n\t\t\t\t\"default\": \"\"\n\t\t\t},\n\t\t\t\"from\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": true,\n\t\t\t\t\"default\": \"\"\n\t\t\t},\n\t\t\t\"data\": {\n\t\t\t\t\"type\": \"array\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": true,\n\t\t\t\t\"default\": []\n\t\t\t},\n\t\t\t\"_id\": \"1d9b6139411aa91\"\n\t\t},\n\t\t\"1628c13c22152e6\": {\n\t\t\t\"_name\": \"_Metamodel\",\n\t\t\t\"_core\": true,\n\t\t\t\"schema\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"name\",\n\t\t\t\t\t\t\"type\": \"any\",\n\t\t\t\t\t\t\"default\": \"\",\n\t\t\t\t\t\t\"mandatory\": false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"schema\",\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"default\": {},\n\t\t\t\t\t\t\"mandatory\": false\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"result\": \"any\"\n\t\t\t},\n\t\t\t\"model\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"name\",\n\t\t\t\t\t\t\"type\": \"any\",\n\t\t\t\t\t\t\"default\": \"\",\n\t\t\t\t\t\t\"mandatory\": false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"model\",\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"default\": {},\n\t\t\t\t\t\t\"mandatory\": false\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"result\": \"any\"\n\t\t\t},\n\t\t\t\"type\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"name\",\n\t\t\t\t\t\t\"type\": \"any\",\n\t\t\t\t\t\t\"default\": \"\",\n\t\t\t\t\t\t\"mandatory\": false\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"type\",\n\t\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\t\"default\": {},\n\t\t\t\t\t\t\"mandatory\": false\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"result\": \"any\"\n\t\t\t},\n\t\t\t\"create\": {\n\t\t\t\t\"params\": []\n\t\t\t},\n\t\t\t\"_id\": \"1628c13c22152e6\"\n\t\t},\n\t\t\"100b91ed2211b15\": {\n\t\t\t\"_id\": \"100b91ed2211b15\",\n\t\t\t\"_name\": \"_OSGi\",\n\t\t\t\"install\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"url\",\n\t\t\t\t\t\t\"type\": \"any\",\n\t\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\t\"default\": \"\"\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"async\",\n\t\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\t\"mandatory\": false,\n\t\t\t\t\t\t\"default\": true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"result\": \"string\"\n\t\t\t},\n\t\t\t\"uninstall\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\t\"default\": \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"start\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\t\"default\": \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"stop\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"id\",\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\t\"default\": \"\"\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"status\": {\n\t\t\t\t\"result\": \"object\"\n\t\t\t},\n\t\t\t\"_core\": true,\n\t\t\t\"bundle\": {\n\t\t\t\t\"result\": \"string\"\n\t\t\t}\n\t\t},\n\t\t\"14c7c105b31a160\": {\n\t\t\t\"_id\": \"14c7c105b31a160\",\n\t\t\t\"_name\": \"_Runtime\",\n\t\t\t\"_core\": true,\n\t\t\t\"version\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"readOnly\": true,\n\t\t\t\t\"mandatory\": true,\n\t\t\t\t\"default\": \"5.1.0\"\n\t\t\t},\n\t\t\t\"system\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"params\",\n\t\t\t\t\t\t\"type\": \"any\",\n\t\t\t\t\t\t\"mandatory\": false\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"result\": \"object\"\n\t\t\t},\n\t\t\t\"message\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"msg\",\n\t\t\t\t\t\t\"type\": \"message\",\n\t\t\t\t\t\t\"mandatory\": true\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"ready\": {}\n\t\t},\n\t\t\"170521b88614387\": {\n\t\t\t\"_name\": \"_System\",\n\t\t\t\"_core\": true,\n\t\t\t\"name\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": true,\n\t\t\t\t\"default\": \"\"\n\t\t\t},\n\t\t\t\"master\": {\n\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": false\n\t\t\t},\n\t\t\t\"version\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": \"0.0.1\"\n\t\t\t},\n\t\t\t\"description\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": \"\"\n\t\t\t},\n\t\t\t\"schemas\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": {}\n\t\t\t},\n\t\t\t\"models\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": {}\n\t\t\t},\n\t\t\t\"behaviors\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": {}\n\t\t\t},\n\t\t\t\"types\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": {}\n\t\t\t},\n\t\t\t\"components\": {\n\t\t\t\t\"type\": \"object\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": {}\n\t\t\t},\n\t\t\t\"_id\": \"170521b88614387\"\n\t\t},\n\t\t\"1b2811b092143f5\": {\n\t\t\t\"_id\": \"1b2811b092143f5\",\n\t\t\t\"_name\": \"_SystemOSGi\",\n\t\t\t\"start\": {},\n\t\t\t\"stop\": {},\n\t\t\t\"_core\": true,\n\t\t\t\"state\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": \"none\"\n\t\t\t},\n\t\t\t\"location\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"mandatory\": false,\n\t\t\t\t\"default\": \"\"\n\t\t\t}\n\t\t},\n\t\t\"bd8d7e02-cd1f-4e4e-857f-077d6425cc1a\": {\n\t\t\t\"_id\": \"bd8d7e02-cd1f-4e4e-857f-077d6425cc1a\",\n\t\t\t\"_name\": \"_History\",\n\t\t\t\"_description\": \"\",\n\t\t\t\"back\": {\n\t\t\t\t\"result\": \"number\"\n\t\t\t},\n\t\t\t\"forward\": {\n\t\t\t\t\"result\": \"number\"\n\t\t\t},\n\t\t\t\"dump\": {\n\t\t\t\t\"result\": \"string\"\n\t\t\t},\n\t\t\t\"_core\": true,\n\t\t\t\"from\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"index\",\n\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\t\"default\": -1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"result\": \"any\"\n\t\t\t},\n\t\t\t\"get\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"index\",\n\t\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\t\"default\": -1\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"result\": \"object\"\n\t\t\t},\n\t\t\t\"load\": {\n\t\t\t\t\"params\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"name\": \"dump\",\n\t\t\t\t\t\t\"type\": \"any\",\n\t\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\t\"default\": \"\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"result\": \"boolean\"\n\t\t\t},\n\t\t\t\"start\": {\n\t\t\t\t\"result\": \"any\"\n\t\t\t},\n\t\t\t\"stop\": {\n\t\t\t\t\"result\": \"any\"\n\t\t\t},\n\t\t\t\"clear\": {\n\t\t\t\t\"result\": \"any\"\n\t\t\t}\n\t\t}\n\t},\n\t\"behaviors\": {\n\t\t\"12e491859c13918\": {\n\t\t\t\"_id\": \"12e491859c13918\",\n\t\t\t\"component\": \"_Channel\",\n\t\t\t\"state\": \"$systemStarted\",\n\t\t\t\"action\": \"function $systemStarted(id) { \\n  let systems = null;\\n    \\n  if (id !== 'e89c617b6b15d24') {\\n    if (typeof document !== 'undefined') {\\n      systems = document.querySelectorAll('link[rel=system]');\\n         \\n      if ($state.get('runtime') && $state.get('runtime').state === 'ready') {    \\n      } else {\\n        if (systems.length + 1 === $db.collections._System.count()) {\\n          $component.get('runtime').ready();\\n        }\\n      }\\n    }\\n  }\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"1e9021bd4e1bc6e\": {\n\t\t\t\"_id\": \"1e9021bd4e1bc6e\",\n\t\t\t\"component\": \"_Channel\",\n\t\t\t\"state\": \"$systemInstalled\",\n\t\t\t\"action\": \"function $systemInstalled(id) {\\n  let systems = null,\\n    dependencies = [],\\n    master = [],\\n    canStart = true;\\n\\n  if (id !== 'e89c617b6b15d24') {\\n    // if all systems are installed\\n    systems = $db.collections._System.find({});\\n\\n    systems.forEach(function (system) {\\n      let sys = this.require(system._id);\\n      if (sys && sys.state && sys.state() === 'none') {\\n        canStart = false;\\n      }\\n    }.bind(this));\\n\\n    // start all the systems\\n    if (canStart) {\\n      dependencies = $db.collections._System.find({\\n        'master': false\\n      });\\n\\n      dependencies.forEach(function (dep) {\\n        let system = this.require(dep._id);\\n        channel = this.require('channel');\\n\\n        if (system.state() === 'resolved') {\\n          system.state('starting');\\n          system.start();\\n          channel.$systemStarted(dep._id);\\n          system.state('active');\\n        }\\n      }.bind(this));\\n\\n      master = $db.collections._System.find({\\n        'master': true\\n      });\\n\\n      master.forEach(function (dep) {\\n        let system = this.require(dep._id);\\n        channel = this.require('channel');\\n\\n        if (system && system.state && system.state() === 'resolved') {\\n          system.state('starting');\\n          system.start();\\n          channel.$systemStarted(dep._id);\\n          system.state('active');\\n        }\\n      }.bind(this));\\n    }\\n  }\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"1ba721201114b6b\": {\n\t\t\t\"_id\": \"1ba721201114b6b\",\n\t\t\t\"component\": \"_Component\",\n\t\t\t\"state\": \"destroy\",\n\t\t\t\"action\": \"function destroy() {\\n  $component.destroy(this.id());\\n}\",\n\t\t\t\"core\": true,\n\t\t\t\"useCoreAPI\": true\n\t\t},\n\t\t\"15486186f41a48c\": {\n\t\t\t\"_id\": \"15486186f41a48c\",\n\t\t\t\"component\": \"_Component\",\n\t\t\t\"state\": \"off\",\n\t\t\t\"action\": \"function off(state, behaviorId) {\\n  let args = [],\\n    i = 0,\\n    numInjectedParams = 9,\\n    length = arguments.length;\\n\\n  if ($helper.isOnNode()) {\\n    numInjectedParams = numInjectedParams +1;\\n  }\\n\\n  for (i = 0; i < length - numInjectedParams; i++) {\\n    args.push(arguments[i]);\\n  }\\n\\n  if ($workflow.checkInput({\\n    \\\"component\\\": this,\\n    \\\"methodName\\\": \\\"off\\\",\\n    \\\"args\\\": args\\n  })) {\\n\\n    if (state || behaviorId) {\\n      if ($metamodel.isValidState(state, this.constructor.name)) {\\n        $behavior.remove({\\n          \\\"behaviorId\\\": behaviorId,\\n          \\\"componentId\\\": this.id(),\\n          \\\"state\\\": state\\n        });\\n      } else {\\n        this.require('logger').warn(\\\"invoke \\\\'off\\\\' method of component '\\\" + this.id() + \\\"' with an invalid state '\\\" + state + \\\"'\\\");\\n      }\\n    } else {\\n      $behavior.remove({\\n        \\\"componentId\\\": this.id()\\n      });\\n    }\\n  }\\n}\",\n\t\t\t\"core\": true,\n\t\t\t\"useCoreAPI\": true\n\t\t},\n\t\t\"1da0a17878104c3\": {\n\t\t\t\"_id\": \"1da0a17878104c3\",\n\t\t\t\"component\": \"_Component\",\n\t\t\t\"state\": \"require\",\n\t\t\t\"action\": \"function require(id) {\\n  return $component.get(id);\\n}\",\n\t\t\t\"core\": true,\n\t\t\t\"useCoreAPI\": true\n\t\t},\n\t\t\"1a5111d17a1800c\": {\n\t\t\t\"_id\": \"1a5111d17a1800c\",\n\t\t\t\"component\": \"_Database\",\n\t\t\t\"state\": \"collections\",\n\t\t\t\"action\": \"function collections() {\\n  let result = {},\\n    collectionName = '';\\n\\n  for (collectionName in $db.store) {\\n    if ($db.store.hasOwnProperty(collectionName)) {\\n      result[collectionName] = $db.collections[collectionName];\\n    }\\n  }\\n  return result;\\n}\",\n\t\t\t\"core\": true,\n\t\t\t\"useCoreAPI\": true\n\t\t},\n\t\t\"1d993108fa18ef2\": {\n\t\t\t\"_id\": \"1d993108fa18ef2\",\n\t\t\t\"component\": \"_Logger\",\n\t\t\t\"state\": \"debug\",\n\t\t\t\"action\": \"function debug(message) {\\n  if (this.level() === 'debug') {\\n    console.log('runtime: ' + message);\\n  }\\n}\",\n\t\t\t\"core\": true\n\t\t},\n\t\t\"1a37a188e11fe73\": {\n\t\t\t\"_id\": \"1a37a188e11fe73\",\n\t\t\t\"component\": \"_Logger\",\n\t\t\t\"state\": \"error\",\n\t\t\t\"action\": \"function error(message) {\\n  if (this.level() === 'info' || this.level() === 'warn' || this.level() === 'debug' || this.level() === 'error') {\\n    console.error('runtime: ' + message);\\n  }\\n}\",\n\t\t\t\"core\": true\n\t\t},\n\t\t\"1edd21e12a16534\": {\n\t\t\t\"_id\": \"1edd21e12a16534\",\n\t\t\t\"component\": \"_Logger\",\n\t\t\t\"state\": \"info\",\n\t\t\t\"action\": \"function info(message) {\\n  if (this.level() === 'info' || this.level() === 'debug') {\\n    console.info('runtime: ' + message);\\n  }\\n}\",\n\t\t\t\"core\": true\n\t\t},\n\t\t\"141f2143d3122a4\": {\n\t\t\t\"_id\": \"141f2143d3122a4\",\n\t\t\t\"component\": \"_Logger\",\n\t\t\t\"state\": \"level\",\n\t\t\t\"action\": \"function level(val) {\\n  $log.level(val);\\n}\",\n\t\t\t\"core\": true,\n\t\t\t\"useCoreAPI\": true\n\t\t},\n\t\t\"192401bab21304e\": {\n\t\t\t\"_id\": \"192401bab21304e\",\n\t\t\t\"component\": \"_Logger\",\n\t\t\t\"state\": \"warn\",\n\t\t\t\"action\": \"function warn(message) {\\n  if (this.level() === 'info' || this.level() === 'warn' || this.level() === 'debug') {\\n    console.warn('runtime: ' + message);\\n  }\\n}\",\n\t\t\t\"core\": true\n\t\t},\n\t\t\"11fc715e2f1a31e\": {\n\t\t\t\"_id\": \"11fc715e2f1a31e\",\n\t\t\t\"component\": \"_Metamodel\",\n\t\t\t\"state\": \"create\",\n\t\t\t\"action\": \"function create() {\\n  $metamodel.create();\\n}\",\n\t\t\t\"core\": true,\n\t\t\t\"useCoreAPI\": true\n\t\t},\n\t\t\"1232f1f107142cf\": {\n\t\t\t\"_id\": \"1232f1f107142cf\",\n\t\t\t\"component\": \"_Metamodel\",\n\t\t\t\"state\": \"model\",\n\t\t\t\"action\": \"function model(name, model) {\\n  return $metamodel.model(name, model);\\n}\",\n\t\t\t\"core\": true,\n\t\t\t\"useCoreAPI\": true\n\t\t},\n\t\t\"1365412f69153d2\": {\n\t\t\t\"_id\": \"1365412f69153d2\",\n\t\t\t\"component\": \"_Metamodel\",\n\t\t\t\"state\": \"schema\",\n\t\t\t\"action\": \"function schema(name, schema) {\\n  return $metamodel.schema(name, schema);\\n}\",\n\t\t\t\"core\": true,\n\t\t\t\"useCoreAPI\": true\n\t\t},\n\t\t\"194db147fe161a2\": {\n\t\t\t\"_id\": \"194db147fe161a2\",\n\t\t\t\"component\": \"_Metamodel\",\n\t\t\t\"state\": \"type\",\n\t\t\t\"action\": \"function type(name, type) {\\n  return $metamodel.type(name, type);\\n}\",\n\t\t\t\"core\": true,\n\t\t\t\"useCoreAPI\": true\n\t\t},\n\t\t\"1ef951f1411b895\": {\n\t\t\t\"_id\": \"1ef951f1411b895\",\n\t\t\t\"component\": \"_OSGi\",\n\t\t\t\"state\": \"install\",\n\t\t\t\"action\": \"function install(url, async) {\\n  let importedSystem = null,\\n    system = {},\\n    systemId = '',\\n    callbackLoad = null,\\n    xhr = null,\\n    result = '',\\n    channel = $component.get('channel');\\n\\n  if (typeof url === 'object') {\\n    importedSystem = url;\\n  } else {\\n    if (url.indexOf('{') === 0) {\\n      importedSystem = JSON.parse(url);\\n    }\\n  }\\n\\n  if (importedSystem) {\\n    systemId = $db.importSystem(importedSystem);\\n    if (systemId) {\\n      system = this.require(systemId);\\n\\n      if (typeof url === 'string') {\\n        system.location(url);\\n      }\\n      system.state('installed');\\n      channel.$systemInstalled(systemId);\\n      system.state('resolved');\\n      channel.$systemResolved(systemId);\\n\\n      result = systemId;\\n    }\\n  } else {\\n    if (typeof global !== 'undefined' && typeof window === 'undefined') {\\n      if (url.indexOf('.json') !== -1) {\\n        if (typeof global.process.env.PWD === 'undefined') {\\n          system = require(global.process.cwd() + '/' + url);\\n        } else {\\n          system = require(global.process.env.PWD + '/' + url);\\n        }\\n      } else {\\n        system = require(url);\\n      }\\n      systemId = $db.importSystem(system);\\n      system = this.require(systemId);\\n\\n      if (typeof url === 'string') {\\n        system.location(url);\\n      }\\n      system.state('installed');\\n      channel.$systemInstalled(systemId);\\n      system.state('resolved');\\n      channel.$systemResolved(systemId);\\n\\n      result = systemId;\\n    } else {\\n      xhr = new XMLHttpRequest();\\n      callbackLoad = function callbackLoad(system, url) {\\n        let sysId = $db.importSystem(system),\\n          sys = $component.get(sysId),\\n          channel = $component.get('channel');\\n\\n        if (typeof url === 'string') {\\n          sys.location(url);\\n        }\\n        sys.state('installed');\\n        channel.$systemInstalled(sysId);\\n        sys.state('resolved');\\n        channel.$systemResolved(sysId);\\n\\n        result = sysId;\\n      };\\n\\n      if (async) {\\n        xhr.open('GET', url, true);\\n        xhr.onreadystatechange = function () {\\n          if (xhr.readyState === 4) {\\n            if (xhr.status === 200 || xhr.status === 0) {\\n              if (xhr.response !== '') {\\n                callbackLoad(JSON.parse(xhr.response), url);\\n              }\\n            }\\n          }\\n        };\\n        xhr.send(null);\\n      } else {\\n        xhr.open('GET', url, false);\\n        xhr.send(null);\\n        if (xhr.status === 200 || xhr.status === 0) {\\n          callbackLoad(JSON.parse(xhr.response), url);\\n        }\\n      }\\n    }\\n  }\\n  return result;\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"14c1517b711cb78\": {\n\t\t\t\"_id\": \"14c1517b711cb78\",\n\t\t\t\"component\": \"_OSGi\",\n\t\t\t\"state\": \"uninstall\",\n\t\t\t\"action\": \"function uninstall(id) {\\n  let search = {},\\n    system = null,\\n    behaviorId = '',\\n    collection = '',\\n    componentId = '',\\n    length = 0,\\n    i = 0,\\n    coreComponents = ['admin', 'channel', 'db', 'logger', 'metamodel', 'runtime'];\\n\\n  search = $db.collections._System.find({\\n    '_id': id\\n  });\\n\\n  if (search.length) {\\n    system = search[0];\\n    // remove behaviors\\n    if (system.behaviors) {\\n      for (behaviorId in system.behaviors) {\\n        $db.collections._Behavior.remove({\\n          '_id': system.behaviors[behaviorId]._id\\n        });\\n      }\\n    }\\n    // remove components\\n    if (system.components) {\\n      for (collection in system.components) {\\n        for (componentId in system.components[collection]) {\\n          if (coreComponents.indexOf(componentId) === -1) {\\n            $db.collections[collection].remove({\\n              '_id': componentId\\n            });\\n          }\\n        }\\n      }\\n    }\\n  }\\n  if (this.require(id) && this.require(id).state) {\\n    this.require(id).state('uninstalled');\\n    this.require('channel').$systemUninstalled(id);\\n  }\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"105f219c6813643\": {\n\t\t\t\"_id\": \"105f219c6813643\",\n\t\t\t\"component\": \"_OSGi\",\n\t\t\t\"state\": \"start\",\n\t\t\t\"action\": \"function start(id) {\\n  let system = this.require(id),\\n    channel = this.require('channel');\\n\\n  if (system && system.state() === 'resolved' || system.state() === 'installed') {\\n    system.state('starting');\\n    if (system.start) {\\n      system.start();\\n    }\\n    channel.$systemStarted(id);\\n    system.state('active');\\n  }\\n}\",\n\t\t\t\"useCoreAPI\": false,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"1a81a1f00d17269\": {\n\t\t\t\"_id\": \"1a81a1f00d17269\",\n\t\t\t\"component\": \"_OSGi\",\n\t\t\t\"state\": \"stop\",\n\t\t\t\"action\": \"function stop(id) {\\n  let system = this.require(id),\\n    channel = this.require('channel');\\n\\n  if (system && system.state() === 'active') {\\n    system.state('stopping');\\n    if (system.stop) {\\n      system.stop();\\n    }\\n    channel.$systemStopped(id);\\n    system.state('resolved');\\n    channel.$systemResolved(id);\\n  }\\n}\",\n\t\t\t\"useCoreAPI\": false,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"116851b602128d1\": {\n\t\t\t\"_id\": \"116851b602128d1\",\n\t\t\t\"component\": \"_OSGi\",\n\t\t\t\"state\": \"status\",\n\t\t\t\"action\": \"function status() {\\n  let result = {},\\n    system = null,\\n    length = 0,\\n    i = 0;\\n\\n  systems = $db.collections._System.find({});\\n\\n  length = systems.length;\\n  for (i = 0; i < length; i++) {\\n    system = systems[i];\\n    result[system.name] = {\\n      'id': system._id,\\n      'state': system.state,\\n      'name': system.name,\\n      'version': system.version,\\n      'location': system.location,\\n      'master': system.master\\n    };\\n  }\\n\\n  return result;\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"19cf317d7217331\": {\n\t\t\t\"_id\": \"19cf317d7217331\",\n\t\t\t\"component\": \"_OSGi\",\n\t\t\t\"state\": \"bundle\",\n\t\t\t\"action\": \"function bundle() { \\n\\tlet result = $db.exportSystem();\\n\\treturn result;\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"13010167f313f87\": {\n\t\t\t\"_id\": \"13010167f313f87\",\n\t\t\t\"component\": \"_Runtime\",\n\t\t\t\"state\": \"system\",\n\t\t\t\"action\": \"function system(params) {\\n  let RuntimeSystem = null,\\n    system = {},\\n    systemId = '',\\n    result = [],\\n    conf = {};\\n\\n  if (params) {\\n    if (typeof params === 'string') {\\n      conf.master = true;\\n      conf.name = params;\\n    } else {\\n      conf = params;\\n      conf.master = true;\\n    }\\n    RuntimeSystem = this.require('_System');\\n    system = new RuntimeSystem(conf);\\n    system.state('active');\\n  } else {\\n    result = $db.collections._System.find({\\n      'master': true\\n    });\\n    if (result.length) {\\n      systemId = result[0]._id;\\n      system = $component.get(systemId);\\n    }\\n  }\\n  return system;\\n}\",\n\t\t\t\"core\": true,\n\t\t\t\"useCoreAPI\": true\n\t\t},\n\t\t\"1cfa4145f614da8\": {\n\t\t\t\"_id\": \"1cfa4145f614da8\",\n\t\t\t\"component\": \"_Runtime\",\n\t\t\t\"state\": \"message\",\n\t\t\t\"action\": \"function message(msg) { \\n  $db.collections._Message.insert(msg);\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"1cb9d103d41dd97\": {\n\t\t\t\"_id\": \"1cb9d103d41dd97\",\n\t\t\t\"component\": \"e89c617b6b15d24\",\n\t\t\t\"state\": \"start\",\n\t\t\t\"action\": \"function start() {\\n  if (typeof document !== 'undefined') {\\n    document.addEventListener('DOMContentLoaded', function DOMContentLoaded(e) {\\n      let systems = [],\\n        system = null,\\n        scripts = [],\\n        script = null,\\n        logLevel = 'warn',\\n        i = 0,\\n        length = 0;\\n    \\n      systems = document.querySelectorAll('link[rel=system]');\\n      length = systems.length;\\n  \\n      // logger\\n      scripts = document.querySelectorAll('script[log]');\\n      if (scripts.length) {\\n        logLevel = scripts[0].getAttribute('log');\\n        this.require('logger').level(logLevel);\\n      }\\n  \\n      // systems\\n      for (i = 0; i < length; i++) {\\n        system = systems[i];\\n  \\n        if (system.getAttribute('async') === 'false') {\\n          this.require('runtime').install(system.href, false);\\n        } else {\\n          this.require('runtime').install(system.href, true);\\n        }\\n      }\\n  \\n      // ready event\\n      if (length === 0) {\\n        this.require('runtime').ready();\\n      }\\n  }.bind(this));\\n  }\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"e2848b60-99a1-472f-b0e1-5923077f6c61\": {\n\t\t\t\"_id\": \"e2848b60-99a1-472f-b0e1-5923077f6c61\",\n\t\t\t\"component\": \"_History\",\n\t\t\t\"state\": \"back\",\n\t\t\t\"action\": \"function back() { \\n  return $history.back();\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"cebc40ad-c704-405c-b499-e60390b1bb82\": {\n\t\t\t\"_id\": \"cebc40ad-c704-405c-b499-e60390b1bb82\",\n\t\t\t\"component\": \"_History\",\n\t\t\t\"state\": \"forward\",\n\t\t\t\"action\": \"function forward() { \\n  return $history.forward();\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"c35af0df-2fc6-4af5-a476-4f2ee089c30e\": {\n\t\t\t\"_id\": \"c35af0df-2fc6-4af5-a476-4f2ee089c30e\",\n\t\t\t\"component\": \"_History\",\n\t\t\t\"state\": \"dump\",\n\t\t\t\"action\": \"function dump() { \\n  return $history.dump();\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"f06254ad-187e-400c-a582-b5ab81f24747\": {\n\t\t\t\"_id\": \"f06254ad-187e-400c-a582-b5ab81f24747\",\n\t\t\t\"component\": \"_History\",\n\t\t\t\"state\": \"get\",\n\t\t\t\"action\": \"function get(index) { \\n  return $history.get(index);\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"aa731445-8d7c-4dd7-a78f-5dd70f750f87\": {\n\t\t\t\"_id\": \"aa731445-8d7c-4dd7-a78f-5dd70f750f87\",\n\t\t\t\"component\": \"_History\",\n\t\t\t\"state\": \"from\",\n\t\t\t\"action\": \"function from(index) { \\n  return $history.from(index);\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"f565e46e-daee-492d-99ca-d9ed123132ba\": {\n\t\t\t\"_id\": \"f565e46e-daee-492d-99ca-d9ed123132ba\",\n\t\t\t\"component\": \"_History\",\n\t\t\t\"state\": \"load\",\n\t\t\t\"action\": \"function load(dump) { \\n  return $history.load(dump);\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"d3827b91-f6db-46d9-833e-351564cb6e91\": {\n\t\t\t\"_id\": \"d3827b91-f6db-46d9-833e-351564cb6e91\",\n\t\t\t\"component\": \"_History\",\n\t\t\t\"state\": \"start\",\n\t\t\t\"action\": \"function start() { \\n  return $history.start();\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"aa3b13ab-8b69-4962-bc44-e975cd42a206\": {\n\t\t\t\"_id\": \"aa3b13ab-8b69-4962-bc44-e975cd42a206\",\n\t\t\t\"component\": \"_History\",\n\t\t\t\"state\": \"stop\",\n\t\t\t\"action\": \"function stop() { \\n  return $history.stop();\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t},\n\t\t\"b112782c-3633-443e-8d7a-8d379b44e32d\": {\n\t\t\t\"_id\": \"b112782c-3633-443e-8d7a-8d379b44e32d\",\n\t\t\t\"component\": \"_History\",\n\t\t\t\"state\": \"clear\",\n\t\t\t\"action\": \"function clear() { \\n  return $history.clear();\\n}\",\n\t\t\t\"useCoreAPI\": true,\n\t\t\t\"core\": true\n\t\t}\n\t},\n\t\"types\": {\n\t\t\"css\": {\n\t\t\t\"_id\": \"h1d88311ac019211\",\n\t\t\t\"name\": \"css\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"core\": true\n\t\t},\n\t\t\"date\": {\n\t\t\t\"_id\": \"c17cad1bc3d17752\",\n\t\t\t\"name\": \"date\",\n\t\t\t\"type\": \"object\",\n\t\t\t\"core\": true\n\t\t},\n\t\t\"json\": {\n\t\t\t\"_id\": \"e1d25a12e67127ed\",\n\t\t\t\"name\": \"json\",\n\t\t\t\"type\": \"object\",\n\t\t\t\"core\": true\n\t\t},\n\t\t\"dbInsertEvent\": {\n\t\t\t\"_id\": \"148ef1e19810e6d\",\n\t\t\t\"core\": true,\n\t\t\t\"name\": \"dbInsertEvent\",\n\t\t\t\"type\": \"object\",\n\t\t\t\"schema\": {\n\t\t\t\t\"collection\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\"default\": \"\"\n\t\t\t\t},\n\t\t\t\t\"document\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\"default\": {}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"dbRemoveEvent\": {\n\t\t\t\"_id\": \"1952e1ac4213f4a\",\n\t\t\t\"name\": \"dbRemoveEvent\",\n\t\t\t\"type\": \"object\",\n\t\t\t\"core\": true,\n\t\t\t\"schema\": {\n\t\t\t\t\"collection\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\"default\": \"\"\n\t\t\t\t},\n\t\t\t\t\"id\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\"default\": \"\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"dbUpdateEvent\": {\n\t\t\t\"_id\": \"1f5c41309711752\",\n\t\t\t\"core\": true,\n\t\t\t\"name\": \"dbUpdateEvent\",\n\t\t\t\"type\": \"object\",\n\t\t\t\"schema\": {\n\t\t\t\t\"collection\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\"default\": \"\"\n\t\t\t\t},\n\t\t\t\t\"id\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\"default\": \"\"\n\t\t\t\t},\n\t\t\t\t\"field\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\"default\": \"\"\n\t\t\t\t},\n\t\t\t\t\"value\": {\n\t\t\t\t\t\"type\": \"any\",\n\t\t\t\t\t\"mandatory\": true,\n\t\t\t\t\t\"default\": null\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"collection\": {\n\t\t\t\"_id\": \"d1c0d0130c616199\",\n\t\t\t\"name\": \"collection\",\n\t\t\t\"type\": \"object\",\n\t\t\t\"schema\": {\n\t\t\t\t\"type\": {\n\t\t\t\t\t\"type\": [\n\t\t\t\t\t\t\"string\"\n\t\t\t\t\t],\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"readOnly\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"mandatory\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"default\": {\n\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"description\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t},\n\t\t\t\t\"label\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t},\n\t\t\t\t\"kind\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\": true\n\t\t},\n\t\t\"event\": {\n\t\t\t\"_id\": \"g1668d1de2d1ff6f\",\n\t\t\t\"name\": \"event\",\n\t\t\t\"type\": \"object\",\n\t\t\t\"schema\": {\n\t\t\t\t\"params\": {\n\t\t\t\t\t\"type\": [\n\t\t\t\t\t\t\"parameter\"\n\t\t\t\t\t],\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t},\n\t\t\t\t\"description\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\": true\n\t\t},\n\t\t\"html\": {\n\t\t\t\"_id\": \"y161c21320b11acb\",\n\t\t\t\"name\": \"html\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"core\": true\n\t\t},\n\t\t\"javascript\": {\n\t\t\t\"_id\": \"s13d4c1fdf916504\",\n\t\t\t\"name\": \"javascript\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"core\": true\n\t\t},\n\t\t\"link\": {\n\t\t\t\"_id\": \"p124601801d1dbfa\",\n\t\t\t\"name\": \"link\",\n\t\t\t\"type\": \"object\",\n\t\t\t\"schema\": {\n\t\t\t\t\"type\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"readOnly\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"mandatory\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"default\": {\n\t\t\t\t\t\"type\": \"{type}\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"description\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t},\n\t\t\t\t\"label\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t},\n\t\t\t\t\"kind\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\": true\n\t\t},\n\t\t\"log\": {\n\t\t\t\"_id\": \"d1fd161a4a4149fc\",\n\t\t\t\"name\": \"log\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"value\": [\n\t\t\t\t\"debug\",\n\t\t\t\t\"info\",\n\t\t\t\t\"warn\",\n\t\t\t\t\"error\",\n\t\t\t\t\"off\"\n\t\t\t],\n\t\t\t\"core\": true\n\t\t},\n\t\t\"message\": {\n\t\t\t\"_id\": \"l13b061ac571272d\",\n\t\t\t\"name\": \"message\",\n\t\t\t\"type\": \"object\",\n\t\t\t\"schema\": {\n\t\t\t\t\"event\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"from\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t},\n\t\t\t\t\"data\": {\n\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\": true\n\t\t},\n\t\t\"method\": {\n\t\t\t\"_id\": \"x1227218eed1f3e9\",\n\t\t\t\"name\": \"method\",\n\t\t\t\"type\": \"object\",\n\t\t\t\"schema\": {\n\t\t\t\t\"result\": {\n\t\t\t\t\t\"type\": \"any\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t},\n\t\t\t\t\"params\": {\n\t\t\t\t\t\"type\": [\n\t\t\t\t\t\t\"parameter\"\n\t\t\t\t\t],\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t},\n\t\t\t\t\"description\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\": true\n\t\t},\n\t\t\"osgiStates\": {\n\t\t\t\"_id\": \"q1f0ca120fc13fb3\",\n\t\t\t\"name\": \"osgiStates\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"value\": [\n\t\t\t\t\"none\",\n\t\t\t\t\"installed\",\n\t\t\t\t\"resolved\",\n\t\t\t\t\"starting\",\n\t\t\t\t\"active\",\n\t\t\t\t\"stopping\",\n\t\t\t\t\"uninstalled\"\n\t\t\t],\n\t\t\t\"core\": true\n\t\t},\n\t\t\"parameter\": {\n\t\t\t\"_id\": \"e1b18e16c6c195ad\",\n\t\t\t\"name\": \"parameter\",\n\t\t\t\"type\": \"object\",\n\t\t\t\"schema\": {\n\t\t\t\t\"description\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t},\n\t\t\t\t\"name\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"type\": {\n\t\t\t\t\t\"type\": \"any\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"mandatory\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t},\n\t\t\t\t\"default\": {\n\t\t\t\t\t\"type\": \"{type}\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\": true\n\t\t},\n\t\t\"property\": {\n\t\t\t\"_id\": \"a16a3a1ae051a55d\",\n\t\t\t\"name\": \"property\",\n\t\t\t\"type\": \"object\",\n\t\t\t\"schema\": {\n\t\t\t\t\"type\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"readOnly\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"mandatory\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"default\": {\n\t\t\t\t\t\"type\": \"{type}\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"description\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t},\n\t\t\t\t\"label\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": false\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\": true\n\t\t},\n\t\t\"text\": {\n\t\t\t\"_id\": \"c136fc129a912f54\",\n\t\t\t\"name\": \"text\",\n\t\t\t\"type\": \"string\",\n\t\t\t\"core\": true\n\t\t},\n\t\t\"errorInfo\": {\n\t\t\t\"_id\": \"e198761fc0b1ae8a\",\n\t\t\t\"name\": \"errorInfo\",\n\t\t\t\"type\": \"object\",\n\t\t\t\"schema\": {\n\t\t\t\t\"message\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t},\n\t\t\t\t\"stack\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"mandatory\": true\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"core\": true\n\t\t}\n\t},\n\t\"components\": {\n\t\t\"_Channel\": {\n\t\t\t\"channel\": {\n\t\t\t\t\"_id\": \"channel\"\n\t\t\t}\n\t\t},\n\t\t\"_Database\": {\n\t\t\t\"db\": {\n\t\t\t\t\"_id\": \"db\"\n\t\t\t}\n\t\t},\n\t\t\"_Logger\": {\n\t\t\t\"logger\": {\n\t\t\t\t\"_id\": \"logger\",\n\t\t\t\t\"level\": \"warn\"\n\t\t\t}\n\t\t},\n\t\t\"_Metamodel\": {\n\t\t\t\"metamodel\": {\n\t\t\t\t\"_id\": \"metamodel\"\n\t\t\t}\n\t\t},\n\t\t\"_Runtime\": {\n\t\t\t\"runtime\": {\n\t\t\t\t\"_id\": \"runtime\",\n\t\t\t\t\"version\": \"5.1.0\"\n\t\t\t}\n\t\t},\n\t\t\"_History\": {\n\t\t\t\"history\": {\n\t\t\t\t\"_id\": \"history\"\n\t\t\t}\n\t\t}\n\t},\n\t\"_id\": \"e89c617b6b15d24\"\n}\n};\n"],"names":["$mson","ID","NAME","DESCRIPTION","INHERIT","CLASS","CORE","INTERNAL_NAMES","PROPERTY_TYPE","COLLECTION_TYPE","LINK_TYPE","METHOD_TYPE","EVENT_TYPE","INTERNAL_TYPES","DEFAULT_TYPES","SCHEMA_DEFINITION","_id","type","mandatory","_name","_inherit","default","_class","_core","_description","MODEL_DEFINITION","TYPE_DEFINITION","name","schema","value","core","description","loggerRef","fakeLoggerRef","currentLevel","level","levelName","this","debug","message","console","log","info","warn","error","getLogger","loggerId","loggers","result","$metamodel","getModel","$db","collections","_Logger","find","length","$component","get","$log","unknownProperty","propertyName","invalidPropertyType","property","realType","constructor","invalidEnumValue","invalidClassName","componentId","constructorName","missingProperty","missingImplementation","invalidTypeImp","className","missingPropertyImp","unknownPropertyImp","invalidTypeDefinition","invalidPropertyName","id","propertyValue","classInfo","readOnlyProperty","invalidDocumentOnDbInsert","doc","collectionName","JSON","stringify","replace","invalidPropertyTypeOnDbUpdate","unknownPropertyOnDbUpdate","unknownMethod","classId","methodName","invalidCollectionName","invalidResultType","expectedType","unknownComponent","invalidParamNumber","invalidParamType","paramName","undefined","behaviorNotUnique","stateName","invalidStateOn","invalidStateOff","masterSystemNotFound","invalidType","typeName","invalidConfiguration","obj","unknownType","unknownPath","path","subpath","canNotYetValidate","invalidChannelEvent","eventName","invalidParamNumberMethodOn","updateUuid","currentId","newId","alreadyUsed","invalidUseOfComponent","invalidSchema","invalidModel","invalidParameters","document","destroyedComponentCall","invalidConctructorParameters","object","unknownModel","missingSchema","cyclicDependency","invalidEnumType","loadSchema","loadModel","loadType","generatingSchema","checkModel","createClass","initDb","actionInvokeError","state","invalidSchemaPropertyName","propName","invalidSchemaProperty","invalidPropertyFormat","invalidState","model","unknownContext","historyDocumentInserted","historyDocumentRemoved","historyDocumentUpdated","fieldName","invalidCollectionItem","runtimeRef","$helper","isRuntime","_Runtime","getRuntime","runtimeId","search","isOnNode","window","global","generateId","validPrefix","charAt","Math","floor","random","getPrefix","c","r","toString","store","inheritance","inheritanceTree","schemas","generatedSchemas","models","generatedModels","states","isInternalName","indexOf","generateModels","att","schemaName","schemaDef","modelName","modelParent","modelExt","modelDef","mergedModel","parents","i","j","nbAncestors","sortInheritTree","Array","isArray","readOnly","label","params","merge","temp","keys","push","Object","sort","forEach","index","sortInheritanceTree","getParents","reverse","_GeneratedSchema","insert","_GeneratedModel","createInheritanceTree","c3linerization","ancestors","_removeCandidate","elt","elts","arr","pop","_isCandidate","_findCandidate","_linerize","_checkCyclicDep","item","isCyclicDeb","slice","concat","candidates","_isEmpty","_merge","map","extend","sonExtend","son","ancestor","prop","checkImp","classDef","classImp","checkSchema","hasType","checkCustomSchema","typeDef","isValidType","isValidSchema","getRealClassName","trim","isCustomType","isClassName","getRealType","getClassName","isValidEnumValue","enumValue","date","Date","isNaN","getDate","checkType","componentSchema","attributeType","split","source","target","hasOwnProperty","initConfiguration","isMethod","defaultValue","_Type","_Schema","generateConfiguration","paramPropName","methodConf","parse","clear","isDocument","_isValidCustomType","inheritFrom","isValid","_isValidType","isValidEnum","component","componentClassName","_isInstanceOf","field","typeSchema","typeRef","_isValidClassName","_isValidTypeReference","isValidObject","strict","cleanRef","comp","isComponent","typeArray","getType","getModelPathType","subpaths","structure","isValidModelPath","parentName","_searchParent","ancestorName","isAncestor","mergedSchema","inherits","filteredList","list","cleanName","_removeDuplicate","update","_Model","init","collection","create","types","inherit","loadInMemory","generateSchemas","checkModels","attribute","getStates","createDbStructure","isEvent","isProperty","isLink","isCollection","isStructure","isValidState","prepareObject","getSchema","createFunction","func","useCoreAPI","beginBody","funcParams","paramsClean","funcBody","header","action","isArrowFunction","isAsync","isOneLine","functionName","substring","param","lastIndexOf","Function","join","$behavior","add","context","behaviorId","strAction","_Behavior","remove","removeFromMemory","getActions","dbResult","behavior","$state","set","stack","cursorIndex","historizationEnabled","$history","isEnabled","start","stop","pushState","back","oldValue","forward","from","dump","load","noError","newStack","e","RuntimeError","isModelPath","getParamNumber","method","min","max","parent","injectedParams","args","setDefaultValue","checkInputNumbers","checkInput","checkOutput","process","setTimeout","bind","apply","system","paramNumber","modelNumberParam","paramsName","paramsType","paramsNumber","getParamNames","getParamTypes","methodResult","returnType","resultType","getReturnType","data","currentState","actions","behaviors","actionFromMemory","prototype","Error","$workflow","_Array","conf","arrDb","isReadOnly","_copy","val","require","_add","deleteCount","del","unshift","splice","_remove","shift","funct","begin","end","getStructureValue","subPath","setStructureValue","addProperties","Class","properties","propNames","getProperties","proxy","propertyType","propertyReadOnly","position","runtimeArr","realVal","coll","_isValidCollection","_getRealCollection","addStructure","toISOString","sructure","getStructureProperties","parentPath","fullPath","addMethods","methods","getMethods","paramsWithContext","arguments","proxyWithContext","call","addEvents","events","getEvents","systems","systemId","_System","master","event","_Message","factory","config","freeze","addIdClass","on","isCore","addOn","addOnClass","off","addOffClass","addRequireClass","addInitClass","destroy","addDestroyClass","collectionNames","internalDB","coreDb","arrCopy","docA","docB","isValidWithSelectors","query","selector","RegExp","match","findInArray","expSystem","dbDump","mastersystem","exportedSystem","version","typeId","schemaId","modelId","count","components","DatabaseCollection","importSystem","importedSystem","impSystem","resultId","criteria","Component","channels","_Channel","options","docs","attributeName","createdDocumentId","upsert","exportSystem","defaultName","expSubsystem","runtimeSystemId","runtimeSystem","sytemId","channel","send","$systemInstalled","$systemResolved","$systemStarted","$systemStopped","$systemUninstalled","install","uninstall","status","bundle","ready","location","css","json","dbInsertEvent","dbRemoveEvent","dbUpdateEvent","kind","html","javascript","link","osgiStates","parameter","text","errorInfo","_Database","db","logger","_Metamodel","metamodel","runtime","_History","history"],"mappings":"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"}